
IMU_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007d48  08007d48  00017d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c4  080081c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081cc  080081cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081cc  080081cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080081d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200001dc  080083b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  080083b0  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021be  00000000  00000000  00030179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00033098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bc1  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cda  00000000  00000000  000568f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce566  00000000  00000000  000675d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049cc  00000000  00000000  00135b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d30 	.word	0x08007d30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007d30 	.word	0x08007d30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <__io_putchar+0x20>)
 8000f9e:	f003 fa82 	bl	80044a6 <HAL_UART_Transmit>
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000024c 	.word	0x2000024c

08000fb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b099      	sub	sp, #100	; 0x64
 8000fb4:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb6:	f000 fce5 	bl	8001984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fba:	f000 f86f 	bl	800109c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fbe:	f000 f95f 	bl	8001280 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000fc2:	f000 f905 	bl	80011d0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000fc6:	f000 f92d 	bl	8001224 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8000fca:	f000 f8d3 	bl	8001174 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("ADX345 example version 1.0.0\r\n");
 8000fce:	482c      	ldr	r0, [pc, #176]	; (8001080 <main+0xd0>)
 8000fd0:	f004 fe0a 	bl	8005be8 <puts>

	address = ((uint16_t) ADXL345<<1);
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <main+0xd4>)
 8000fd6:	22a6      	movs	r2, #166	; 0xa6
 8000fd8:	801a      	strh	r2, [r3, #0]
	initADXL345(hi2c1, address);
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <main+0xd4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	4c2a      	ldr	r4, [pc, #168]	; (8001088 <main+0xd8>)
 8000fe0:	9311      	str	r3, [sp, #68]	; 0x44
 8000fe2:	4668      	mov	r0, sp
 8000fe4:	f104 0310 	add.w	r3, r4, #16
 8000fe8:	2244      	movs	r2, #68	; 0x44
 8000fea:	4619      	mov	r1, r3
 8000fec:	f004 f8f6 	bl	80051dc <memcpy>
 8000ff0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ff4:	f000 f9f2 	bl	80013dc <initADXL345>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ReadReg(hi2c1, address, (uint8_t) DATAX0, buf_rx, 2);
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <main+0xd4>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	4c22      	ldr	r4, [pc, #136]	; (8001088 <main+0xd8>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	9214      	str	r2, [sp, #80]	; 0x50
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <main+0xdc>)
 8001004:	9213      	str	r2, [sp, #76]	; 0x4c
 8001006:	2232      	movs	r2, #50	; 0x32
 8001008:	9212      	str	r2, [sp, #72]	; 0x48
 800100a:	9311      	str	r3, [sp, #68]	; 0x44
 800100c:	4668      	mov	r0, sp
 800100e:	f104 0310 	add.w	r3, r4, #16
 8001012:	2244      	movs	r2, #68	; 0x44
 8001014:	4619      	mov	r1, r3
 8001016:	f004 f8e1 	bl	80051dc <memcpy>
 800101a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800101e:	f000 fa33 	bl	8001488 <ReadReg>
		int DATAX = (((int) buf_rx[1]) << 8) | (int) buf_rx[0];
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <main+0xdc>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <main+0xdc>)
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	4313      	orrs	r3, r2
 800102e:	607b      	str	r3, [r7, #4]
		float datax = DATAX / 256.0;
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fa97 	bl	8000564 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <main+0xe0>)
 800103c:	f7ff fc26 	bl	800088c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdce 	bl	8000be8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	603b      	str	r3, [r7, #0]
		printf("DEVID: %02x %02x %02x %f \r\n", DEVID, buf_rx[1], buf_rx[0],datax);
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <main+0xe4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461c      	mov	r4, r3
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <main+0xdc>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	461d      	mov	r5, r3
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <main+0xdc>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461e      	mov	r6, r3
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f7ff fa90 	bl	8000588 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9cd 2300 	strd	r2, r3, [sp]
 8001070:	4633      	mov	r3, r6
 8001072:	462a      	mov	r2, r5
 8001074:	4621      	mov	r1, r4
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <main+0xe8>)
 8001078:	f004 fd30 	bl	8005adc <iprintf>
	while (1) {
 800107c:	e7bc      	b.n	8000ff8 <main+0x48>
 800107e:	bf00      	nop
 8001080:	08007d48 	.word	0x08007d48
 8001084:	2000079c 	.word	0x2000079c
 8001088:	200001f8 	.word	0x200001f8
 800108c:	200007ac 	.word	0x200007ac
 8001090:	40700000 	.word	0x40700000
 8001094:	200007b8 	.word	0x200007b8
 8001098:	08007d68 	.word	0x08007d68

0800109c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2234      	movs	r2, #52	; 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f8a4 	bl	80051f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <SystemClock_Config+0xd0>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <SystemClock_Config+0xd0>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemClock_Config+0xd0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <SystemClock_Config+0xd4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <SystemClock_Config+0xd4>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <SystemClock_Config+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001100:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001110:	23a8      	movs	r3, #168	; 0xa8
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001118:	2307      	movs	r3, #7
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fed3 	bl	8003ed0 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x98>
		Error_Handler();
 8001130:	f000 f9ce 	bl	80014d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001140:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001144:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2105      	movs	r1, #5
 8001152:	4618      	mov	r0, r3
 8001154:	f002 f848 	bl	80031e8 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xc6>
		Error_Handler();
 800115e:	f000 f9b7 	bl	80014d0 <Error_Handler>
	}
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	; 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 166;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	22a6      	movs	r2, #166	; 0xa6
 800118e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001196:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f000 ff11 	bl	8001fd8 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011bc:	f000 f988 	bl	80014d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00061a80 	.word	0x00061a80

080011d0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_USART3_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART3_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART3_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART3_UART_Init+0x4c>)
 8001208:	f003 f900 	bl	800440c <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001212:	f000 f95d 	bl	80014d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000024c 	.word	0x2000024c
 8001220:	40004800 	.word	0x40004800

08001224 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800122e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001232:	2206      	movs	r2, #6
 8001234:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001238:	2202      	movs	r2, #2
 800123a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001244:	2202      	movs	r2, #2
 8001246:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	2201      	movs	r2, #1
 800124c:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125c:	2201      	movs	r2, #1
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001268:	f001 fe75 	bl	8002f56 <HAL_PCD_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001272:	f000 f92d 	bl	80014d0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000290 	.word	0x20000290

08001280 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <MX_GPIO_Init+0x14c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a44      	ldr	r2, [pc, #272]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a36      	ldr	r2, [pc, #216]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <MX_GPIO_Init+0x14c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_GPIO_Init+0x14c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <MX_GPIO_Init+0x14c>)
 8001310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0x14c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_GPIO_Init+0x14c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a28      	ldr	r2, [pc, #160]	; (80013cc <MX_GPIO_Init+0x14c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0x14c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f244 0181 	movw	r1, #16513	; 0x4081
 8001344:	4822      	ldr	r0, [pc, #136]	; (80013d0 <MX_GPIO_Init+0x150>)
 8001346:	f000 fe2d 	bl	8001fa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800134a:	2200      	movs	r2, #0
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	4821      	ldr	r0, [pc, #132]	; (80013d4 <MX_GPIO_Init+0x154>)
 8001350:	f000 fe28 	bl	8001fa4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <MX_GPIO_Init+0x158>)
 800136c:	f000 fc86 	bl	8001c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001370:	f244 0381 	movw	r3, #16513	; 0x4081
 8001374:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_GPIO_Init+0x150>)
 800138a:	f000 fc77 	bl	8001c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0x154>)
 80013a6:	f000 fc69 	bl	8001c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0x154>)
 80013be:	f000 fc5d 	bl	8001c7c <HAL_GPIO_Init>

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40020800 	.word	0x40020800

080013dc <initADXL345>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef initADXL345(I2C_HandleTypeDef i2c_hdl, uint16_t address) {
 80013dc:	b084      	sub	sp, #16
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af04      	add	r7, sp, #16
 80013e4:	f107 0c10 	add.w	ip, r7, #16
 80013e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	buf_tx[0] = PWR_CTL; //register
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <initADXL345+0x94>)
 80013ee:	222d      	movs	r2, #45	; 0x2d
 80013f0:	701a      	strb	r2, [r3, #0]
	buf_tx[1] = MEA_MODE; //measurement mode
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <initADXL345+0x94>)
 80013f4:	2208      	movs	r2, #8
 80013f6:	705a      	strb	r2, [r3, #1]
	HAL_StatusTypeDef ret ;

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&i2c_hdl, address,(uint8_t*) buf_tx, 2, 1000);
	ret = HAL_I2C_Mem_Write(&i2c_hdl, address, (uint8_t) PWR_CTL, 1,&buf_tx[1], 1, 1000);
 80013f8:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <initADXL345+0x98>)
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2301      	movs	r3, #1
 800140c:	222d      	movs	r2, #45	; 0x2d
 800140e:	f107 0010 	add.w	r0, r7, #16
 8001412:	f000 ff25 	bl	8002260 <HAL_I2C_Mem_Write>
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <initADXL345+0x4a>
		printf("ERROR PWRCTL\n");
 8001420:	4815      	ldr	r0, [pc, #84]	; (8001478 <initADXL345+0x9c>)
 8001422:	f004 fbe1 	bl	8005be8 <puts>

	//ret = HAL_I2C_Master_Transmit(&i2c_hdl, address, 0x00, 1, 1000);
	ret = HAL_I2C_Mem_Read(&i2c_hdl, address, (uint8_t) DEVID_REG, 1, &DEVID, 1,
 8001426:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2301      	movs	r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <initADXL345+0xa0>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2200      	movs	r2, #0
 800143c:	f107 0010 	add.w	r0, r7, #16
 8001440:	f001 f808 	bl	8002454 <HAL_I2C_Mem_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
			1000);
	if (ret != HAL_OK) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <initADXL345+0x78>
		printf("Ups no measurement mode enabled sent\n");
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <initADXL345+0xa4>)
 8001450:	f004 fbca 	bl	8005be8 <puts>
	}
	//HAL_I2C_Master_Receive(&i2c_hdl, address, &DEVID, 1, 1000);

	printf("DEV ID: (E5) %02x \r\n", DEVID);
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <initADXL345+0xa0>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <initADXL345+0xa8>)
 800145c:	f004 fb3e 	bl	8005adc <iprintf>
	return ret;
 8001460:	79fb      	ldrb	r3, [r7, #7]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800146c:	b004      	add	sp, #16
 800146e:	4770      	bx	lr
 8001470:	200007a0 	.word	0x200007a0
 8001474:	200007a1 	.word	0x200007a1
 8001478:	08007d84 	.word	0x08007d84
 800147c:	200007b8 	.word	0x200007b8
 8001480:	08007d94 	.word	0x08007d94
 8001484:	08007dbc 	.word	0x08007dbc

08001488 <ReadReg>:
HAL_StatusTypeDef ReadReg(I2C_HandleTypeDef i2c_hdl, uint16_t address,
		uint8_t reg, uint8_t *pdata, uint16_t len) {
 8001488:	b084      	sub	sp, #16
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af04      	add	r7, sp, #16
 8001490:	f107 0c10 	add.w	ip, r7, #16
 8001494:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(&i2c_hdl, address,reg, 1, pdata, len,1000);
 8001498:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800149c:	b29a      	uxth	r2, r3
 800149e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	f107 0010 	add.w	r0, r7, #16
 80014b8:	f000 ffcc 	bl	8002454 <HAL_I2C_Mem_Read>
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]


	return ret;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014cc:	b004      	add	sp, #16
 80014ce:	4770      	bx	lr

080014d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_I2C_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <HAL_I2C_MspInit+0x8c>)
 8001588:	f000 fb78 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12c      	bne.n	8001638 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_MspInit+0x8c>)
 8001634:	f000 fb22 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004800 	.word	0x40004800
 8001644:	40023800 	.word	0x40023800
 8001648:	40020c00 	.word	0x40020c00

0800164c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0a0      	sub	sp, #128	; 0x80
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	225c      	movs	r2, #92	; 0x5c
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fdc3 	bl	80051f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d14e      	bne.n	800171a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001682:	2300      	movs	r3, #0
 8001684:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fec6 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001696:	f7ff ff1b 	bl	80014d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c8:	230a      	movs	r3, #10
 80016ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <HAL_PCD_MspInit+0xdc>)
 80016d4:	f000 fad2 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016ea:	4619      	mov	r1, r3
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <HAL_PCD_MspInit+0xdc>)
 80016ee:	f000 fac5 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6353      	str	r3, [r2, #52]	; 0x34
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_PCD_MspInit+0xd8>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3780      	adds	r7, #128	; 0x80
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f956 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_kill>:

int _kill(int pid, int sig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179a:	f003 fcf5 	bl	8005188 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2216      	movs	r2, #22
 80017a2:	601a      	str	r2, [r3, #0]
  return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_exit>:

void _exit (int status)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffe7 	bl	8001790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c2:	e7fe      	b.n	80017c2 <_exit+0x12>

080017c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e00a      	b.n	80017ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d6:	f3af 8000 	nop.w
 80017da:	4601      	mov	r1, r0
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf0      	blt.n	80017d6 <_read+0x12>
  }

  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e009      	b.n	8001824 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fbb7 	bl	8000f8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf1      	blt.n	8001810 <_write+0x12>
  }
  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_close>:

int _close(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	605a      	str	r2, [r3, #4]
  return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_isatty>:

int _isatty(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f003 fc5a 	bl	8005188 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20020000 	.word	0x20020000
 8001900:	00000400 	.word	0x00000400
 8001904:	200007bc 	.word	0x200007bc
 8001908:	200007d8 	.word	0x200007d8

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001936:	490e      	ldr	r1, [pc, #56]	; (8001970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800194c:	4c0b      	ldr	r4, [pc, #44]	; (800197c <LoopFillZerobss+0x26>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195a:	f7ff ffd7 	bl	800190c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f003 fc19 	bl	8005194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fb25 	bl	8000fb0 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001974:	080081d4 	.word	0x080081d4
  ldr r2, =_sbss
 8001978:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800197c:	200007d4 	.word	0x200007d4

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f931 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fd90 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f93b 	bl	8001c62 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a04:	f000 f911 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	200007c0 	.word	0x200007c0

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200007c0 	.word	0x200007c0

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff47 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff5c 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffb0 	bl	8001bd0 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e165      	b.n	8001f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8154 	bne.w	8001f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80ae 	beq.w	8001f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x308>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x21a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x30c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x216>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x310>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x314>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x20e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_GPIO_Init+0x318>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x20a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x31c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x206>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a49      	ldr	r2, [pc, #292]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00c      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00a      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x21c>
 8001e96:	2300      	movs	r3, #0
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_GPIO_Init+0x324>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	f67f ae96 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40021400 	.word	0x40021400
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e12b      	b.n	8002242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fa94 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800203c:	f001 f9c6 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a81      	ldr	r2, [pc, #516]	; (800224c <HAL_I2C_Init+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d807      	bhi.n	800205c <HAL_I2C_Init+0x84>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a80      	ldr	r2, [pc, #512]	; (8002250 <HAL_I2C_Init+0x278>)
 8002050:	4293      	cmp	r3, r2
 8002052:	bf94      	ite	ls
 8002054:	2301      	movls	r3, #1
 8002056:	2300      	movhi	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e006      	b.n	800206a <HAL_I2C_Init+0x92>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a7d      	ldr	r2, [pc, #500]	; (8002254 <HAL_I2C_Init+0x27c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0e7      	b.n	8002242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a78      	ldr	r2, [pc, #480]	; (8002258 <HAL_I2C_Init+0x280>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_I2C_Init+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d802      	bhi.n	80020ac <HAL_I2C_Init+0xd4>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	e009      	b.n	80020c0 <HAL_I2C_Init+0xe8>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_I2C_Init+0x284>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	495c      	ldr	r1, [pc, #368]	; (800224c <HAL_I2C_Init+0x274>)
 80020dc:	428b      	cmp	r3, r1
 80020de:	d819      	bhi.n	8002114 <HAL_I2C_Init+0x13c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e59      	subs	r1, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ee:	1c59      	adds	r1, r3, #1
 80020f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_I2C_Init+0x138>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e59      	subs	r1, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	e051      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002110:	2304      	movs	r3, #4
 8002112:	e04f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_I2C_Init+0x168>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e012      	b.n	8002166 <HAL_I2C_Init+0x18e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	0099      	lsls	r1, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x196>
 800216a:	2301      	movs	r3, #1
 800216c:	e022      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10e      	bne.n	8002194 <HAL_I2C_Init+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e58      	subs	r0, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	fbb0 f3f3 	udiv	r3, r0, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6911      	ldr	r1, [r2, #16]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	000186a0 	.word	0x000186a0
 8002250:	001e847f 	.word	0x001e847f
 8002254:	003d08ff 	.word	0x003d08ff
 8002258:	431bde83 	.word	0x431bde83
 800225c:	10624dd3 	.word	0x10624dd3

08002260 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	817b      	strh	r3, [r7, #10]
 8002272:	460b      	mov	r3, r1
 8002274:	813b      	strh	r3, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227a:	f7ff fbe9 	bl	8001a50 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	f040 80d9 	bne.w	8002440 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	496d      	ldr	r1, [pc, #436]	; (800244c <HAL_I2C_Mem_Write+0x1ec>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fc7f 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0cc      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Mem_Write+0x56>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0c5      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d007      	beq.n	80022dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_I2C_Mem_Write+0x1f0>)
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800231e:	88f8      	ldrh	r0, [r7, #6]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fab6 	bl	80028a0 <I2C_RequestMemoryWrite>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d052      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fd00 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11b      	bne.n	80023e0 <HAL_I2C_Mem_Write+0x180>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1aa      	bne.n	800233e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fcec 	bl	8002dca <I2C_WaitOnBTFFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e016      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000

08002454 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	817b      	strh	r3, [r7, #10]
 8002466:	460b      	mov	r3, r1
 8002468:	813b      	strh	r3, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800246e:	f7ff faef 	bl	8001a50 <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	f040 8208 	bne.w	8002892 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2319      	movs	r3, #25
 8002488:	2201      	movs	r2, #1
 800248a:	497b      	ldr	r1, [pc, #492]	; (8002678 <HAL_I2C_Mem_Read+0x224>)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb85 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
 800249a:	e1fb      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Mem_Read+0x56>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e1f4      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d007      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2222      	movs	r2, #34	; 0x22
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_I2C_Mem_Read+0x228>)
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002512:	88f8      	ldrh	r0, [r7, #6]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	4603      	mov	r3, r0
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa52 	bl	80029cc <I2C_RequestMemoryRead>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1b0      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e184      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11b      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e164      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d11b      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	e144      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025f8:	e138      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f200 80f1 	bhi.w	80027e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b01      	cmp	r3, #1
 800260a:	d123      	bne.n	8002654 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fc1b 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e139      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002652:	e10b      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b02      	cmp	r3, #2
 800265a:	d14e      	bne.n	80026fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	2200      	movs	r2, #0
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <HAL_I2C_Mem_Read+0x22c>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa98 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e10e      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
 8002676:	bf00      	nop
 8002678:	00100002 	.word	0x00100002
 800267c:	ffff0000 	.word	0xffff0000
 8002680:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f8:	e0b8      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2200      	movs	r2, #0
 8002702:	4966      	ldr	r1, [pc, #408]	; (800289c <HAL_I2C_Mem_Read+0x448>)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fa49 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0bf      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	2200      	movs	r2, #0
 800275e:	494f      	ldr	r1, [pc, #316]	; (800289c <HAL_I2C_Mem_Read+0x448>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa1b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e091      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e4:	e042      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb2e 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04c      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d118      	bne.n	800286c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f aec2 	bne.w	80025fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00010004 	.word	0x00010004

080028a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f960 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d103      	bne.n	80028fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e05f      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800290c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	492d      	ldr	r1, [pc, #180]	; (80029c8 <I2C_RequestMemoryWrite+0x128>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f998 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04c      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa02 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e02b      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e021      	b.n	80029bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	6a39      	ldr	r1, [r7, #32]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9dc 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b04      	cmp	r3, #4
 800299c:	d107      	bne.n	80029ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e005      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00010002 	.word	0x00010002

080029cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f8c2 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d103      	bne.n	8002a36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0aa      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	4952      	ldr	r1, [pc, #328]	; (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f8fa 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e097      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f964 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e076      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa8:	893b      	ldrh	r3, [r7, #8]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	e021      	b.n	8002af8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f93e 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e050      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f923 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d107      	bne.n	8002b20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e035      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f82b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e013      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f863 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bac:	e025      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe ff4b 	bl	8001a50 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e023      	b.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10d      	bne.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	e00c      	b.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d0b6      	beq.n	8002bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c58:	e051      	b.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d123      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e046      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb8:	d021      	beq.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fec9 	bl	8001a50 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e020      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10c      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e00b      	b.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d18d      	bne.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d54:	e02d      	b.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f8ce 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e02d      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fe6f 	bl	8001a50 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d1ca      	bne.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd6:	e02d      	b.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f88d 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02d      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dee:	d021      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df0:	f7fe fe2e 	bl	8001a50 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d302      	bcc.n	8002e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d1ca      	bne.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e58:	e042      	b.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d119      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e029      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe fdd8 	bl	8001a50 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d1b5      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d11b      	bne.n	8002f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f58:	b08f      	sub	sp, #60	; 0x3c
 8002f5a:	af0a      	add	r7, sp, #40	; 0x28
 8002f5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e116      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fb62 	bl	800164c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fe53 	bl	8004c52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	687e      	ldr	r6, [r7, #4]
 8002fb4:	466d      	mov	r5, sp
 8002fb6:	f106 0410 	add.w	r4, r6, #16
 8002fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fca:	1d33      	adds	r3, r6, #4
 8002fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f001 fdde 	bl	8004b90 <USB_CoreInit>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0d7      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 fe41 	bl	8004c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e04a      	b.n	800308e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333c      	adds	r3, #60	; 0x3c
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	b298      	uxth	r0, r3
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3344      	adds	r3, #68	; 0x44
 8003034:	4602      	mov	r2, r0
 8003036:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3340      	adds	r3, #64	; 0x40
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3348      	adds	r3, #72	; 0x48
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334c      	adds	r3, #76	; 0x4c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3af      	bcc.n	8002ff8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e044      	b.n	8003128 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	3301      	adds	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3b5      	bcc.n	800309e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	687e      	ldr	r6, [r7, #4]
 800313a:	466d      	mov	r5, sp
 800313c:	f106 0410 	add.w	r4, r6, #16
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003150:	1d33      	adds	r3, r6, #4
 8003152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	f001 fdd9 	bl	8004d0c <USB_DevInit>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e014      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f80a 	bl	800319e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f001 ff97 	bl	80050c2 <USB_DevDisconnect>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800319e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	f043 0303 	orr.w	r3, r3, #3
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0cc      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d90c      	bls.n	8003224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0b8      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800325e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	494d      	ldr	r1, [pc, #308]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d044      	beq.n	8003308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d119      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e067      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4934      	ldr	r1, [pc, #208]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d8:	f7fe fbba 	bl	8001a50 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fe fbb6 	bl	8001a50 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e04f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d20c      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e032      	b.n	8003396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4916      	ldr	r1, [pc, #88]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800336e:	f000 fb7f 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003372:	4602      	mov	r2, r0
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	490a      	ldr	r1, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	5ccb      	ldrb	r3, [r1, r3]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fb1a 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023c00 	.word	0x40023c00
 80033a4:	40023800 	.word	0x40023800
 80033a8:	08007dd4 	.word	0x08007dd4
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000000 	.word	0x20000000

080033cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d0:	f7ff fff0 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0a9b      	lsrs	r3, r3, #10
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	08007de4 	.word	0x08007de4

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033f8:	f7ff ffdc 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0b5b      	lsrs	r3, r3, #13
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08007de4 	.word	0x08007de4

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003454:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	496c      	ldr	r1, [pc, #432]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003472:	2301      	movs	r3, #1
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003482:	4b64      	ldr	r3, [pc, #400]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003488:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	4960      	ldr	r1, [pc, #384]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80034a0:	2301      	movs	r3, #1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4955      	ldr	r1, [pc, #340]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d101      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80034dc:	2301      	movs	r3, #1
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ec:	4b49      	ldr	r3, [pc, #292]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	4946      	ldr	r1, [pc, #280]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350a:	d101      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800350c:	2301      	movs	r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003518:	2301      	movs	r3, #1
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 808a 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a38      	ldr	r2, [pc, #224]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003546:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a33      	ldr	r2, [pc, #204]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003552:	f7fe fa7d 	bl	8001a50 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe fa79 	bl	8001a50 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e278      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003580:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d02f      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	429a      	cmp	r2, r3
 8003594:	d028      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003596:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d114      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fa47 	bl	8001a50 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe fa43 	bl	8001a50 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e240      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ee      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f4:	d114      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	4902      	ldr	r1, [pc, #8]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
 8003610:	e00c      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	42470e40 	.word	0x42470e40
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003626:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800362e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	4944      	ldr	r1, [pc, #272]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800363a:	4313      	orrs	r3, r2
 800363c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003652:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003660:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003682:	4b32      	ldr	r3, [pc, #200]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003688:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003690:	492e      	ldr	r1, [pc, #184]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d011      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	4926      	ldr	r1, [pc, #152]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d101      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	491a      	ldr	r1, [pc, #104]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	4911      	ldr	r1, [pc, #68]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003716:	2301      	movs	r3, #1
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d005      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003728:	f040 80ff 	bne.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003732:	f7fe f98d 	bl	8001a50 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003738:	e00e      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800373a:	f7fe f989 	bl	8001a50 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d907      	bls.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e188      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800374c:	40023800 	.word	0x40023800
 8003750:	424711e0 	.word	0x424711e0
 8003754:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003758:	4b7e      	ldr	r3, [pc, #504]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ea      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003780:	2b00      	cmp	r3, #0
 8003782:	d028      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d124      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800378c:	4b71      	ldr	r3, [pc, #452]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	3301      	adds	r3, #1
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	019b      	lsls	r3, r3, #6
 80037b6:	431a      	orrs	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	431a      	orrs	r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	071b      	lsls	r3, r3, #28
 80037ce:	4961      	ldr	r1, [pc, #388]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d035      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003800:	d130      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	0f1b      	lsrs	r3, r3, #28
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	019b      	lsls	r3, r3, #6
 800382c:	431a      	orrs	r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	3b01      	subs	r3, #1
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	431a      	orrs	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	071b      	lsls	r3, r3, #28
 8003844:	4943      	ldr	r1, [pc, #268]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800384c:	4b41      	ldr	r3, [pc, #260]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003852:	f023 021f 	bic.w	r2, r3, #31
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	493d      	ldr	r1, [pc, #244]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d029      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003878:	d124      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	3301      	adds	r3, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	0f1b      	lsrs	r3, r3, #28
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	4925      	ldr	r1, [pc, #148]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	4917      	ldr	r1, [pc, #92]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe f8a4 	bl	8001a50 <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800390c:	f7fe f8a0 	bl	8001a50 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e09f      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 8095 	bne.w	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003938:	f7fe f88a 	bl	8001a50 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800393e:	e00f      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003940:	f7fe f886 	bl	8001a50 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d908      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e085      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	42470068 	.word	0x42470068
 800395c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003960:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396c:	d0e8      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02b      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d127      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	431a      	orrs	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	4928      	ldr	r1, [pc, #160]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	3b01      	subs	r3, #1
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	4922      	ldr	r1, [pc, #136]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01d      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fa:	d118      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	0e1b      	lsrs	r3, r3, #24
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	019b      	lsls	r3, r3, #6
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	4910      	ldr	r1, [pc, #64]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a34:	f7fe f80c 	bl	8001a50 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a3c:	f7fe f808 	bl	8001a50 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e007      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5a:	d1ef      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3730      	adds	r7, #48	; 0x30
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470070 	.word	0x42470070

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b0ae      	sub	sp, #184	; 0xb8
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a96:	4bcb      	ldr	r3, [pc, #812]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	f200 8206 	bhi.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x440>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_RCC_GetSysClockFreq+0x3c>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003eb1 	.word	0x08003eb1
 8003ab4:	08003eb1 	.word	0x08003eb1
 8003ab8:	08003eb1 	.word	0x08003eb1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003eb1 	.word	0x08003eb1
 8003ac4:	08003eb1 	.word	0x08003eb1
 8003ac8:	08003eb1 	.word	0x08003eb1
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003eb1 	.word	0x08003eb1
 8003ad4:	08003eb1 	.word	0x08003eb1
 8003ad8:	08003eb1 	.word	0x08003eb1
 8003adc:	08003ce1 	.word	0x08003ce1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4bb9      	ldr	r3, [pc, #740]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ae6:	e1e7      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4bb8      	ldr	r3, [pc, #736]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aee:	e1e3      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4bb4      	ldr	r3, [pc, #720]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afc:	4bb1      	ldr	r3, [pc, #708]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d071      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b08:	4bae      	ldr	r3, [pc, #696]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4621      	mov	r1, r4
 8003b48:	1a51      	subs	r1, r2, r1
 8003b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b52:	647b      	str	r3, [r7, #68]	; 0x44
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b60:	4649      	mov	r1, r9
 8003b62:	018b      	lsls	r3, r1, #6
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	018a      	lsls	r2, r1, #6
 8003b6e:	4641      	mov	r1, r8
 8003b70:	1a51      	subs	r1, r2, r1
 8003b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b74:	4649      	mov	r1, r9
 8003b76:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b88:	4649      	mov	r1, r9
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b92:	4641      	mov	r1, r8
 8003b94:	00ca      	lsls	r2, r1, #3
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba2:	462b      	mov	r3, r5
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	eb42 0303 	adc.w	r3, r2, r3
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bb8:	4629      	mov	r1, r5
 8003bba:	024b      	lsls	r3, r1, #9
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	024a      	lsls	r2, r1, #9
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bdc:	f7fd f854 	bl	8000c88 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bea:	e067      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bf8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c06:	2300      	movs	r3, #0
 8003c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4621      	mov	r1, r4
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c40:	4649      	mov	r1, r9
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4641      	mov	r1, r8
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4641      	mov	r1, r8
 8003c50:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c54:	4649      	mov	r1, r9
 8003c56:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6e:	4692      	mov	sl, r2
 8003c70:	469b      	mov	fp, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	eb1a 0303 	adds.w	r3, sl, r3
 8003c78:	623b      	str	r3, [r7, #32]
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ca8:	677a      	str	r2, [r7, #116]	; 0x74
 8003caa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003cae:	f7fc ffeb 	bl	8000c88 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cde:	e0eb      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce0:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d06b      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	2200      	movs	r2, #0
 8003d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	0159      	lsls	r1, r3, #5
 8003d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d26:	0150      	lsls	r0, r2, #5
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	1a51      	subs	r1, r2, r1
 8003d30:	61b9      	str	r1, [r7, #24]
 8003d32:	4629      	mov	r1, r5
 8003d34:	eb63 0301 	sbc.w	r3, r3, r1
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d46:	4659      	mov	r1, fp
 8003d48:	018b      	lsls	r3, r1, #6
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d50:	4651      	mov	r1, sl
 8003d52:	018a      	lsls	r2, r1, #6
 8003d54:	4651      	mov	r1, sl
 8003d56:	ebb2 0801 	subs.w	r8, r2, r1
 8003d5a:	4659      	mov	r1, fp
 8003d5c:	eb63 0901 	sbc.w	r9, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d74:	4690      	mov	r8, r2
 8003d76:	4699      	mov	r9, r3
 8003d78:	4623      	mov	r3, r4
 8003d7a:	eb18 0303 	adds.w	r3, r8, r3
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	462b      	mov	r3, r5
 8003d82:	eb49 0303 	adc.w	r3, r9, r3
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d94:	4629      	mov	r1, r5
 8003d96:	024b      	lsls	r3, r1, #9
 8003d98:	4621      	mov	r1, r4
 8003d9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d9e:	4621      	mov	r1, r4
 8003da0:	024a      	lsls	r2, r1, #9
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003daa:	2200      	movs	r2, #0
 8003dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003db0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003db4:	f7fc ff68 	bl	8000c88 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc2:	e065      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x420>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	4611      	mov	r1, r2
 8003ddc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003de0:	653b      	str	r3, [r7, #80]	; 0x50
 8003de2:	2300      	movs	r3, #0
 8003de4:	657b      	str	r3, [r7, #84]	; 0x54
 8003de6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003dea:	4642      	mov	r2, r8
 8003dec:	464b      	mov	r3, r9
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	0159      	lsls	r1, r3, #5
 8003df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfc:	0150      	lsls	r0, r2, #5
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4641      	mov	r1, r8
 8003e04:	1a51      	subs	r1, r2, r1
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	4649      	mov	r1, r9
 8003e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	018b      	lsls	r3, r1, #6
 8003e20:	4651      	mov	r1, sl
 8003e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e26:	4651      	mov	r1, sl
 8003e28:	018a      	lsls	r2, r1, #6
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	1a54      	subs	r4, r2, r1
 8003e2e:	4659      	mov	r1, fp
 8003e30:	eb63 0501 	sbc.w	r5, r3, r1
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	00eb      	lsls	r3, r5, #3
 8003e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e42:	00e2      	lsls	r2, r4, #3
 8003e44:	4614      	mov	r4, r2
 8003e46:	461d      	mov	r5, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb45 0303 	adc.w	r3, r5, r3
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e62:	4629      	mov	r1, r5
 8003e64:	028b      	lsls	r3, r1, #10
 8003e66:	4621      	mov	r1, r4
 8003e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	028a      	lsls	r2, r1, #10
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e78:	2200      	movs	r2, #0
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e82:	f7fc ff01 	bl	8000c88 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	0f1b      	lsrs	r3, r3, #28
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003eb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	37b8      	adds	r7, #184	; 0xb8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	00f42400 	.word	0x00f42400

08003ed0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e28d      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8083 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ef0:	4b94      	ldr	r3, [pc, #592]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d019      	beq.n	8003f30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003efc:	4b91      	ldr	r3, [pc, #580]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f08:	4b8e      	ldr	r3, [pc, #568]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f14:	d00c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4b8b      	ldr	r3, [pc, #556]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d112      	bne.n	8003f48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f22:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	4b84      	ldr	r3, [pc, #528]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d05b      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x124>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d157      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e25a      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x90>
 8003f52:	4b7c      	ldr	r3, [pc, #496]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7b      	ldr	r2, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0xcc>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0xb4>
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a75      	ldr	r2, [pc, #468]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b73      	ldr	r3, [pc, #460]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a72      	ldr	r2, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0xcc>
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a6b      	ldr	r2, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fd54 	bl	8001a50 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fd fd50 	bl	8001a50 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e21f      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b61      	ldr	r3, [pc, #388]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0xdc>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fd40 	bl	8001a50 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fd3c 	bl	8001a50 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e20b      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	4b57      	ldr	r3, [pc, #348]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x104>
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06f      	beq.n	80040e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004002:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b00      	cmp	r3, #0
 800400c:	d017      	beq.n	800403e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800400e:	4b4d      	ldr	r3, [pc, #308]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004016:	2b08      	cmp	r3, #8
 8004018:	d105      	bne.n	8004026 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d11c      	bne.n	800406c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004032:	4b44      	ldr	r3, [pc, #272]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d116      	bne.n	800406c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x186>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1d3      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4937      	ldr	r1, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	e03a      	b.n	80040e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_RCC_OscConfig+0x278>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd fce9 	bl	8001a50 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004082:	f7fd fce5 	bl	8001a50 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1b4      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4925      	ldr	r1, [pc, #148]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_OscConfig+0x278>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fcc8 	bl	8001a50 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fd fcc4 	bl	8001a50 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e193      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d036      	beq.n	800415c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x27c>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fca8 	bl	8001a50 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004104:	f7fd fca4 	bl	8001a50 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e173      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x274>)
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x234>
 8004122:	e01b      	b.n	800415c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x27c>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fd fc91 	bl	8001a50 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	e00e      	b.n	8004150 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004132:	f7fd fc8d 	bl	8001a50 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d907      	bls.n	8004150 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e15c      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
 8004144:	40023800 	.word	0x40023800
 8004148:	42470000 	.word	0x42470000
 800414c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b8a      	ldr	r3, [pc, #552]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ea      	bne.n	8004132 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8097 	beq.w	8004298 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b83      	ldr	r3, [pc, #524]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b7f      	ldr	r3, [pc, #508]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a7e      	ldr	r2, [pc, #504]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b7c      	ldr	r3, [pc, #496]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b79      	ldr	r3, [pc, #484]	; (8004380 <HAL_RCC_OscConfig+0x4b0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_OscConfig+0x4b0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a75      	ldr	r2, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x4b0>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fd fc4d 	bl	8001a50 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd fc49 	bl	8001a50 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e118      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <HAL_RCC_OscConfig+0x4b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x31e>
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a65      	ldr	r2, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x358>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x340>
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a60      	ldr	r2, [pc, #384]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0x358>
 8004210:	4b5a      	ldr	r3, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a59      	ldr	r2, [pc, #356]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	4b57      	ldr	r3, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a56      	ldr	r2, [pc, #344]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd fc0e 	bl	8001a50 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd fc0a 	bl	8001a50 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0d7      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	4b4b      	ldr	r3, [pc, #300]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ee      	beq.n	8004238 <HAL_RCC_OscConfig+0x368>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fd fbf8 	bl	8001a50 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fd fbf4 	bl	8001a50 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0c1      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ee      	bne.n	8004264 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a3a      	ldr	r2, [pc, #232]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80ad 	beq.w	80043fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d060      	beq.n	8004370 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d145      	bne.n	8004342 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b33      	ldr	r3, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0x4b4>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fbc8 	bl	8001a50 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd fbc4 	bl	8001a50 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e093      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	071b      	lsls	r3, r3, #28
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x4b4>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd fb99 	bl	8001a50 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7fd fb95 	bl	8001a50 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e064      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x452>
 8004340:	e05c      	b.n	80043fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0x4b4>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fb82 	bl	8001a50 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fd fb7e 	bl	8001a50 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e04d      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x4ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x480>
 800436e:	e045      	b.n	80043fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e040      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004388:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <HAL_RCC_OscConfig+0x538>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d030      	beq.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d129      	bne.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d122      	bne.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d119      	bne.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d10f      	bne.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800

0800440c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e03f      	b.n	800449e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd f8c2 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f929 	bl	80046a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af02      	add	r7, sp, #8
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d17c      	bne.n	80045c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_Transmit+0x2c>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e075      	b.n	80045c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_UART_Transmit+0x3e>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e06e      	b.n	80045c2 <HAL_UART_Transmit+0x11c>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fa:	f7fd faa9 	bl	8001a50 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	d108      	bne.n	8004528 <HAL_UART_Transmit+0x82>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e003      	b.n	8004530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004538:	e02a      	b.n	8004590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f840 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e036      	b.n	80045c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3302      	adds	r3, #2
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e007      	b.n	8004582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1cf      	bne.n	800453a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2140      	movs	r1, #64	; 0x40
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f810 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b090      	sub	sp, #64	; 0x40
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	e050      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e2:	d04c      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0x30>
 80045ea:	f7fd fa31 	bl	8001a50 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d241      	bcs.n	800467e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800461a:	637a      	str	r2, [r7, #52]	; 0x34
 800461c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3314      	adds	r3, #20
 8004634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	613b      	str	r3, [r7, #16]
   return(result);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464e:	623a      	str	r2, [r7, #32]
 8004650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	69f9      	ldr	r1, [r7, #28]
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	61bb      	str	r3, [r7, #24]
   return(result);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e00f      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	429a      	cmp	r2, r3
 800469a:	d09f      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3740      	adds	r7, #64	; 0x40
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b0c0      	sub	sp, #256	; 0x100
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	68d9      	ldr	r1, [r3, #12]
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	ea40 0301 	orr.w	r3, r0, r1
 80046d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004700:	f021 010c 	bic.w	r1, r1, #12
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800470e:	430b      	orrs	r3, r1
 8004710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	6999      	ldr	r1, [r3, #24]
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	ea40 0301 	orr.w	r3, r0, r1
 800472e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b8f      	ldr	r3, [pc, #572]	; (8004974 <UART_SetConfig+0x2cc>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d005      	beq.n	8004748 <UART_SetConfig+0xa0>
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b8d      	ldr	r3, [pc, #564]	; (8004978 <UART_SetConfig+0x2d0>)
 8004744:	429a      	cmp	r2, r3
 8004746:	d104      	bne.n	8004752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004748:	f7fe fe54 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 800474c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004750:	e003      	b.n	800475a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004752:	f7fe fe3b 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 8004756:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004764:	f040 810c 	bne.w	8004980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004772:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	1891      	adds	r1, r2, r2
 8004780:	65b9      	str	r1, [r7, #88]	; 0x58
 8004782:	415b      	adcs	r3, r3
 8004784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800478a:	4621      	mov	r1, r4
 800478c:	eb12 0801 	adds.w	r8, r2, r1
 8004790:	4629      	mov	r1, r5
 8004792:	eb43 0901 	adc.w	r9, r3, r1
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047aa:	4690      	mov	r8, r2
 80047ac:	4699      	mov	r9, r3
 80047ae:	4623      	mov	r3, r4
 80047b0:	eb18 0303 	adds.w	r3, r8, r3
 80047b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047b8:	462b      	mov	r3, r5
 80047ba:	eb49 0303 	adc.w	r3, r9, r3
 80047be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047d6:	460b      	mov	r3, r1
 80047d8:	18db      	adds	r3, r3, r3
 80047da:	653b      	str	r3, [r7, #80]	; 0x50
 80047dc:	4613      	mov	r3, r2
 80047de:	eb42 0303 	adc.w	r3, r2, r3
 80047e2:	657b      	str	r3, [r7, #84]	; 0x54
 80047e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047ec:	f7fc fa4c 	bl	8000c88 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <UART_SetConfig+0x2d4>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011c      	lsls	r4, r3, #4
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004808:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800480c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	64b9      	str	r1, [r7, #72]	; 0x48
 8004818:	415b      	adcs	r3, r3
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004820:	4641      	mov	r1, r8
 8004822:	eb12 0a01 	adds.w	sl, r2, r1
 8004826:	4649      	mov	r1, r9
 8004828:	eb43 0b01 	adc.w	fp, r3, r1
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800483c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004840:	4692      	mov	sl, r2
 8004842:	469b      	mov	fp, r3
 8004844:	4643      	mov	r3, r8
 8004846:	eb1a 0303 	adds.w	r3, sl, r3
 800484a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484e:	464b      	mov	r3, r9
 8004850:	eb4b 0303 	adc.w	r3, fp, r3
 8004854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004864:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800486c:	460b      	mov	r3, r1
 800486e:	18db      	adds	r3, r3, r3
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
 8004872:	4613      	mov	r3, r2
 8004874:	eb42 0303 	adc.w	r3, r2, r3
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
 800487a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800487e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004882:	f7fc fa01 	bl	8000c88 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4611      	mov	r1, r2
 800488c:	4b3b      	ldr	r3, [pc, #236]	; (800497c <UART_SetConfig+0x2d4>)
 800488e:	fba3 2301 	umull	r2, r3, r3, r1
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2264      	movs	r2, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	1acb      	subs	r3, r1, r3
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <UART_SetConfig+0x2d4>)
 80048a4:	fba3 2302 	umull	r2, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048b0:	441c      	add	r4, r3
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80048cc:	415b      	adcs	r3, r3
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048d4:	4641      	mov	r1, r8
 80048d6:	1851      	adds	r1, r2, r1
 80048d8:	6339      	str	r1, [r7, #48]	; 0x30
 80048da:	4649      	mov	r1, r9
 80048dc:	414b      	adcs	r3, r1
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048ec:	4659      	mov	r1, fp
 80048ee:	00cb      	lsls	r3, r1, #3
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f6:	4651      	mov	r1, sl
 80048f8:	00ca      	lsls	r2, r1, #3
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	4642      	mov	r2, r8
 8004902:	189b      	adds	r3, r3, r2
 8004904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004908:	464b      	mov	r3, r9
 800490a:	460a      	mov	r2, r1
 800490c:	eb42 0303 	adc.w	r3, r2, r3
 8004910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004920:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004928:	460b      	mov	r3, r1
 800492a:	18db      	adds	r3, r3, r3
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
 800492e:	4613      	mov	r3, r2
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800493a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800493e:	f7fc f9a3 	bl	8000c88 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <UART_SetConfig+0x2d4>)
 8004948:	fba3 1302 	umull	r1, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	3332      	adds	r3, #50	; 0x32
 800495a:	4a08      	ldr	r2, [pc, #32]	; (800497c <UART_SetConfig+0x2d4>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4422      	add	r2, r4
 800496e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004970:	e105      	b.n	8004b7e <UART_SetConfig+0x4d6>
 8004972:	bf00      	nop
 8004974:	40011000 	.word	0x40011000
 8004978:	40011400 	.word	0x40011400
 800497c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800498a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800498e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004992:	4642      	mov	r2, r8
 8004994:	464b      	mov	r3, r9
 8004996:	1891      	adds	r1, r2, r2
 8004998:	6239      	str	r1, [r7, #32]
 800499a:	415b      	adcs	r3, r3
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049a2:	4641      	mov	r1, r8
 80049a4:	1854      	adds	r4, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb43 0501 	adc.w	r5, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	00eb      	lsls	r3, r5, #3
 80049b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ba:	00e2      	lsls	r2, r4, #3
 80049bc:	4614      	mov	r4, r2
 80049be:	461d      	mov	r5, r3
 80049c0:	4643      	mov	r3, r8
 80049c2:	18e3      	adds	r3, r4, r3
 80049c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049c8:	464b      	mov	r3, r9
 80049ca:	eb45 0303 	adc.w	r3, r5, r3
 80049ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ee:	4629      	mov	r1, r5
 80049f0:	008b      	lsls	r3, r1, #2
 80049f2:	4621      	mov	r1, r4
 80049f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f8:	4621      	mov	r1, r4
 80049fa:	008a      	lsls	r2, r1, #2
 80049fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a00:	f7fc f942 	bl	8000c88 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4b60      	ldr	r3, [pc, #384]	; (8004b8c <UART_SetConfig+0x4e4>)
 8004a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	011c      	lsls	r4, r3, #4
 8004a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a24:	4642      	mov	r2, r8
 8004a26:	464b      	mov	r3, r9
 8004a28:	1891      	adds	r1, r2, r2
 8004a2a:	61b9      	str	r1, [r7, #24]
 8004a2c:	415b      	adcs	r3, r3
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a34:	4641      	mov	r1, r8
 8004a36:	1851      	adds	r1, r2, r1
 8004a38:	6139      	str	r1, [r7, #16]
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	414b      	adcs	r3, r1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	00cb      	lsls	r3, r1, #3
 8004a50:	4651      	mov	r1, sl
 8004a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a56:	4651      	mov	r1, sl
 8004a58:	00ca      	lsls	r2, r1, #3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4642      	mov	r2, r8
 8004a62:	189b      	adds	r3, r3, r2
 8004a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a68:	464b      	mov	r3, r9
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	eb42 0303 	adc.w	r3, r2, r3
 8004a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	008b      	lsls	r3, r1, #2
 8004a90:	4641      	mov	r1, r8
 8004a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a96:	4641      	mov	r1, r8
 8004a98:	008a      	lsls	r2, r1, #2
 8004a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a9e:	f7fc f8f3 	bl	8000c88 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <UART_SetConfig+0x4e4>)
 8004aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	2164      	movs	r1, #100	; 0x64
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	3332      	adds	r3, #50	; 0x32
 8004aba:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <UART_SetConfig+0x4e4>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac6:	441c      	add	r4, r3
 8004ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004acc:	2200      	movs	r2, #0
 8004ace:	673b      	str	r3, [r7, #112]	; 0x70
 8004ad0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ad2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	464b      	mov	r3, r9
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	1851      	adds	r1, r2, r1
 8004aea:	6039      	str	r1, [r7, #0]
 8004aec:	4649      	mov	r1, r9
 8004aee:	414b      	adcs	r3, r1
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004afe:	4659      	mov	r1, fp
 8004b00:	00cb      	lsls	r3, r1, #3
 8004b02:	4651      	mov	r1, sl
 8004b04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b08:	4651      	mov	r1, sl
 8004b0a:	00ca      	lsls	r2, r1, #3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	4642      	mov	r2, r8
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	008b      	lsls	r3, r1, #2
 8004b3e:	4641      	mov	r1, r8
 8004b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b44:	4641      	mov	r1, r8
 8004b46:	008a      	lsls	r2, r1, #2
 8004b48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b4c:	f7fc f89c 	bl	8000c88 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <UART_SetConfig+0x4e4>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2164      	movs	r1, #100	; 0x64
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	; 0x32
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <UART_SetConfig+0x4e4>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4422      	add	r2, r4
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8a:	bf00      	nop
 8004b8c:	51eb851f 	.word	0x51eb851f

08004b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b90:	b084      	sub	sp, #16
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	f107 001c 	add.w	r0, r7, #28
 8004b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d122      	bne.n	8004bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa9c 	bl	8005120 <USB_CoreReset>
 8004be8:	4603      	mov	r3, r0
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e01a      	b.n	8004c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa90 	bl	8005120 <USB_CoreReset>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
 8004c16:	e005      	b.n	8004c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10b      	bne.n	8004c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f043 0206 	orr.w	r2, r3, #6
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c4e:	b004      	add	sp, #16
 8004c50:	4770      	bx	lr

08004c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d115      	bne.n	8004cc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7fc fee0 	bl	8001a68 <HAL_Delay>
      ms++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa28 	bl	8005104 <USB_GetMode>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d01e      	beq.n	8004cf8 <USB_SetCurrentMode+0x84>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b31      	cmp	r3, #49	; 0x31
 8004cbe:	d9f0      	bls.n	8004ca2 <USB_SetCurrentMode+0x2e>
 8004cc0:	e01a      	b.n	8004cf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d115      	bne.n	8004cf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fc fec7 	bl	8001a68 <HAL_Delay>
      ms++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa0f 	bl	8005104 <USB_GetMode>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <USB_SetCurrentMode+0x84>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b31      	cmp	r3, #49	; 0x31
 8004cf0:	d9f0      	bls.n	8004cd4 <USB_SetCurrentMode+0x60>
 8004cf2:	e001      	b.n	8004cf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e005      	b.n	8004d04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b32      	cmp	r3, #50	; 0x32
 8004cfc:	d101      	bne.n	8004d02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e009      	b.n	8004d40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3340      	adds	r3, #64	; 0x40
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0e      	cmp	r3, #14
 8004d44:	d9f2      	bls.n	8004d2c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11c      	bne.n	8004d86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e005      	b.n	8004d92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	4619      	mov	r1, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	461a      	mov	r2, r3
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10c      	bne.n	8004dd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f965 	bl	8005090 <USB_SetDevSpeed>
 8004dc6:	e008      	b.n	8004dda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dc8:	2101      	movs	r1, #1
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f960 	bl	8005090 <USB_SetDevSpeed>
 8004dd0:	e003      	b.n	8004dda <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f95b 	bl	8005090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dda:	2110      	movs	r1, #16
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8f3 	bl	8004fc8 <USB_FlushTxFifo>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f91f 	bl	8005030 <USB_FlushRxFifo>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e043      	b.n	8004eae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d118      	bne.n	8004e70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e013      	b.n	8004e82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e008      	b.n	8004e82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3b7      	bcc.n	8004e26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e043      	b.n	8004f44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed2:	d118      	bne.n	8004f06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e013      	b.n	8004f18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	461a      	mov	r2, r3
 8004efe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e008      	b.n	8004f18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	2300      	movs	r3, #0
 8004f16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3301      	adds	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3b7      	bcc.n	8004ebc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f043 0210 	orr.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <USB_DevInit+0x2b8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fac:	f043 0304 	orr.w	r3, r3, #4
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc0:	b004      	add	sp, #16
 8004fc2:	4770      	bx	lr
 8004fc4:	803c3800 	.word	0x803c3800

08004fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <USB_FlushTxFifo+0x64>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e01b      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	daf2      	bge.n	8004fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	019b      	lsls	r3, r3, #6
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <USB_FlushTxFifo+0x64>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b20      	cmp	r3, #32
 800501c:	d0f0      	beq.n	8005000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	00030d40 	.word	0x00030d40

08005030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <USB_FlushRxFifo+0x5c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e018      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	daf2      	bge.n	800503c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2210      	movs	r2, #16
 800505e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <USB_FlushRxFifo+0x5c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d0f0      	beq.n	8005060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	00030d40 	.word	0x00030d40

08005090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b0:	4313      	orrs	r3, r2
 80050b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050dc:	f023 0303 	bic.w	r3, r3, #3
 80050e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0301 	and.w	r3, r3, #1
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <USB_CoreReset+0x64>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e01b      	b.n	8005176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	daf2      	bge.n	800512c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f043 0201 	orr.w	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3301      	adds	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <USB_CoreReset+0x64>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d0f0      	beq.n	8005156 <USB_CoreReset+0x36>

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	00030d40 	.word	0x00030d40

08005188 <__errno>:
 8005188:	4b01      	ldr	r3, [pc, #4]	; (8005190 <__errno+0x8>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	2000000c 	.word	0x2000000c

08005194 <__libc_init_array>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4d0d      	ldr	r5, [pc, #52]	; (80051cc <__libc_init_array+0x38>)
 8005198:	4c0d      	ldr	r4, [pc, #52]	; (80051d0 <__libc_init_array+0x3c>)
 800519a:	1b64      	subs	r4, r4, r5
 800519c:	10a4      	asrs	r4, r4, #2
 800519e:	2600      	movs	r6, #0
 80051a0:	42a6      	cmp	r6, r4
 80051a2:	d109      	bne.n	80051b8 <__libc_init_array+0x24>
 80051a4:	4d0b      	ldr	r5, [pc, #44]	; (80051d4 <__libc_init_array+0x40>)
 80051a6:	4c0c      	ldr	r4, [pc, #48]	; (80051d8 <__libc_init_array+0x44>)
 80051a8:	f002 fdc2 	bl	8007d30 <_init>
 80051ac:	1b64      	subs	r4, r4, r5
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	2600      	movs	r6, #0
 80051b2:	42a6      	cmp	r6, r4
 80051b4:	d105      	bne.n	80051c2 <__libc_init_array+0x2e>
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051bc:	4798      	blx	r3
 80051be:	3601      	adds	r6, #1
 80051c0:	e7ee      	b.n	80051a0 <__libc_init_array+0xc>
 80051c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c6:	4798      	blx	r3
 80051c8:	3601      	adds	r6, #1
 80051ca:	e7f2      	b.n	80051b2 <__libc_init_array+0x1e>
 80051cc:	080081cc 	.word	0x080081cc
 80051d0:	080081cc 	.word	0x080081cc
 80051d4:	080081cc 	.word	0x080081cc
 80051d8:	080081d0 	.word	0x080081d0

080051dc <memcpy>:
 80051dc:	440a      	add	r2, r1
 80051de:	4291      	cmp	r1, r2
 80051e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051e4:	d100      	bne.n	80051e8 <memcpy+0xc>
 80051e6:	4770      	bx	lr
 80051e8:	b510      	push	{r4, lr}
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f2:	4291      	cmp	r1, r2
 80051f4:	d1f9      	bne.n	80051ea <memcpy+0xe>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <memset>:
 80051f8:	4402      	add	r2, r0
 80051fa:	4603      	mov	r3, r0
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d100      	bne.n	8005202 <memset+0xa>
 8005200:	4770      	bx	lr
 8005202:	f803 1b01 	strb.w	r1, [r3], #1
 8005206:	e7f9      	b.n	80051fc <memset+0x4>

08005208 <__cvt>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	ec55 4b10 	vmov	r4, r5, d0
 8005210:	2d00      	cmp	r5, #0
 8005212:	460e      	mov	r6, r1
 8005214:	4619      	mov	r1, r3
 8005216:	462b      	mov	r3, r5
 8005218:	bfbb      	ittet	lt
 800521a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800521e:	461d      	movlt	r5, r3
 8005220:	2300      	movge	r3, #0
 8005222:	232d      	movlt	r3, #45	; 0x2d
 8005224:	700b      	strb	r3, [r1, #0]
 8005226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800522c:	4691      	mov	r9, r2
 800522e:	f023 0820 	bic.w	r8, r3, #32
 8005232:	bfbc      	itt	lt
 8005234:	4622      	movlt	r2, r4
 8005236:	4614      	movlt	r4, r2
 8005238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800523c:	d005      	beq.n	800524a <__cvt+0x42>
 800523e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005242:	d100      	bne.n	8005246 <__cvt+0x3e>
 8005244:	3601      	adds	r6, #1
 8005246:	2102      	movs	r1, #2
 8005248:	e000      	b.n	800524c <__cvt+0x44>
 800524a:	2103      	movs	r1, #3
 800524c:	ab03      	add	r3, sp, #12
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	ab02      	add	r3, sp, #8
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	ec45 4b10 	vmov	d0, r4, r5
 8005258:	4653      	mov	r3, sl
 800525a:	4632      	mov	r2, r6
 800525c:	f000 fe18 	bl	8005e90 <_dtoa_r>
 8005260:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005264:	4607      	mov	r7, r0
 8005266:	d102      	bne.n	800526e <__cvt+0x66>
 8005268:	f019 0f01 	tst.w	r9, #1
 800526c:	d022      	beq.n	80052b4 <__cvt+0xac>
 800526e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005272:	eb07 0906 	add.w	r9, r7, r6
 8005276:	d110      	bne.n	800529a <__cvt+0x92>
 8005278:	783b      	ldrb	r3, [r7, #0]
 800527a:	2b30      	cmp	r3, #48	; 0x30
 800527c:	d10a      	bne.n	8005294 <__cvt+0x8c>
 800527e:	2200      	movs	r2, #0
 8005280:	2300      	movs	r3, #0
 8005282:	4620      	mov	r0, r4
 8005284:	4629      	mov	r1, r5
 8005286:	f7fb fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800528a:	b918      	cbnz	r0, 8005294 <__cvt+0x8c>
 800528c:	f1c6 0601 	rsb	r6, r6, #1
 8005290:	f8ca 6000 	str.w	r6, [sl]
 8005294:	f8da 3000 	ldr.w	r3, [sl]
 8005298:	4499      	add	r9, r3
 800529a:	2200      	movs	r2, #0
 800529c:	2300      	movs	r3, #0
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fb fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80052a6:	b108      	cbz	r0, 80052ac <__cvt+0xa4>
 80052a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052ac:	2230      	movs	r2, #48	; 0x30
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	454b      	cmp	r3, r9
 80052b2:	d307      	bcc.n	80052c4 <__cvt+0xbc>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b8:	1bdb      	subs	r3, r3, r7
 80052ba:	4638      	mov	r0, r7
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	b004      	add	sp, #16
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	1c59      	adds	r1, r3, #1
 80052c6:	9103      	str	r1, [sp, #12]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e7f0      	b.n	80052ae <__cvt+0xa6>

080052cc <__exponent>:
 80052cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ce:	4603      	mov	r3, r0
 80052d0:	2900      	cmp	r1, #0
 80052d2:	bfb8      	it	lt
 80052d4:	4249      	neglt	r1, r1
 80052d6:	f803 2b02 	strb.w	r2, [r3], #2
 80052da:	bfb4      	ite	lt
 80052dc:	222d      	movlt	r2, #45	; 0x2d
 80052de:	222b      	movge	r2, #43	; 0x2b
 80052e0:	2909      	cmp	r1, #9
 80052e2:	7042      	strb	r2, [r0, #1]
 80052e4:	dd2a      	ble.n	800533c <__exponent+0x70>
 80052e6:	f10d 0407 	add.w	r4, sp, #7
 80052ea:	46a4      	mov	ip, r4
 80052ec:	270a      	movs	r7, #10
 80052ee:	46a6      	mov	lr, r4
 80052f0:	460a      	mov	r2, r1
 80052f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80052f6:	fb07 1516 	mls	r5, r7, r6, r1
 80052fa:	3530      	adds	r5, #48	; 0x30
 80052fc:	2a63      	cmp	r2, #99	; 0x63
 80052fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005302:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005306:	4631      	mov	r1, r6
 8005308:	dcf1      	bgt.n	80052ee <__exponent+0x22>
 800530a:	3130      	adds	r1, #48	; 0x30
 800530c:	f1ae 0502 	sub.w	r5, lr, #2
 8005310:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005314:	1c44      	adds	r4, r0, #1
 8005316:	4629      	mov	r1, r5
 8005318:	4561      	cmp	r1, ip
 800531a:	d30a      	bcc.n	8005332 <__exponent+0x66>
 800531c:	f10d 0209 	add.w	r2, sp, #9
 8005320:	eba2 020e 	sub.w	r2, r2, lr
 8005324:	4565      	cmp	r5, ip
 8005326:	bf88      	it	hi
 8005328:	2200      	movhi	r2, #0
 800532a:	4413      	add	r3, r2
 800532c:	1a18      	subs	r0, r3, r0
 800532e:	b003      	add	sp, #12
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005336:	f804 2f01 	strb.w	r2, [r4, #1]!
 800533a:	e7ed      	b.n	8005318 <__exponent+0x4c>
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	3130      	adds	r1, #48	; 0x30
 8005340:	7083      	strb	r3, [r0, #2]
 8005342:	70c1      	strb	r1, [r0, #3]
 8005344:	1d03      	adds	r3, r0, #4
 8005346:	e7f1      	b.n	800532c <__exponent+0x60>

08005348 <_printf_float>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ed2d 8b02 	vpush	{d8}
 8005350:	b08d      	sub	sp, #52	; 0x34
 8005352:	460c      	mov	r4, r1
 8005354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005358:	4616      	mov	r6, r2
 800535a:	461f      	mov	r7, r3
 800535c:	4605      	mov	r5, r0
 800535e:	f001 fd3d 	bl	8006ddc <_localeconv_r>
 8005362:	f8d0 a000 	ldr.w	sl, [r0]
 8005366:	4650      	mov	r0, sl
 8005368:	f7fa ff52 	bl	8000210 <strlen>
 800536c:	2300      	movs	r3, #0
 800536e:	930a      	str	r3, [sp, #40]	; 0x28
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f8d8 3000 	ldr.w	r3, [r8]
 8005378:	f894 b018 	ldrb.w	fp, [r4, #24]
 800537c:	3307      	adds	r3, #7
 800537e:	f023 0307 	bic.w	r3, r3, #7
 8005382:	f103 0208 	add.w	r2, r3, #8
 8005386:	f8c8 2000 	str.w	r2, [r8]
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005392:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800539a:	9307      	str	r3, [sp, #28]
 800539c:	f8cd 8018 	str.w	r8, [sp, #24]
 80053a0:	ee08 0a10 	vmov	s16, r0
 80053a4:	4b9f      	ldr	r3, [pc, #636]	; (8005624 <_printf_float+0x2dc>)
 80053a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ae:	f7fb fbdd 	bl	8000b6c <__aeabi_dcmpun>
 80053b2:	bb88      	cbnz	r0, 8005418 <_printf_float+0xd0>
 80053b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053b8:	4b9a      	ldr	r3, [pc, #616]	; (8005624 <_printf_float+0x2dc>)
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053be:	f7fb fbb7 	bl	8000b30 <__aeabi_dcmple>
 80053c2:	bb48      	cbnz	r0, 8005418 <_printf_float+0xd0>
 80053c4:	2200      	movs	r2, #0
 80053c6:	2300      	movs	r3, #0
 80053c8:	4640      	mov	r0, r8
 80053ca:	4649      	mov	r1, r9
 80053cc:	f7fb fba6 	bl	8000b1c <__aeabi_dcmplt>
 80053d0:	b110      	cbz	r0, 80053d8 <_printf_float+0x90>
 80053d2:	232d      	movs	r3, #45	; 0x2d
 80053d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d8:	4b93      	ldr	r3, [pc, #588]	; (8005628 <_printf_float+0x2e0>)
 80053da:	4894      	ldr	r0, [pc, #592]	; (800562c <_printf_float+0x2e4>)
 80053dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053e0:	bf94      	ite	ls
 80053e2:	4698      	movls	r8, r3
 80053e4:	4680      	movhi	r8, r0
 80053e6:	2303      	movs	r3, #3
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	9b05      	ldr	r3, [sp, #20]
 80053ec:	f023 0204 	bic.w	r2, r3, #4
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	9700      	str	r7, [sp, #0]
 80053f8:	4633      	mov	r3, r6
 80053fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f9d8 	bl	80057b4 <_printf_common>
 8005404:	3001      	adds	r0, #1
 8005406:	f040 8090 	bne.w	800552a <_printf_float+0x1e2>
 800540a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540e:	b00d      	add	sp, #52	; 0x34
 8005410:	ecbd 8b02 	vpop	{d8}
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	4640      	mov	r0, r8
 800541e:	4649      	mov	r1, r9
 8005420:	f7fb fba4 	bl	8000b6c <__aeabi_dcmpun>
 8005424:	b140      	cbz	r0, 8005438 <_printf_float+0xf0>
 8005426:	464b      	mov	r3, r9
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfbc      	itt	lt
 800542c:	232d      	movlt	r3, #45	; 0x2d
 800542e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005432:	487f      	ldr	r0, [pc, #508]	; (8005630 <_printf_float+0x2e8>)
 8005434:	4b7f      	ldr	r3, [pc, #508]	; (8005634 <_printf_float+0x2ec>)
 8005436:	e7d1      	b.n	80053dc <_printf_float+0x94>
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800543e:	9206      	str	r2, [sp, #24]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	d13f      	bne.n	80054c4 <_printf_float+0x17c>
 8005444:	2306      	movs	r3, #6
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	6861      	ldr	r1, [r4, #4]
 800544c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005450:	2300      	movs	r3, #0
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	ab0a      	add	r3, sp, #40	; 0x28
 8005456:	e9cd b301 	strd	fp, r3, [sp, #4]
 800545a:	ab09      	add	r3, sp, #36	; 0x24
 800545c:	ec49 8b10 	vmov	d0, r8, r9
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6022      	str	r2, [r4, #0]
 8005464:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005468:	4628      	mov	r0, r5
 800546a:	f7ff fecd 	bl	8005208 <__cvt>
 800546e:	9b06      	ldr	r3, [sp, #24]
 8005470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005472:	2b47      	cmp	r3, #71	; 0x47
 8005474:	4680      	mov	r8, r0
 8005476:	d108      	bne.n	800548a <_printf_float+0x142>
 8005478:	1cc8      	adds	r0, r1, #3
 800547a:	db02      	blt.n	8005482 <_printf_float+0x13a>
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	4299      	cmp	r1, r3
 8005480:	dd41      	ble.n	8005506 <_printf_float+0x1be>
 8005482:	f1ab 0b02 	sub.w	fp, fp, #2
 8005486:	fa5f fb8b 	uxtb.w	fp, fp
 800548a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800548e:	d820      	bhi.n	80054d2 <_printf_float+0x18a>
 8005490:	3901      	subs	r1, #1
 8005492:	465a      	mov	r2, fp
 8005494:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005498:	9109      	str	r1, [sp, #36]	; 0x24
 800549a:	f7ff ff17 	bl	80052cc <__exponent>
 800549e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054a0:	1813      	adds	r3, r2, r0
 80054a2:	2a01      	cmp	r2, #1
 80054a4:	4681      	mov	r9, r0
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	dc02      	bgt.n	80054b0 <_printf_float+0x168>
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	07d2      	lsls	r2, r2, #31
 80054ae:	d501      	bpl.n	80054b4 <_printf_float+0x16c>
 80054b0:	3301      	adds	r3, #1
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d09c      	beq.n	80053f6 <_printf_float+0xae>
 80054bc:	232d      	movs	r3, #45	; 0x2d
 80054be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c2:	e798      	b.n	80053f6 <_printf_float+0xae>
 80054c4:	9a06      	ldr	r2, [sp, #24]
 80054c6:	2a47      	cmp	r2, #71	; 0x47
 80054c8:	d1be      	bne.n	8005448 <_printf_float+0x100>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1bc      	bne.n	8005448 <_printf_float+0x100>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7b9      	b.n	8005446 <_printf_float+0xfe>
 80054d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054d6:	d118      	bne.n	800550a <_printf_float+0x1c2>
 80054d8:	2900      	cmp	r1, #0
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	dd0b      	ble.n	80054f6 <_printf_float+0x1ae>
 80054de:	6121      	str	r1, [r4, #16]
 80054e0:	b913      	cbnz	r3, 80054e8 <_printf_float+0x1a0>
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	07d0      	lsls	r0, r2, #31
 80054e6:	d502      	bpl.n	80054ee <_printf_float+0x1a6>
 80054e8:	3301      	adds	r3, #1
 80054ea:	440b      	add	r3, r1
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80054f0:	f04f 0900 	mov.w	r9, #0
 80054f4:	e7de      	b.n	80054b4 <_printf_float+0x16c>
 80054f6:	b913      	cbnz	r3, 80054fe <_printf_float+0x1b6>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	07d2      	lsls	r2, r2, #31
 80054fc:	d501      	bpl.n	8005502 <_printf_float+0x1ba>
 80054fe:	3302      	adds	r3, #2
 8005500:	e7f4      	b.n	80054ec <_printf_float+0x1a4>
 8005502:	2301      	movs	r3, #1
 8005504:	e7f2      	b.n	80054ec <_printf_float+0x1a4>
 8005506:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800550a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550c:	4299      	cmp	r1, r3
 800550e:	db05      	blt.n	800551c <_printf_float+0x1d4>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	6121      	str	r1, [r4, #16]
 8005514:	07d8      	lsls	r0, r3, #31
 8005516:	d5ea      	bpl.n	80054ee <_printf_float+0x1a6>
 8005518:	1c4b      	adds	r3, r1, #1
 800551a:	e7e7      	b.n	80054ec <_printf_float+0x1a4>
 800551c:	2900      	cmp	r1, #0
 800551e:	bfd4      	ite	le
 8005520:	f1c1 0202 	rsble	r2, r1, #2
 8005524:	2201      	movgt	r2, #1
 8005526:	4413      	add	r3, r2
 8005528:	e7e0      	b.n	80054ec <_printf_float+0x1a4>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	055a      	lsls	r2, r3, #21
 800552e:	d407      	bmi.n	8005540 <_printf_float+0x1f8>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	4642      	mov	r2, r8
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	d12c      	bne.n	8005598 <_printf_float+0x250>
 800553e:	e764      	b.n	800540a <_printf_float+0xc2>
 8005540:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005544:	f240 80e0 	bls.w	8005708 <_printf_float+0x3c0>
 8005548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	f7fb fada 	bl	8000b08 <__aeabi_dcmpeq>
 8005554:	2800      	cmp	r0, #0
 8005556:	d034      	beq.n	80055c2 <_printf_float+0x27a>
 8005558:	4a37      	ldr	r2, [pc, #220]	; (8005638 <_printf_float+0x2f0>)
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af51 	beq.w	800540a <_printf_float+0xc2>
 8005568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800556c:	429a      	cmp	r2, r3
 800556e:	db02      	blt.n	8005576 <_printf_float+0x22e>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07d8      	lsls	r0, r3, #31
 8005574:	d510      	bpl.n	8005598 <_printf_float+0x250>
 8005576:	ee18 3a10 	vmov	r3, s16
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af41 	beq.w	800540a <_printf_float+0xc2>
 8005588:	f04f 0800 	mov.w	r8, #0
 800558c:	f104 091a 	add.w	r9, r4, #26
 8005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	4543      	cmp	r3, r8
 8005596:	dc09      	bgt.n	80055ac <_printf_float+0x264>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	f100 8105 	bmi.w	80057aa <_printf_float+0x462>
 80055a0:	68e0      	ldr	r0, [r4, #12]
 80055a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a4:	4298      	cmp	r0, r3
 80055a6:	bfb8      	it	lt
 80055a8:	4618      	movlt	r0, r3
 80055aa:	e730      	b.n	800540e <_printf_float+0xc6>
 80055ac:	2301      	movs	r3, #1
 80055ae:	464a      	mov	r2, r9
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af27 	beq.w	800540a <_printf_float+0xc2>
 80055bc:	f108 0801 	add.w	r8, r8, #1
 80055c0:	e7e6      	b.n	8005590 <_printf_float+0x248>
 80055c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc39      	bgt.n	800563c <_printf_float+0x2f4>
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <_printf_float+0x2f0>)
 80055ca:	2301      	movs	r3, #1
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af19 	beq.w	800540a <_printf_float+0xc2>
 80055d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055dc:	4313      	orrs	r3, r2
 80055de:	d102      	bne.n	80055e6 <_printf_float+0x29e>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07d9      	lsls	r1, r3, #31
 80055e4:	d5d8      	bpl.n	8005598 <_printf_float+0x250>
 80055e6:	ee18 3a10 	vmov	r3, s16
 80055ea:	4652      	mov	r2, sl
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af09 	beq.w	800540a <_printf_float+0xc2>
 80055f8:	f04f 0900 	mov.w	r9, #0
 80055fc:	f104 0a1a 	add.w	sl, r4, #26
 8005600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005602:	425b      	negs	r3, r3
 8005604:	454b      	cmp	r3, r9
 8005606:	dc01      	bgt.n	800560c <_printf_float+0x2c4>
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	e792      	b.n	8005532 <_printf_float+0x1ea>
 800560c:	2301      	movs	r3, #1
 800560e:	4652      	mov	r2, sl
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f aef7 	beq.w	800540a <_printf_float+0xc2>
 800561c:	f109 0901 	add.w	r9, r9, #1
 8005620:	e7ee      	b.n	8005600 <_printf_float+0x2b8>
 8005622:	bf00      	nop
 8005624:	7fefffff 	.word	0x7fefffff
 8005628:	08007df0 	.word	0x08007df0
 800562c:	08007df4 	.word	0x08007df4
 8005630:	08007dfc 	.word	0x08007dfc
 8005634:	08007df8 	.word	0x08007df8
 8005638:	08007e00 	.word	0x08007e00
 800563c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800563e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005640:	429a      	cmp	r2, r3
 8005642:	bfa8      	it	ge
 8005644:	461a      	movge	r2, r3
 8005646:	2a00      	cmp	r2, #0
 8005648:	4691      	mov	r9, r2
 800564a:	dc37      	bgt.n	80056bc <_printf_float+0x374>
 800564c:	f04f 0b00 	mov.w	fp, #0
 8005650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005654:	f104 021a 	add.w	r2, r4, #26
 8005658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	eba3 0309 	sub.w	r3, r3, r9
 8005660:	455b      	cmp	r3, fp
 8005662:	dc33      	bgt.n	80056cc <_printf_float+0x384>
 8005664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	db3b      	blt.n	80056e4 <_printf_float+0x39c>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	07da      	lsls	r2, r3, #31
 8005670:	d438      	bmi.n	80056e4 <_printf_float+0x39c>
 8005672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005674:	9a05      	ldr	r2, [sp, #20]
 8005676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005678:	1a9a      	subs	r2, r3, r2
 800567a:	eba3 0901 	sub.w	r9, r3, r1
 800567e:	4591      	cmp	r9, r2
 8005680:	bfa8      	it	ge
 8005682:	4691      	movge	r9, r2
 8005684:	f1b9 0f00 	cmp.w	r9, #0
 8005688:	dc35      	bgt.n	80056f6 <_printf_float+0x3ae>
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005692:	f104 0a1a 	add.w	sl, r4, #26
 8005696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	eba3 0309 	sub.w	r3, r3, r9
 80056a0:	4543      	cmp	r3, r8
 80056a2:	f77f af79 	ble.w	8005598 <_printf_float+0x250>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4652      	mov	r2, sl
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f aeaa 	beq.w	800540a <_printf_float+0xc2>
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	e7ec      	b.n	8005696 <_printf_float+0x34e>
 80056bc:	4613      	mov	r3, r2
 80056be:	4631      	mov	r1, r6
 80056c0:	4642      	mov	r2, r8
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1c0      	bne.n	800564c <_printf_float+0x304>
 80056ca:	e69e      	b.n	800540a <_printf_float+0xc2>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	9205      	str	r2, [sp, #20]
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f ae97 	beq.w	800540a <_printf_float+0xc2>
 80056dc:	9a05      	ldr	r2, [sp, #20]
 80056de:	f10b 0b01 	add.w	fp, fp, #1
 80056e2:	e7b9      	b.n	8005658 <_printf_float+0x310>
 80056e4:	ee18 3a10 	vmov	r3, s16
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	d1be      	bne.n	8005672 <_printf_float+0x32a>
 80056f4:	e689      	b.n	800540a <_printf_float+0xc2>
 80056f6:	9a05      	ldr	r2, [sp, #20]
 80056f8:	464b      	mov	r3, r9
 80056fa:	4442      	add	r2, r8
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d1c1      	bne.n	800568a <_printf_float+0x342>
 8005706:	e680      	b.n	800540a <_printf_float+0xc2>
 8005708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570a:	2a01      	cmp	r2, #1
 800570c:	dc01      	bgt.n	8005712 <_printf_float+0x3ca>
 800570e:	07db      	lsls	r3, r3, #31
 8005710:	d538      	bpl.n	8005784 <_printf_float+0x43c>
 8005712:	2301      	movs	r3, #1
 8005714:	4642      	mov	r2, r8
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f ae74 	beq.w	800540a <_printf_float+0xc2>
 8005722:	ee18 3a10 	vmov	r3, s16
 8005726:	4652      	mov	r2, sl
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f ae6b 	beq.w	800540a <_printf_float+0xc2>
 8005734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005738:	2200      	movs	r2, #0
 800573a:	2300      	movs	r3, #0
 800573c:	f7fb f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8005740:	b9d8      	cbnz	r0, 800577a <_printf_float+0x432>
 8005742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005744:	f108 0201 	add.w	r2, r8, #1
 8005748:	3b01      	subs	r3, #1
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	d10e      	bne.n	8005772 <_printf_float+0x42a>
 8005754:	e659      	b.n	800540a <_printf_float+0xc2>
 8005756:	2301      	movs	r3, #1
 8005758:	4652      	mov	r2, sl
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f ae52 	beq.w	800540a <_printf_float+0xc2>
 8005766:	f108 0801 	add.w	r8, r8, #1
 800576a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576c:	3b01      	subs	r3, #1
 800576e:	4543      	cmp	r3, r8
 8005770:	dcf1      	bgt.n	8005756 <_printf_float+0x40e>
 8005772:	464b      	mov	r3, r9
 8005774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005778:	e6dc      	b.n	8005534 <_printf_float+0x1ec>
 800577a:	f04f 0800 	mov.w	r8, #0
 800577e:	f104 0a1a 	add.w	sl, r4, #26
 8005782:	e7f2      	b.n	800576a <_printf_float+0x422>
 8005784:	2301      	movs	r3, #1
 8005786:	4642      	mov	r2, r8
 8005788:	e7df      	b.n	800574a <_printf_float+0x402>
 800578a:	2301      	movs	r3, #1
 800578c:	464a      	mov	r2, r9
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae38 	beq.w	800540a <_printf_float+0xc2>
 800579a:	f108 0801 	add.w	r8, r8, #1
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057a2:	1a5b      	subs	r3, r3, r1
 80057a4:	4543      	cmp	r3, r8
 80057a6:	dcf0      	bgt.n	800578a <_printf_float+0x442>
 80057a8:	e6fa      	b.n	80055a0 <_printf_float+0x258>
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	f104 0919 	add.w	r9, r4, #25
 80057b2:	e7f4      	b.n	800579e <_printf_float+0x456>

080057b4 <_printf_common>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	4616      	mov	r6, r2
 80057ba:	4699      	mov	r9, r3
 80057bc:	688a      	ldr	r2, [r1, #8]
 80057be:	690b      	ldr	r3, [r1, #16]
 80057c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bfb8      	it	lt
 80057c8:	4613      	movlt	r3, r2
 80057ca:	6033      	str	r3, [r6, #0]
 80057cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d0:	4607      	mov	r7, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	b10a      	cbz	r2, 80057da <_printf_common+0x26>
 80057d6:	3301      	adds	r3, #1
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	0699      	lsls	r1, r3, #26
 80057de:	bf42      	ittt	mi
 80057e0:	6833      	ldrmi	r3, [r6, #0]
 80057e2:	3302      	addmi	r3, #2
 80057e4:	6033      	strmi	r3, [r6, #0]
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	f015 0506 	ands.w	r5, r5, #6
 80057ec:	d106      	bne.n	80057fc <_printf_common+0x48>
 80057ee:	f104 0a19 	add.w	sl, r4, #25
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	6832      	ldr	r2, [r6, #0]
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	dc26      	bgt.n	800584a <_printf_common+0x96>
 80057fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005800:	1e13      	subs	r3, r2, #0
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	bf18      	it	ne
 8005806:	2301      	movne	r3, #1
 8005808:	0692      	lsls	r2, r2, #26
 800580a:	d42b      	bmi.n	8005864 <_printf_common+0xb0>
 800580c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d01e      	beq.n	8005858 <_printf_common+0xa4>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	68e5      	ldr	r5, [r4, #12]
 800581e:	6832      	ldr	r2, [r6, #0]
 8005820:	f003 0306 	and.w	r3, r3, #6
 8005824:	2b04      	cmp	r3, #4
 8005826:	bf08      	it	eq
 8005828:	1aad      	subeq	r5, r5, r2
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	6922      	ldr	r2, [r4, #16]
 800582e:	bf0c      	ite	eq
 8005830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005834:	2500      	movne	r5, #0
 8005836:	4293      	cmp	r3, r2
 8005838:	bfc4      	itt	gt
 800583a:	1a9b      	subgt	r3, r3, r2
 800583c:	18ed      	addgt	r5, r5, r3
 800583e:	2600      	movs	r6, #0
 8005840:	341a      	adds	r4, #26
 8005842:	42b5      	cmp	r5, r6
 8005844:	d11a      	bne.n	800587c <_printf_common+0xc8>
 8005846:	2000      	movs	r0, #0
 8005848:	e008      	b.n	800585c <_printf_common+0xa8>
 800584a:	2301      	movs	r3, #1
 800584c:	4652      	mov	r2, sl
 800584e:	4649      	mov	r1, r9
 8005850:	4638      	mov	r0, r7
 8005852:	47c0      	blx	r8
 8005854:	3001      	adds	r0, #1
 8005856:	d103      	bne.n	8005860 <_printf_common+0xac>
 8005858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005860:	3501      	adds	r5, #1
 8005862:	e7c6      	b.n	80057f2 <_printf_common+0x3e>
 8005864:	18e1      	adds	r1, r4, r3
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	2030      	movs	r0, #48	; 0x30
 800586a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800586e:	4422      	add	r2, r4
 8005870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005878:	3302      	adds	r3, #2
 800587a:	e7c7      	b.n	800580c <_printf_common+0x58>
 800587c:	2301      	movs	r3, #1
 800587e:	4622      	mov	r2, r4
 8005880:	4649      	mov	r1, r9
 8005882:	4638      	mov	r0, r7
 8005884:	47c0      	blx	r8
 8005886:	3001      	adds	r0, #1
 8005888:	d0e6      	beq.n	8005858 <_printf_common+0xa4>
 800588a:	3601      	adds	r6, #1
 800588c:	e7d9      	b.n	8005842 <_printf_common+0x8e>
	...

08005890 <_printf_i>:
 8005890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	7e0f      	ldrb	r7, [r1, #24]
 8005896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005898:	2f78      	cmp	r7, #120	; 0x78
 800589a:	4691      	mov	r9, r2
 800589c:	4680      	mov	r8, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	469a      	mov	sl, r3
 80058a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058a6:	d807      	bhi.n	80058b8 <_printf_i+0x28>
 80058a8:	2f62      	cmp	r7, #98	; 0x62
 80058aa:	d80a      	bhi.n	80058c2 <_printf_i+0x32>
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	f000 80d8 	beq.w	8005a62 <_printf_i+0x1d2>
 80058b2:	2f58      	cmp	r7, #88	; 0x58
 80058b4:	f000 80a3 	beq.w	80059fe <_printf_i+0x16e>
 80058b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058c0:	e03a      	b.n	8005938 <_printf_i+0xa8>
 80058c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058c6:	2b15      	cmp	r3, #21
 80058c8:	d8f6      	bhi.n	80058b8 <_printf_i+0x28>
 80058ca:	a101      	add	r1, pc, #4	; (adr r1, 80058d0 <_printf_i+0x40>)
 80058cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d0:	08005929 	.word	0x08005929
 80058d4:	0800593d 	.word	0x0800593d
 80058d8:	080058b9 	.word	0x080058b9
 80058dc:	080058b9 	.word	0x080058b9
 80058e0:	080058b9 	.word	0x080058b9
 80058e4:	080058b9 	.word	0x080058b9
 80058e8:	0800593d 	.word	0x0800593d
 80058ec:	080058b9 	.word	0x080058b9
 80058f0:	080058b9 	.word	0x080058b9
 80058f4:	080058b9 	.word	0x080058b9
 80058f8:	080058b9 	.word	0x080058b9
 80058fc:	08005a49 	.word	0x08005a49
 8005900:	0800596d 	.word	0x0800596d
 8005904:	08005a2b 	.word	0x08005a2b
 8005908:	080058b9 	.word	0x080058b9
 800590c:	080058b9 	.word	0x080058b9
 8005910:	08005a6b 	.word	0x08005a6b
 8005914:	080058b9 	.word	0x080058b9
 8005918:	0800596d 	.word	0x0800596d
 800591c:	080058b9 	.word	0x080058b9
 8005920:	080058b9 	.word	0x080058b9
 8005924:	08005a33 	.word	0x08005a33
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005938:	2301      	movs	r3, #1
 800593a:	e0a3      	b.n	8005a84 <_printf_i+0x1f4>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	6829      	ldr	r1, [r5, #0]
 8005940:	0606      	lsls	r6, r0, #24
 8005942:	f101 0304 	add.w	r3, r1, #4
 8005946:	d50a      	bpl.n	800595e <_printf_i+0xce>
 8005948:	680e      	ldr	r6, [r1, #0]
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	2e00      	cmp	r6, #0
 800594e:	da03      	bge.n	8005958 <_printf_i+0xc8>
 8005950:	232d      	movs	r3, #45	; 0x2d
 8005952:	4276      	negs	r6, r6
 8005954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005958:	485e      	ldr	r0, [pc, #376]	; (8005ad4 <_printf_i+0x244>)
 800595a:	230a      	movs	r3, #10
 800595c:	e019      	b.n	8005992 <_printf_i+0x102>
 800595e:	680e      	ldr	r6, [r1, #0]
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005966:	bf18      	it	ne
 8005968:	b236      	sxthne	r6, r6
 800596a:	e7ef      	b.n	800594c <_printf_i+0xbc>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	6029      	str	r1, [r5, #0]
 8005974:	0601      	lsls	r1, r0, #24
 8005976:	d501      	bpl.n	800597c <_printf_i+0xec>
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0xf2>
 800597c:	0646      	lsls	r6, r0, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0xe8>
 8005980:	881e      	ldrh	r6, [r3, #0]
 8005982:	4854      	ldr	r0, [pc, #336]	; (8005ad4 <_printf_i+0x244>)
 8005984:	2f6f      	cmp	r7, #111	; 0x6f
 8005986:	bf0c      	ite	eq
 8005988:	2308      	moveq	r3, #8
 800598a:	230a      	movne	r3, #10
 800598c:	2100      	movs	r1, #0
 800598e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	2d00      	cmp	r5, #0
 8005998:	bfa2      	ittt	ge
 800599a:	6821      	ldrge	r1, [r4, #0]
 800599c:	f021 0104 	bicge.w	r1, r1, #4
 80059a0:	6021      	strge	r1, [r4, #0]
 80059a2:	b90e      	cbnz	r6, 80059a8 <_printf_i+0x118>
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d04d      	beq.n	8005a44 <_printf_i+0x1b4>
 80059a8:	4615      	mov	r5, r2
 80059aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ae:	fb03 6711 	mls	r7, r3, r1, r6
 80059b2:	5dc7      	ldrb	r7, [r0, r7]
 80059b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b8:	4637      	mov	r7, r6
 80059ba:	42bb      	cmp	r3, r7
 80059bc:	460e      	mov	r6, r1
 80059be:	d9f4      	bls.n	80059aa <_printf_i+0x11a>
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d10b      	bne.n	80059dc <_printf_i+0x14c>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07de      	lsls	r6, r3, #31
 80059c8:	d508      	bpl.n	80059dc <_printf_i+0x14c>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bfde      	ittt	le
 80059d2:	2330      	movle	r3, #48	; 0x30
 80059d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059dc:	1b52      	subs	r2, r2, r5
 80059de:	6122      	str	r2, [r4, #16]
 80059e0:	f8cd a000 	str.w	sl, [sp]
 80059e4:	464b      	mov	r3, r9
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4640      	mov	r0, r8
 80059ec:	f7ff fee2 	bl	80057b4 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14c      	bne.n	8005a8e <_printf_i+0x1fe>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	4835      	ldr	r0, [pc, #212]	; (8005ad4 <_printf_i+0x244>)
 8005a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a04:	6829      	ldr	r1, [r5, #0]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a0c:	6029      	str	r1, [r5, #0]
 8005a0e:	061d      	lsls	r5, r3, #24
 8005a10:	d514      	bpl.n	8005a3c <_printf_i+0x1ac>
 8005a12:	07df      	lsls	r7, r3, #31
 8005a14:	bf44      	itt	mi
 8005a16:	f043 0320 	orrmi.w	r3, r3, #32
 8005a1a:	6023      	strmi	r3, [r4, #0]
 8005a1c:	b91e      	cbnz	r6, 8005a26 <_printf_i+0x196>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f023 0320 	bic.w	r3, r3, #32
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	2310      	movs	r3, #16
 8005a28:	e7b0      	b.n	800598c <_printf_i+0xfc>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2378      	movs	r3, #120	; 0x78
 8005a34:	4828      	ldr	r0, [pc, #160]	; (8005ad8 <_printf_i+0x248>)
 8005a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a3a:	e7e3      	b.n	8005a04 <_printf_i+0x174>
 8005a3c:	0659      	lsls	r1, r3, #25
 8005a3e:	bf48      	it	mi
 8005a40:	b2b6      	uxthmi	r6, r6
 8005a42:	e7e6      	b.n	8005a12 <_printf_i+0x182>
 8005a44:	4615      	mov	r5, r2
 8005a46:	e7bb      	b.n	80059c0 <_printf_i+0x130>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	6826      	ldr	r6, [r4, #0]
 8005a4c:	6961      	ldr	r1, [r4, #20]
 8005a4e:	1d18      	adds	r0, r3, #4
 8005a50:	6028      	str	r0, [r5, #0]
 8005a52:	0635      	lsls	r5, r6, #24
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0x1cc>
 8005a58:	6019      	str	r1, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0x1d2>
 8005a5c:	0670      	lsls	r0, r6, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0x1c8>
 8005a60:	8019      	strh	r1, [r3, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	4615      	mov	r5, r2
 8005a68:	e7ba      	b.n	80059e0 <_printf_i+0x150>
 8005a6a:	682b      	ldr	r3, [r5, #0]
 8005a6c:	1d1a      	adds	r2, r3, #4
 8005a6e:	602a      	str	r2, [r5, #0]
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	2100      	movs	r1, #0
 8005a76:	4628      	mov	r0, r5
 8005a78:	f7fa fbd2 	bl	8000220 <memchr>
 8005a7c:	b108      	cbz	r0, 8005a82 <_printf_i+0x1f2>
 8005a7e:	1b40      	subs	r0, r0, r5
 8005a80:	6060      	str	r0, [r4, #4]
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	2300      	movs	r3, #0
 8005a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8c:	e7a8      	b.n	80059e0 <_printf_i+0x150>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4649      	mov	r1, r9
 8005a94:	4640      	mov	r0, r8
 8005a96:	47d0      	blx	sl
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d0ab      	beq.n	80059f4 <_printf_i+0x164>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	079b      	lsls	r3, r3, #30
 8005aa0:	d413      	bmi.n	8005aca <_printf_i+0x23a>
 8005aa2:	68e0      	ldr	r0, [r4, #12]
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	bfb8      	it	lt
 8005aaa:	4618      	movlt	r0, r3
 8005aac:	e7a4      	b.n	80059f8 <_printf_i+0x168>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	47d0      	blx	sl
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d09b      	beq.n	80059f4 <_printf_i+0x164>
 8005abc:	3501      	adds	r5, #1
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	9903      	ldr	r1, [sp, #12]
 8005ac2:	1a5b      	subs	r3, r3, r1
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dcf2      	bgt.n	8005aae <_printf_i+0x21e>
 8005ac8:	e7eb      	b.n	8005aa2 <_printf_i+0x212>
 8005aca:	2500      	movs	r5, #0
 8005acc:	f104 0619 	add.w	r6, r4, #25
 8005ad0:	e7f5      	b.n	8005abe <_printf_i+0x22e>
 8005ad2:	bf00      	nop
 8005ad4:	08007e02 	.word	0x08007e02
 8005ad8:	08007e13 	.word	0x08007e13

08005adc <iprintf>:
 8005adc:	b40f      	push	{r0, r1, r2, r3}
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <iprintf+0x2c>)
 8005ae0:	b513      	push	{r0, r1, r4, lr}
 8005ae2:	681c      	ldr	r4, [r3, #0]
 8005ae4:	b124      	cbz	r4, 8005af0 <iprintf+0x14>
 8005ae6:	69a3      	ldr	r3, [r4, #24]
 8005ae8:	b913      	cbnz	r3, 8005af0 <iprintf+0x14>
 8005aea:	4620      	mov	r0, r4
 8005aec:	f001 f8d8 	bl	8006ca0 <__sinit>
 8005af0:	ab05      	add	r3, sp, #20
 8005af2:	9a04      	ldr	r2, [sp, #16]
 8005af4:	68a1      	ldr	r1, [r4, #8]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	4620      	mov	r0, r4
 8005afa:	f001 fe87 	bl	800780c <_vfiprintf_r>
 8005afe:	b002      	add	sp, #8
 8005b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr
 8005b08:	2000000c 	.word	0x2000000c

08005b0c <_puts_r>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	460e      	mov	r6, r1
 8005b10:	4605      	mov	r5, r0
 8005b12:	b118      	cbz	r0, 8005b1c <_puts_r+0x10>
 8005b14:	6983      	ldr	r3, [r0, #24]
 8005b16:	b90b      	cbnz	r3, 8005b1c <_puts_r+0x10>
 8005b18:	f001 f8c2 	bl	8006ca0 <__sinit>
 8005b1c:	69ab      	ldr	r3, [r5, #24]
 8005b1e:	68ac      	ldr	r4, [r5, #8]
 8005b20:	b913      	cbnz	r3, 8005b28 <_puts_r+0x1c>
 8005b22:	4628      	mov	r0, r5
 8005b24:	f001 f8bc 	bl	8006ca0 <__sinit>
 8005b28:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <_puts_r+0xd0>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	d120      	bne.n	8005b70 <_puts_r+0x64>
 8005b2e:	686c      	ldr	r4, [r5, #4]
 8005b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_puts_r+0x36>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_puts_r+0x36>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b3e:	f001 f952 	bl	8006de6 <__retarget_lock_acquire_recursive>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d51d      	bpl.n	8005b84 <_puts_r+0x78>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b1db      	cbz	r3, 8005b84 <_puts_r+0x78>
 8005b4c:	3e01      	subs	r6, #1
 8005b4e:	68a3      	ldr	r3, [r4, #8]
 8005b50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	bb39      	cbnz	r1, 8005baa <_puts_r+0x9e>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da38      	bge.n	8005bd0 <_puts_r+0xc4>
 8005b5e:	4622      	mov	r2, r4
 8005b60:	210a      	movs	r1, #10
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f848 	bl	8005bf8 <__swbuf_r>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d011      	beq.n	8005b90 <_puts_r+0x84>
 8005b6c:	250a      	movs	r5, #10
 8005b6e:	e011      	b.n	8005b94 <_puts_r+0x88>
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <_puts_r+0xd4>)
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d101      	bne.n	8005b7a <_puts_r+0x6e>
 8005b76:	68ac      	ldr	r4, [r5, #8]
 8005b78:	e7da      	b.n	8005b30 <_puts_r+0x24>
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <_puts_r+0xd8>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	bf08      	it	eq
 8005b80:	68ec      	ldreq	r4, [r5, #12]
 8005b82:	e7d5      	b.n	8005b30 <_puts_r+0x24>
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 f888 	bl	8005c9c <__swsetup_r>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d0dd      	beq.n	8005b4c <_puts_r+0x40>
 8005b90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b96:	07da      	lsls	r2, r3, #31
 8005b98:	d405      	bmi.n	8005ba6 <_puts_r+0x9a>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	059b      	lsls	r3, r3, #22
 8005b9e:	d402      	bmi.n	8005ba6 <_puts_r+0x9a>
 8005ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba2:	f001 f921 	bl	8006de8 <__retarget_lock_release_recursive>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da04      	bge.n	8005bb8 <_puts_r+0xac>
 8005bae:	69a2      	ldr	r2, [r4, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	dc06      	bgt.n	8005bc2 <_puts_r+0xb6>
 8005bb4:	290a      	cmp	r1, #10
 8005bb6:	d004      	beq.n	8005bc2 <_puts_r+0xb6>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	7019      	strb	r1, [r3, #0]
 8005bc0:	e7c5      	b.n	8005b4e <_puts_r+0x42>
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f817 	bl	8005bf8 <__swbuf_r>
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d1bf      	bne.n	8005b4e <_puts_r+0x42>
 8005bce:	e7df      	b.n	8005b90 <_puts_r+0x84>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	250a      	movs	r5, #10
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	701d      	strb	r5, [r3, #0]
 8005bda:	e7db      	b.n	8005b94 <_puts_r+0x88>
 8005bdc:	08007ed4 	.word	0x08007ed4
 8005be0:	08007ef4 	.word	0x08007ef4
 8005be4:	08007eb4 	.word	0x08007eb4

08005be8 <puts>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <puts+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f7ff bf8d 	b.w	8005b0c <_puts_r>
 8005bf2:	bf00      	nop
 8005bf4:	2000000c 	.word	0x2000000c

08005bf8 <__swbuf_r>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	460e      	mov	r6, r1
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	4605      	mov	r5, r0
 8005c00:	b118      	cbz	r0, 8005c0a <__swbuf_r+0x12>
 8005c02:	6983      	ldr	r3, [r0, #24]
 8005c04:	b90b      	cbnz	r3, 8005c0a <__swbuf_r+0x12>
 8005c06:	f001 f84b 	bl	8006ca0 <__sinit>
 8005c0a:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <__swbuf_r+0x98>)
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	d12b      	bne.n	8005c68 <__swbuf_r+0x70>
 8005c10:	686c      	ldr	r4, [r5, #4]
 8005c12:	69a3      	ldr	r3, [r4, #24]
 8005c14:	60a3      	str	r3, [r4, #8]
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	071a      	lsls	r2, r3, #28
 8005c1a:	d52f      	bpl.n	8005c7c <__swbuf_r+0x84>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	b36b      	cbz	r3, 8005c7c <__swbuf_r+0x84>
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	1ac0      	subs	r0, r0, r3
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	b2f6      	uxtb	r6, r6
 8005c2a:	4283      	cmp	r3, r0
 8005c2c:	4637      	mov	r7, r6
 8005c2e:	dc04      	bgt.n	8005c3a <__swbuf_r+0x42>
 8005c30:	4621      	mov	r1, r4
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 ffa0 	bl	8006b78 <_fflush_r>
 8005c38:	bb30      	cbnz	r0, 8005c88 <__swbuf_r+0x90>
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	701e      	strb	r6, [r3, #0]
 8005c48:	6963      	ldr	r3, [r4, #20]
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	4283      	cmp	r3, r0
 8005c4e:	d004      	beq.n	8005c5a <__swbuf_r+0x62>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	07db      	lsls	r3, r3, #31
 8005c54:	d506      	bpl.n	8005c64 <__swbuf_r+0x6c>
 8005c56:	2e0a      	cmp	r6, #10
 8005c58:	d104      	bne.n	8005c64 <__swbuf_r+0x6c>
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 ff8b 	bl	8006b78 <_fflush_r>
 8005c62:	b988      	cbnz	r0, 8005c88 <__swbuf_r+0x90>
 8005c64:	4638      	mov	r0, r7
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <__swbuf_r+0x9c>)
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d101      	bne.n	8005c72 <__swbuf_r+0x7a>
 8005c6e:	68ac      	ldr	r4, [r5, #8]
 8005c70:	e7cf      	b.n	8005c12 <__swbuf_r+0x1a>
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <__swbuf_r+0xa0>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	bf08      	it	eq
 8005c78:	68ec      	ldreq	r4, [r5, #12]
 8005c7a:	e7ca      	b.n	8005c12 <__swbuf_r+0x1a>
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 f80c 	bl	8005c9c <__swsetup_r>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d0cb      	beq.n	8005c20 <__swbuf_r+0x28>
 8005c88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c8c:	e7ea      	b.n	8005c64 <__swbuf_r+0x6c>
 8005c8e:	bf00      	nop
 8005c90:	08007ed4 	.word	0x08007ed4
 8005c94:	08007ef4 	.word	0x08007ef4
 8005c98:	08007eb4 	.word	0x08007eb4

08005c9c <__swsetup_r>:
 8005c9c:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <__swsetup_r+0xcc>)
 8005c9e:	b570      	push	{r4, r5, r6, lr}
 8005ca0:	681d      	ldr	r5, [r3, #0]
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	b125      	cbz	r5, 8005cb2 <__swsetup_r+0x16>
 8005ca8:	69ab      	ldr	r3, [r5, #24]
 8005caa:	b913      	cbnz	r3, 8005cb2 <__swsetup_r+0x16>
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fff7 	bl	8006ca0 <__sinit>
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <__swsetup_r+0xd0>)
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d10f      	bne.n	8005cd8 <__swsetup_r+0x3c>
 8005cb8:	686c      	ldr	r4, [r5, #4]
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc0:	0719      	lsls	r1, r3, #28
 8005cc2:	d42c      	bmi.n	8005d1e <__swsetup_r+0x82>
 8005cc4:	06dd      	lsls	r5, r3, #27
 8005cc6:	d411      	bmi.n	8005cec <__swsetup_r+0x50>
 8005cc8:	2309      	movs	r3, #9
 8005cca:	6033      	str	r3, [r6, #0]
 8005ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd6:	e03e      	b.n	8005d56 <__swsetup_r+0xba>
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <__swsetup_r+0xd4>)
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	d101      	bne.n	8005ce2 <__swsetup_r+0x46>
 8005cde:	68ac      	ldr	r4, [r5, #8]
 8005ce0:	e7eb      	b.n	8005cba <__swsetup_r+0x1e>
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <__swsetup_r+0xd8>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	bf08      	it	eq
 8005ce8:	68ec      	ldreq	r4, [r5, #12]
 8005cea:	e7e6      	b.n	8005cba <__swsetup_r+0x1e>
 8005cec:	0758      	lsls	r0, r3, #29
 8005cee:	d512      	bpl.n	8005d16 <__swsetup_r+0x7a>
 8005cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf2:	b141      	cbz	r1, 8005d06 <__swsetup_r+0x6a>
 8005cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	d002      	beq.n	8005d02 <__swsetup_r+0x66>
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f001 fc7b 	bl	80075f8 <_free_r>
 8005d02:	2300      	movs	r3, #0
 8005d04:	6363      	str	r3, [r4, #52]	; 0x34
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f043 0308 	orr.w	r3, r3, #8
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	b94b      	cbnz	r3, 8005d36 <__swsetup_r+0x9a>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d2c:	d003      	beq.n	8005d36 <__swsetup_r+0x9a>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4630      	mov	r0, r6
 8005d32:	f001 f87f 	bl	8006e34 <__smakebuf_r>
 8005d36:	89a0      	ldrh	r0, [r4, #12]
 8005d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d3c:	f010 0301 	ands.w	r3, r0, #1
 8005d40:	d00a      	beq.n	8005d58 <__swsetup_r+0xbc>
 8005d42:	2300      	movs	r3, #0
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	6963      	ldr	r3, [r4, #20]
 8005d48:	425b      	negs	r3, r3
 8005d4a:	61a3      	str	r3, [r4, #24]
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	b943      	cbnz	r3, 8005d62 <__swsetup_r+0xc6>
 8005d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d54:	d1ba      	bne.n	8005ccc <__swsetup_r+0x30>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	0781      	lsls	r1, r0, #30
 8005d5a:	bf58      	it	pl
 8005d5c:	6963      	ldrpl	r3, [r4, #20]
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	e7f4      	b.n	8005d4c <__swsetup_r+0xb0>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e7f7      	b.n	8005d56 <__swsetup_r+0xba>
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c
 8005d6c:	08007ed4 	.word	0x08007ed4
 8005d70:	08007ef4 	.word	0x08007ef4
 8005d74:	08007eb4 	.word	0x08007eb4

08005d78 <quorem>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	6903      	ldr	r3, [r0, #16]
 8005d7e:	690c      	ldr	r4, [r1, #16]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	4607      	mov	r7, r0
 8005d84:	f2c0 8081 	blt.w	8005e8a <quorem+0x112>
 8005d88:	3c01      	subs	r4, #1
 8005d8a:	f101 0814 	add.w	r8, r1, #20
 8005d8e:	f100 0514 	add.w	r5, r0, #20
 8005d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da0:	3301      	adds	r3, #1
 8005da2:	429a      	cmp	r2, r3
 8005da4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005da8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dac:	fbb2 f6f3 	udiv	r6, r2, r3
 8005db0:	d331      	bcc.n	8005e16 <quorem+0x9e>
 8005db2:	f04f 0e00 	mov.w	lr, #0
 8005db6:	4640      	mov	r0, r8
 8005db8:	46ac      	mov	ip, r5
 8005dba:	46f2      	mov	sl, lr
 8005dbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dc0:	b293      	uxth	r3, r2
 8005dc2:	fb06 e303 	mla	r3, r6, r3, lr
 8005dc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd0:	f8dc a000 	ldr.w	sl, [ip]
 8005dd4:	0c12      	lsrs	r2, r2, #16
 8005dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dda:	fb06 e202 	mla	r2, r6, r2, lr
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005de6:	b292      	uxth	r2, r2
 8005de8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005df4:	4581      	cmp	r9, r0
 8005df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dfa:	f84c 3b04 	str.w	r3, [ip], #4
 8005dfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e02:	d2db      	bcs.n	8005dbc <quorem+0x44>
 8005e04:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e08:	b92b      	cbnz	r3, 8005e16 <quorem+0x9e>
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	d32e      	bcc.n	8005e72 <quorem+0xfa>
 8005e14:	613c      	str	r4, [r7, #16]
 8005e16:	4638      	mov	r0, r7
 8005e18:	f001 fad6 	bl	80073c8 <__mcmp>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	db24      	blt.n	8005e6a <quorem+0xf2>
 8005e20:	3601      	adds	r6, #1
 8005e22:	4628      	mov	r0, r5
 8005e24:	f04f 0c00 	mov.w	ip, #0
 8005e28:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e2c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e30:	b293      	uxth	r3, r2
 8005e32:	ebac 0303 	sub.w	r3, ip, r3
 8005e36:	0c12      	lsrs	r2, r2, #16
 8005e38:	fa13 f38e 	uxtah	r3, r3, lr
 8005e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4a:	45c1      	cmp	r9, r8
 8005e4c:	f840 3b04 	str.w	r3, [r0], #4
 8005e50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e54:	d2e8      	bcs.n	8005e28 <quorem+0xb0>
 8005e56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e5e:	b922      	cbnz	r2, 8005e6a <quorem+0xf2>
 8005e60:	3b04      	subs	r3, #4
 8005e62:	429d      	cmp	r5, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	d30a      	bcc.n	8005e7e <quorem+0x106>
 8005e68:	613c      	str	r4, [r7, #16]
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	b003      	add	sp, #12
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d1cc      	bne.n	8005e14 <quorem+0x9c>
 8005e7a:	3c01      	subs	r4, #1
 8005e7c:	e7c7      	b.n	8005e0e <quorem+0x96>
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d1f0      	bne.n	8005e68 <quorem+0xf0>
 8005e86:	3c01      	subs	r4, #1
 8005e88:	e7eb      	b.n	8005e62 <quorem+0xea>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e7ee      	b.n	8005e6c <quorem+0xf4>
	...

08005e90 <_dtoa_r>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	ed2d 8b04 	vpush	{d8-d9}
 8005e98:	ec57 6b10 	vmov	r6, r7, d0
 8005e9c:	b093      	sub	sp, #76	; 0x4c
 8005e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ea4:	9106      	str	r1, [sp, #24]
 8005ea6:	ee10 aa10 	vmov	sl, s0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	9209      	str	r2, [sp, #36]	; 0x24
 8005eae:	930c      	str	r3, [sp, #48]	; 0x30
 8005eb0:	46bb      	mov	fp, r7
 8005eb2:	b975      	cbnz	r5, 8005ed2 <_dtoa_r+0x42>
 8005eb4:	2010      	movs	r0, #16
 8005eb6:	f000 fffd 	bl	8006eb4 <malloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6260      	str	r0, [r4, #36]	; 0x24
 8005ebe:	b920      	cbnz	r0, 8005eca <_dtoa_r+0x3a>
 8005ec0:	4ba7      	ldr	r3, [pc, #668]	; (8006160 <_dtoa_r+0x2d0>)
 8005ec2:	21ea      	movs	r1, #234	; 0xea
 8005ec4:	48a7      	ldr	r0, [pc, #668]	; (8006164 <_dtoa_r+0x2d4>)
 8005ec6:	f001 fe37 	bl	8007b38 <__assert_func>
 8005eca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ece:	6005      	str	r5, [r0, #0]
 8005ed0:	60c5      	str	r5, [r0, #12]
 8005ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	b151      	cbz	r1, 8005eee <_dtoa_r+0x5e>
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	604a      	str	r2, [r1, #4]
 8005edc:	2301      	movs	r3, #1
 8005ede:	4093      	lsls	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f001 f82e 	bl	8006f44 <_Bfree>
 8005ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	1e3b      	subs	r3, r7, #0
 8005ef0:	bfaa      	itet	ge
 8005ef2:	2300      	movge	r3, #0
 8005ef4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ef8:	f8c8 3000 	strge.w	r3, [r8]
 8005efc:	4b9a      	ldr	r3, [pc, #616]	; (8006168 <_dtoa_r+0x2d8>)
 8005efe:	bfbc      	itt	lt
 8005f00:	2201      	movlt	r2, #1
 8005f02:	f8c8 2000 	strlt.w	r2, [r8]
 8005f06:	ea33 030b 	bics.w	r3, r3, fp
 8005f0a:	d11b      	bne.n	8005f44 <_dtoa_r+0xb4>
 8005f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f18:	4333      	orrs	r3, r6
 8005f1a:	f000 8592 	beq.w	8006a42 <_dtoa_r+0xbb2>
 8005f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f20:	b963      	cbnz	r3, 8005f3c <_dtoa_r+0xac>
 8005f22:	4b92      	ldr	r3, [pc, #584]	; (800616c <_dtoa_r+0x2dc>)
 8005f24:	e022      	b.n	8005f6c <_dtoa_r+0xdc>
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <_dtoa_r+0x2e0>)
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	9801      	ldr	r0, [sp, #4]
 8005f32:	b013      	add	sp, #76	; 0x4c
 8005f34:	ecbd 8b04 	vpop	{d8-d9}
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4b8b      	ldr	r3, [pc, #556]	; (800616c <_dtoa_r+0x2dc>)
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	3303      	adds	r3, #3
 8005f42:	e7f3      	b.n	8005f2c <_dtoa_r+0x9c>
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	4650      	mov	r0, sl
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	f7fa fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8005f50:	ec4b ab19 	vmov	d9, sl, fp
 8005f54:	4680      	mov	r8, r0
 8005f56:	b158      	cbz	r0, 8005f70 <_dtoa_r+0xe0>
 8005f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 856b 	beq.w	8006a3c <_dtoa_r+0xbac>
 8005f66:	4883      	ldr	r0, [pc, #524]	; (8006174 <_dtoa_r+0x2e4>)
 8005f68:	6018      	str	r0, [r3, #0]
 8005f6a:	1e43      	subs	r3, r0, #1
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	e7df      	b.n	8005f30 <_dtoa_r+0xa0>
 8005f70:	ec4b ab10 	vmov	d0, sl, fp
 8005f74:	aa10      	add	r2, sp, #64	; 0x40
 8005f76:	a911      	add	r1, sp, #68	; 0x44
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f001 facb 	bl	8007514 <__d2b>
 8005f7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f82:	ee08 0a10 	vmov	s16, r0
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	f000 8084 	beq.w	8006094 <_dtoa_r+0x204>
 8005f8c:	ee19 3a90 	vmov	r3, s19
 8005f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f98:	4656      	mov	r6, sl
 8005f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fa6:	4b74      	ldr	r3, [pc, #464]	; (8006178 <_dtoa_r+0x2e8>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4630      	mov	r0, r6
 8005fac:	4639      	mov	r1, r7
 8005fae:	f7fa f98b 	bl	80002c8 <__aeabi_dsub>
 8005fb2:	a365      	add	r3, pc, #404	; (adr r3, 8006148 <_dtoa_r+0x2b8>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa fb3e 	bl	8000638 <__aeabi_dmul>
 8005fbc:	a364      	add	r3, pc, #400	; (adr r3, 8006150 <_dtoa_r+0x2c0>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f7fa f983 	bl	80002cc <__adddf3>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	4628      	mov	r0, r5
 8005fca:	460f      	mov	r7, r1
 8005fcc:	f7fa faca 	bl	8000564 <__aeabi_i2d>
 8005fd0:	a361      	add	r3, pc, #388	; (adr r3, 8006158 <_dtoa_r+0x2c8>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa fb2f 	bl	8000638 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f973 	bl	80002cc <__adddf3>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f7fa fdd5 	bl	8000b98 <__aeabi_d2iz>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	9000      	str	r0, [sp, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa fd90 	bl	8000b1c <__aeabi_dcmplt>
 8005ffc:	b150      	cbz	r0, 8006014 <_dtoa_r+0x184>
 8005ffe:	9800      	ldr	r0, [sp, #0]
 8006000:	f7fa fab0 	bl	8000564 <__aeabi_i2d>
 8006004:	4632      	mov	r2, r6
 8006006:	463b      	mov	r3, r7
 8006008:	f7fa fd7e 	bl	8000b08 <__aeabi_dcmpeq>
 800600c:	b910      	cbnz	r0, 8006014 <_dtoa_r+0x184>
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	3b01      	subs	r3, #1
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	2b16      	cmp	r3, #22
 8006018:	d85a      	bhi.n	80060d0 <_dtoa_r+0x240>
 800601a:	9a00      	ldr	r2, [sp, #0]
 800601c:	4b57      	ldr	r3, [pc, #348]	; (800617c <_dtoa_r+0x2ec>)
 800601e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	ec51 0b19 	vmov	r0, r1, d9
 800602a:	f7fa fd77 	bl	8000b1c <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	d050      	beq.n	80060d4 <_dtoa_r+0x244>
 8006032:	9b00      	ldr	r3, [sp, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	930b      	str	r3, [sp, #44]	; 0x2c
 800603c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800603e:	1b5d      	subs	r5, r3, r5
 8006040:	1e6b      	subs	r3, r5, #1
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	bf45      	ittet	mi
 8006046:	f1c5 0301 	rsbmi	r3, r5, #1
 800604a:	9304      	strmi	r3, [sp, #16]
 800604c:	2300      	movpl	r3, #0
 800604e:	2300      	movmi	r3, #0
 8006050:	bf4c      	ite	mi
 8006052:	9305      	strmi	r3, [sp, #20]
 8006054:	9304      	strpl	r3, [sp, #16]
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db3d      	blt.n	80060d8 <_dtoa_r+0x248>
 800605c:	9b05      	ldr	r3, [sp, #20]
 800605e:	9a00      	ldr	r2, [sp, #0]
 8006060:	920a      	str	r2, [sp, #40]	; 0x28
 8006062:	4413      	add	r3, r2
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	9307      	str	r3, [sp, #28]
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	2b09      	cmp	r3, #9
 800606e:	f200 8089 	bhi.w	8006184 <_dtoa_r+0x2f4>
 8006072:	2b05      	cmp	r3, #5
 8006074:	bfc4      	itt	gt
 8006076:	3b04      	subgt	r3, #4
 8006078:	9306      	strgt	r3, [sp, #24]
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	f1a3 0302 	sub.w	r3, r3, #2
 8006080:	bfcc      	ite	gt
 8006082:	2500      	movgt	r5, #0
 8006084:	2501      	movle	r5, #1
 8006086:	2b03      	cmp	r3, #3
 8006088:	f200 8087 	bhi.w	800619a <_dtoa_r+0x30a>
 800608c:	e8df f003 	tbb	[pc, r3]
 8006090:	59383a2d 	.word	0x59383a2d
 8006094:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006098:	441d      	add	r5, r3
 800609a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800609e:	2b20      	cmp	r3, #32
 80060a0:	bfc1      	itttt	gt
 80060a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80060ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060b2:	bfda      	itte	le
 80060b4:	f1c3 0320 	rsble	r3, r3, #32
 80060b8:	fa06 f003 	lslle.w	r0, r6, r3
 80060bc:	4318      	orrgt	r0, r3
 80060be:	f7fa fa41 	bl	8000544 <__aeabi_ui2d>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4606      	mov	r6, r0
 80060c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060ca:	3d01      	subs	r5, #1
 80060cc:	930e      	str	r3, [sp, #56]	; 0x38
 80060ce:	e76a      	b.n	8005fa6 <_dtoa_r+0x116>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e7b2      	b.n	800603a <_dtoa_r+0x1aa>
 80060d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060d6:	e7b1      	b.n	800603c <_dtoa_r+0x1ac>
 80060d8:	9b04      	ldr	r3, [sp, #16]
 80060da:	9a00      	ldr	r2, [sp, #0]
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	4253      	negs	r3, r2
 80060e2:	9307      	str	r3, [sp, #28]
 80060e4:	2300      	movs	r3, #0
 80060e6:	930a      	str	r3, [sp, #40]	; 0x28
 80060e8:	e7bf      	b.n	800606a <_dtoa_r+0x1da>
 80060ea:	2300      	movs	r3, #0
 80060ec:	9308      	str	r3, [sp, #32]
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dc55      	bgt.n	80061a0 <_dtoa_r+0x310>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060fa:	461a      	mov	r2, r3
 80060fc:	9209      	str	r2, [sp, #36]	; 0x24
 80060fe:	e00c      	b.n	800611a <_dtoa_r+0x28a>
 8006100:	2301      	movs	r3, #1
 8006102:	e7f3      	b.n	80060ec <_dtoa_r+0x25c>
 8006104:	2300      	movs	r3, #0
 8006106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006108:	9308      	str	r3, [sp, #32]
 800610a:	9b00      	ldr	r3, [sp, #0]
 800610c:	4413      	add	r3, r2
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	3301      	adds	r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	bfb8      	it	lt
 8006118:	2301      	movlt	r3, #1
 800611a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800611c:	2200      	movs	r2, #0
 800611e:	6042      	str	r2, [r0, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	f102 0614 	add.w	r6, r2, #20
 8006126:	429e      	cmp	r6, r3
 8006128:	6841      	ldr	r1, [r0, #4]
 800612a:	d93d      	bls.n	80061a8 <_dtoa_r+0x318>
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fec9 	bl	8006ec4 <_Balloc>
 8006132:	9001      	str	r0, [sp, #4]
 8006134:	2800      	cmp	r0, #0
 8006136:	d13b      	bne.n	80061b0 <_dtoa_r+0x320>
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <_dtoa_r+0x2f0>)
 800613a:	4602      	mov	r2, r0
 800613c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006140:	e6c0      	b.n	8005ec4 <_dtoa_r+0x34>
 8006142:	2301      	movs	r3, #1
 8006144:	e7df      	b.n	8006106 <_dtoa_r+0x276>
 8006146:	bf00      	nop
 8006148:	636f4361 	.word	0x636f4361
 800614c:	3fd287a7 	.word	0x3fd287a7
 8006150:	8b60c8b3 	.word	0x8b60c8b3
 8006154:	3fc68a28 	.word	0x3fc68a28
 8006158:	509f79fb 	.word	0x509f79fb
 800615c:	3fd34413 	.word	0x3fd34413
 8006160:	08007e31 	.word	0x08007e31
 8006164:	08007e48 	.word	0x08007e48
 8006168:	7ff00000 	.word	0x7ff00000
 800616c:	08007e2d 	.word	0x08007e2d
 8006170:	08007e24 	.word	0x08007e24
 8006174:	08007e01 	.word	0x08007e01
 8006178:	3ff80000 	.word	0x3ff80000
 800617c:	08007f98 	.word	0x08007f98
 8006180:	08007ea3 	.word	0x08007ea3
 8006184:	2501      	movs	r5, #1
 8006186:	2300      	movs	r3, #0
 8006188:	9306      	str	r3, [sp, #24]
 800618a:	9508      	str	r5, [sp, #32]
 800618c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006190:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	2312      	movs	r3, #18
 8006198:	e7b0      	b.n	80060fc <_dtoa_r+0x26c>
 800619a:	2301      	movs	r3, #1
 800619c:	9308      	str	r3, [sp, #32]
 800619e:	e7f5      	b.n	800618c <_dtoa_r+0x2fc>
 80061a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061a6:	e7b8      	b.n	800611a <_dtoa_r+0x28a>
 80061a8:	3101      	adds	r1, #1
 80061aa:	6041      	str	r1, [r0, #4]
 80061ac:	0052      	lsls	r2, r2, #1
 80061ae:	e7b8      	b.n	8006122 <_dtoa_r+0x292>
 80061b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b2:	9a01      	ldr	r2, [sp, #4]
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	2b0e      	cmp	r3, #14
 80061ba:	f200 809d 	bhi.w	80062f8 <_dtoa_r+0x468>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 809a 	beq.w	80062f8 <_dtoa_r+0x468>
 80061c4:	9b00      	ldr	r3, [sp, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dd32      	ble.n	8006230 <_dtoa_r+0x3a0>
 80061ca:	4ab7      	ldr	r2, [pc, #732]	; (80064a8 <_dtoa_r+0x618>)
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061d8:	9b00      	ldr	r3, [sp, #0]
 80061da:	05d8      	lsls	r0, r3, #23
 80061dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061e0:	d516      	bpl.n	8006210 <_dtoa_r+0x380>
 80061e2:	4bb2      	ldr	r3, [pc, #712]	; (80064ac <_dtoa_r+0x61c>)
 80061e4:	ec51 0b19 	vmov	r0, r1, d9
 80061e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061ec:	f7fa fb4e 	bl	800088c <__aeabi_ddiv>
 80061f0:	f007 070f 	and.w	r7, r7, #15
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	2503      	movs	r5, #3
 80061fa:	4eac      	ldr	r6, [pc, #688]	; (80064ac <_dtoa_r+0x61c>)
 80061fc:	b957      	cbnz	r7, 8006214 <_dtoa_r+0x384>
 80061fe:	4642      	mov	r2, r8
 8006200:	464b      	mov	r3, r9
 8006202:	4650      	mov	r0, sl
 8006204:	4659      	mov	r1, fp
 8006206:	f7fa fb41 	bl	800088c <__aeabi_ddiv>
 800620a:	4682      	mov	sl, r0
 800620c:	468b      	mov	fp, r1
 800620e:	e028      	b.n	8006262 <_dtoa_r+0x3d2>
 8006210:	2502      	movs	r5, #2
 8006212:	e7f2      	b.n	80061fa <_dtoa_r+0x36a>
 8006214:	07f9      	lsls	r1, r7, #31
 8006216:	d508      	bpl.n	800622a <_dtoa_r+0x39a>
 8006218:	4640      	mov	r0, r8
 800621a:	4649      	mov	r1, r9
 800621c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006220:	f7fa fa0a 	bl	8000638 <__aeabi_dmul>
 8006224:	3501      	adds	r5, #1
 8006226:	4680      	mov	r8, r0
 8006228:	4689      	mov	r9, r1
 800622a:	107f      	asrs	r7, r7, #1
 800622c:	3608      	adds	r6, #8
 800622e:	e7e5      	b.n	80061fc <_dtoa_r+0x36c>
 8006230:	f000 809b 	beq.w	800636a <_dtoa_r+0x4da>
 8006234:	9b00      	ldr	r3, [sp, #0]
 8006236:	4f9d      	ldr	r7, [pc, #628]	; (80064ac <_dtoa_r+0x61c>)
 8006238:	425e      	negs	r6, r3
 800623a:	4b9b      	ldr	r3, [pc, #620]	; (80064a8 <_dtoa_r+0x618>)
 800623c:	f006 020f 	and.w	r2, r6, #15
 8006240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	ec51 0b19 	vmov	r0, r1, d9
 800624c:	f7fa f9f4 	bl	8000638 <__aeabi_dmul>
 8006250:	1136      	asrs	r6, r6, #4
 8006252:	4682      	mov	sl, r0
 8006254:	468b      	mov	fp, r1
 8006256:	2300      	movs	r3, #0
 8006258:	2502      	movs	r5, #2
 800625a:	2e00      	cmp	r6, #0
 800625c:	d17a      	bne.n	8006354 <_dtoa_r+0x4c4>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1d3      	bne.n	800620a <_dtoa_r+0x37a>
 8006262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8082 	beq.w	800636e <_dtoa_r+0x4de>
 800626a:	4b91      	ldr	r3, [pc, #580]	; (80064b0 <_dtoa_r+0x620>)
 800626c:	2200      	movs	r2, #0
 800626e:	4650      	mov	r0, sl
 8006270:	4659      	mov	r1, fp
 8006272:	f7fa fc53 	bl	8000b1c <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	d079      	beq.n	800636e <_dtoa_r+0x4de>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d076      	beq.n	800636e <_dtoa_r+0x4de>
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dd36      	ble.n	80062f4 <_dtoa_r+0x464>
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	4650      	mov	r0, sl
 800628a:	4659      	mov	r1, fp
 800628c:	1e5f      	subs	r7, r3, #1
 800628e:	2200      	movs	r2, #0
 8006290:	4b88      	ldr	r3, [pc, #544]	; (80064b4 <_dtoa_r+0x624>)
 8006292:	f7fa f9d1 	bl	8000638 <__aeabi_dmul>
 8006296:	9e02      	ldr	r6, [sp, #8]
 8006298:	4682      	mov	sl, r0
 800629a:	468b      	mov	fp, r1
 800629c:	3501      	adds	r5, #1
 800629e:	4628      	mov	r0, r5
 80062a0:	f7fa f960 	bl	8000564 <__aeabi_i2d>
 80062a4:	4652      	mov	r2, sl
 80062a6:	465b      	mov	r3, fp
 80062a8:	f7fa f9c6 	bl	8000638 <__aeabi_dmul>
 80062ac:	4b82      	ldr	r3, [pc, #520]	; (80064b8 <_dtoa_r+0x628>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	f7fa f80c 	bl	80002cc <__adddf3>
 80062b4:	46d0      	mov	r8, sl
 80062b6:	46d9      	mov	r9, fp
 80062b8:	4682      	mov	sl, r0
 80062ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d158      	bne.n	8006374 <_dtoa_r+0x4e4>
 80062c2:	4b7e      	ldr	r3, [pc, #504]	; (80064bc <_dtoa_r+0x62c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	4640      	mov	r0, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	f7f9 fffd 	bl	80002c8 <__aeabi_dsub>
 80062ce:	4652      	mov	r2, sl
 80062d0:	465b      	mov	r3, fp
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	f7fa fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f040 8295 	bne.w	800680a <_dtoa_r+0x97a>
 80062e0:	4652      	mov	r2, sl
 80062e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa fc17 	bl	8000b1c <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f040 8289 	bne.w	8006806 <_dtoa_r+0x976>
 80062f4:	ec5b ab19 	vmov	sl, fp, d9
 80062f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f2c0 8148 	blt.w	8006590 <_dtoa_r+0x700>
 8006300:	9a00      	ldr	r2, [sp, #0]
 8006302:	2a0e      	cmp	r2, #14
 8006304:	f300 8144 	bgt.w	8006590 <_dtoa_r+0x700>
 8006308:	4b67      	ldr	r3, [pc, #412]	; (80064a8 <_dtoa_r+0x618>)
 800630a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	f280 80d5 	bge.w	80064c4 <_dtoa_r+0x634>
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f300 80d1 	bgt.w	80064c4 <_dtoa_r+0x634>
 8006322:	f040 826f 	bne.w	8006804 <_dtoa_r+0x974>
 8006326:	4b65      	ldr	r3, [pc, #404]	; (80064bc <_dtoa_r+0x62c>)
 8006328:	2200      	movs	r2, #0
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7fa f983 	bl	8000638 <__aeabi_dmul>
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	f7fa fc05 	bl	8000b44 <__aeabi_dcmpge>
 800633a:	9e03      	ldr	r6, [sp, #12]
 800633c:	4637      	mov	r7, r6
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8245 	bne.w	80067ce <_dtoa_r+0x93e>
 8006344:	9d01      	ldr	r5, [sp, #4]
 8006346:	2331      	movs	r3, #49	; 0x31
 8006348:	f805 3b01 	strb.w	r3, [r5], #1
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	e240      	b.n	80067d6 <_dtoa_r+0x946>
 8006354:	07f2      	lsls	r2, r6, #31
 8006356:	d505      	bpl.n	8006364 <_dtoa_r+0x4d4>
 8006358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635c:	f7fa f96c 	bl	8000638 <__aeabi_dmul>
 8006360:	3501      	adds	r5, #1
 8006362:	2301      	movs	r3, #1
 8006364:	1076      	asrs	r6, r6, #1
 8006366:	3708      	adds	r7, #8
 8006368:	e777      	b.n	800625a <_dtoa_r+0x3ca>
 800636a:	2502      	movs	r5, #2
 800636c:	e779      	b.n	8006262 <_dtoa_r+0x3d2>
 800636e:	9f00      	ldr	r7, [sp, #0]
 8006370:	9e03      	ldr	r6, [sp, #12]
 8006372:	e794      	b.n	800629e <_dtoa_r+0x40e>
 8006374:	9901      	ldr	r1, [sp, #4]
 8006376:	4b4c      	ldr	r3, [pc, #304]	; (80064a8 <_dtoa_r+0x618>)
 8006378:	4431      	add	r1, r6
 800637a:	910d      	str	r1, [sp, #52]	; 0x34
 800637c:	9908      	ldr	r1, [sp, #32]
 800637e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006386:	2900      	cmp	r1, #0
 8006388:	d043      	beq.n	8006412 <_dtoa_r+0x582>
 800638a:	494d      	ldr	r1, [pc, #308]	; (80064c0 <_dtoa_r+0x630>)
 800638c:	2000      	movs	r0, #0
 800638e:	f7fa fa7d 	bl	800088c <__aeabi_ddiv>
 8006392:	4652      	mov	r2, sl
 8006394:	465b      	mov	r3, fp
 8006396:	f7f9 ff97 	bl	80002c8 <__aeabi_dsub>
 800639a:	9d01      	ldr	r5, [sp, #4]
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	4649      	mov	r1, r9
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7fa fbf8 	bl	8000b98 <__aeabi_d2iz>
 80063a8:	4606      	mov	r6, r0
 80063aa:	f7fa f8db 	bl	8000564 <__aeabi_i2d>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4640      	mov	r0, r8
 80063b4:	4649      	mov	r1, r9
 80063b6:	f7f9 ff87 	bl	80002c8 <__aeabi_dsub>
 80063ba:	3630      	adds	r6, #48	; 0x30
 80063bc:	f805 6b01 	strb.w	r6, [r5], #1
 80063c0:	4652      	mov	r2, sl
 80063c2:	465b      	mov	r3, fp
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
 80063c8:	f7fa fba8 	bl	8000b1c <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d163      	bne.n	8006498 <_dtoa_r+0x608>
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	4936      	ldr	r1, [pc, #216]	; (80064b0 <_dtoa_r+0x620>)
 80063d6:	2000      	movs	r0, #0
 80063d8:	f7f9 ff76 	bl	80002c8 <__aeabi_dsub>
 80063dc:	4652      	mov	r2, sl
 80063de:	465b      	mov	r3, fp
 80063e0:	f7fa fb9c 	bl	8000b1c <__aeabi_dcmplt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f040 80b5 	bne.w	8006554 <_dtoa_r+0x6c4>
 80063ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d081      	beq.n	80062f4 <_dtoa_r+0x464>
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <_dtoa_r+0x624>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	4650      	mov	r0, sl
 80063f6:	4659      	mov	r1, fp
 80063f8:	f7fa f91e 	bl	8000638 <__aeabi_dmul>
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <_dtoa_r+0x624>)
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	2200      	movs	r2, #0
 8006408:	f7fa f916 	bl	8000638 <__aeabi_dmul>
 800640c:	4680      	mov	r8, r0
 800640e:	4689      	mov	r9, r1
 8006410:	e7c6      	b.n	80063a0 <_dtoa_r+0x510>
 8006412:	4650      	mov	r0, sl
 8006414:	4659      	mov	r1, fp
 8006416:	f7fa f90f 	bl	8000638 <__aeabi_dmul>
 800641a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800641c:	9d01      	ldr	r5, [sp, #4]
 800641e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006420:	4682      	mov	sl, r0
 8006422:	468b      	mov	fp, r1
 8006424:	4649      	mov	r1, r9
 8006426:	4640      	mov	r0, r8
 8006428:	f7fa fbb6 	bl	8000b98 <__aeabi_d2iz>
 800642c:	4606      	mov	r6, r0
 800642e:	f7fa f899 	bl	8000564 <__aeabi_i2d>
 8006432:	3630      	adds	r6, #48	; 0x30
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ff44 	bl	80002c8 <__aeabi_dsub>
 8006440:	f805 6b01 	strb.w	r6, [r5], #1
 8006444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006446:	429d      	cmp	r5, r3
 8006448:	4680      	mov	r8, r0
 800644a:	4689      	mov	r9, r1
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	d124      	bne.n	800649c <_dtoa_r+0x60c>
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <_dtoa_r+0x630>)
 8006454:	4650      	mov	r0, sl
 8006456:	4659      	mov	r1, fp
 8006458:	f7f9 ff38 	bl	80002cc <__adddf3>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa fb78 	bl	8000b58 <__aeabi_dcmpgt>
 8006468:	2800      	cmp	r0, #0
 800646a:	d173      	bne.n	8006554 <_dtoa_r+0x6c4>
 800646c:	4652      	mov	r2, sl
 800646e:	465b      	mov	r3, fp
 8006470:	4913      	ldr	r1, [pc, #76]	; (80064c0 <_dtoa_r+0x630>)
 8006472:	2000      	movs	r0, #0
 8006474:	f7f9 ff28 	bl	80002c8 <__aeabi_dsub>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	f7fa fb4c 	bl	8000b1c <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f43f af35 	beq.w	80062f4 <_dtoa_r+0x464>
 800648a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800648c:	1e6b      	subs	r3, r5, #1
 800648e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006490:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d0f8      	beq.n	800648a <_dtoa_r+0x5fa>
 8006498:	9700      	str	r7, [sp, #0]
 800649a:	e049      	b.n	8006530 <_dtoa_r+0x6a0>
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <_dtoa_r+0x624>)
 800649e:	f7fa f8cb 	bl	8000638 <__aeabi_dmul>
 80064a2:	4680      	mov	r8, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	e7bd      	b.n	8006424 <_dtoa_r+0x594>
 80064a8:	08007f98 	.word	0x08007f98
 80064ac:	08007f70 	.word	0x08007f70
 80064b0:	3ff00000 	.word	0x3ff00000
 80064b4:	40240000 	.word	0x40240000
 80064b8:	401c0000 	.word	0x401c0000
 80064bc:	40140000 	.word	0x40140000
 80064c0:	3fe00000 	.word	0x3fe00000
 80064c4:	9d01      	ldr	r5, [sp, #4]
 80064c6:	4656      	mov	r6, sl
 80064c8:	465f      	mov	r7, fp
 80064ca:	4642      	mov	r2, r8
 80064cc:	464b      	mov	r3, r9
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa f9db 	bl	800088c <__aeabi_ddiv>
 80064d6:	f7fa fb5f 	bl	8000b98 <__aeabi_d2iz>
 80064da:	4682      	mov	sl, r0
 80064dc:	f7fa f842 	bl	8000564 <__aeabi_i2d>
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	f7fa f8a8 	bl	8000638 <__aeabi_dmul>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064f4:	f7f9 fee8 	bl	80002c8 <__aeabi_dsub>
 80064f8:	f805 6b01 	strb.w	r6, [r5], #1
 80064fc:	9e01      	ldr	r6, [sp, #4]
 80064fe:	9f03      	ldr	r7, [sp, #12]
 8006500:	1bae      	subs	r6, r5, r6
 8006502:	42b7      	cmp	r7, r6
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	d135      	bne.n	8006576 <_dtoa_r+0x6e6>
 800650a:	f7f9 fedf 	bl	80002cc <__adddf3>
 800650e:	4642      	mov	r2, r8
 8006510:	464b      	mov	r3, r9
 8006512:	4606      	mov	r6, r0
 8006514:	460f      	mov	r7, r1
 8006516:	f7fa fb1f 	bl	8000b58 <__aeabi_dcmpgt>
 800651a:	b9d0      	cbnz	r0, 8006552 <_dtoa_r+0x6c2>
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa faf0 	bl	8000b08 <__aeabi_dcmpeq>
 8006528:	b110      	cbz	r0, 8006530 <_dtoa_r+0x6a0>
 800652a:	f01a 0f01 	tst.w	sl, #1
 800652e:	d110      	bne.n	8006552 <_dtoa_r+0x6c2>
 8006530:	4620      	mov	r0, r4
 8006532:	ee18 1a10 	vmov	r1, s16
 8006536:	f000 fd05 	bl	8006f44 <_Bfree>
 800653a:	2300      	movs	r3, #0
 800653c:	9800      	ldr	r0, [sp, #0]
 800653e:	702b      	strb	r3, [r5, #0]
 8006540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006542:	3001      	adds	r0, #1
 8006544:	6018      	str	r0, [r3, #0]
 8006546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006548:	2b00      	cmp	r3, #0
 800654a:	f43f acf1 	beq.w	8005f30 <_dtoa_r+0xa0>
 800654e:	601d      	str	r5, [r3, #0]
 8006550:	e4ee      	b.n	8005f30 <_dtoa_r+0xa0>
 8006552:	9f00      	ldr	r7, [sp, #0]
 8006554:	462b      	mov	r3, r5
 8006556:	461d      	mov	r5, r3
 8006558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800655c:	2a39      	cmp	r2, #57	; 0x39
 800655e:	d106      	bne.n	800656e <_dtoa_r+0x6de>
 8006560:	9a01      	ldr	r2, [sp, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d1f7      	bne.n	8006556 <_dtoa_r+0x6c6>
 8006566:	9901      	ldr	r1, [sp, #4]
 8006568:	2230      	movs	r2, #48	; 0x30
 800656a:	3701      	adds	r7, #1
 800656c:	700a      	strb	r2, [r1, #0]
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	3201      	adds	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e790      	b.n	8006498 <_dtoa_r+0x608>
 8006576:	4ba6      	ldr	r3, [pc, #664]	; (8006810 <_dtoa_r+0x980>)
 8006578:	2200      	movs	r2, #0
 800657a:	f7fa f85d 	bl	8000638 <__aeabi_dmul>
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	f7fa fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800658a:	2800      	cmp	r0, #0
 800658c:	d09d      	beq.n	80064ca <_dtoa_r+0x63a>
 800658e:	e7cf      	b.n	8006530 <_dtoa_r+0x6a0>
 8006590:	9a08      	ldr	r2, [sp, #32]
 8006592:	2a00      	cmp	r2, #0
 8006594:	f000 80d7 	beq.w	8006746 <_dtoa_r+0x8b6>
 8006598:	9a06      	ldr	r2, [sp, #24]
 800659a:	2a01      	cmp	r2, #1
 800659c:	f300 80ba 	bgt.w	8006714 <_dtoa_r+0x884>
 80065a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	f000 80b2 	beq.w	800670c <_dtoa_r+0x87c>
 80065a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065ac:	9e07      	ldr	r6, [sp, #28]
 80065ae:	9d04      	ldr	r5, [sp, #16]
 80065b0:	9a04      	ldr	r2, [sp, #16]
 80065b2:	441a      	add	r2, r3
 80065b4:	9204      	str	r2, [sp, #16]
 80065b6:	9a05      	ldr	r2, [sp, #20]
 80065b8:	2101      	movs	r1, #1
 80065ba:	441a      	add	r2, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	9205      	str	r2, [sp, #20]
 80065c0:	f000 fd78 	bl	80070b4 <__i2b>
 80065c4:	4607      	mov	r7, r0
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	dd0c      	ble.n	80065e4 <_dtoa_r+0x754>
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd09      	ble.n	80065e4 <_dtoa_r+0x754>
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	9a04      	ldr	r2, [sp, #16]
 80065d4:	bfa8      	it	ge
 80065d6:	462b      	movge	r3, r5
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	9204      	str	r2, [sp, #16]
 80065dc:	9a05      	ldr	r2, [sp, #20]
 80065de:	1aed      	subs	r5, r5, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	b31b      	cbz	r3, 8006630 <_dtoa_r+0x7a0>
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 80af 	beq.w	800674e <_dtoa_r+0x8be>
 80065f0:	2e00      	cmp	r6, #0
 80065f2:	dd13      	ble.n	800661c <_dtoa_r+0x78c>
 80065f4:	4639      	mov	r1, r7
 80065f6:	4632      	mov	r2, r6
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fe1b 	bl	8007234 <__pow5mult>
 80065fe:	ee18 2a10 	vmov	r2, s16
 8006602:	4601      	mov	r1, r0
 8006604:	4607      	mov	r7, r0
 8006606:	4620      	mov	r0, r4
 8006608:	f000 fd6a 	bl	80070e0 <__multiply>
 800660c:	ee18 1a10 	vmov	r1, s16
 8006610:	4680      	mov	r8, r0
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fc96 	bl	8006f44 <_Bfree>
 8006618:	ee08 8a10 	vmov	s16, r8
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	1b9a      	subs	r2, r3, r6
 8006620:	d006      	beq.n	8006630 <_dtoa_r+0x7a0>
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fe04 	bl	8007234 <__pow5mult>
 800662c:	ee08 0a10 	vmov	s16, r0
 8006630:	2101      	movs	r1, #1
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fd3e 	bl	80070b4 <__i2b>
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	4606      	mov	r6, r0
 800663e:	f340 8088 	ble.w	8006752 <_dtoa_r+0x8c2>
 8006642:	461a      	mov	r2, r3
 8006644:	4601      	mov	r1, r0
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fdf4 	bl	8007234 <__pow5mult>
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	2b01      	cmp	r3, #1
 8006650:	4606      	mov	r6, r0
 8006652:	f340 8081 	ble.w	8006758 <_dtoa_r+0x8c8>
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	6933      	ldr	r3, [r6, #16]
 800665c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006660:	6918      	ldr	r0, [r3, #16]
 8006662:	f000 fcd7 	bl	8007014 <__hi0bits>
 8006666:	f1c0 0020 	rsb	r0, r0, #32
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	4418      	add	r0, r3
 800666e:	f010 001f 	ands.w	r0, r0, #31
 8006672:	f000 8092 	beq.w	800679a <_dtoa_r+0x90a>
 8006676:	f1c0 0320 	rsb	r3, r0, #32
 800667a:	2b04      	cmp	r3, #4
 800667c:	f340 808a 	ble.w	8006794 <_dtoa_r+0x904>
 8006680:	f1c0 001c 	rsb	r0, r0, #28
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	4403      	add	r3, r0
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	9b05      	ldr	r3, [sp, #20]
 800668c:	4403      	add	r3, r0
 800668e:	4405      	add	r5, r0
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd07      	ble.n	80066a8 <_dtoa_r+0x818>
 8006698:	ee18 1a10 	vmov	r1, s16
 800669c:	461a      	mov	r2, r3
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fe22 	bl	80072e8 <__lshift>
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dd05      	ble.n	80066ba <_dtoa_r+0x82a>
 80066ae:	4631      	mov	r1, r6
 80066b0:	461a      	mov	r2, r3
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fe18 	bl	80072e8 <__lshift>
 80066b8:	4606      	mov	r6, r0
 80066ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06e      	beq.n	800679e <_dtoa_r+0x90e>
 80066c0:	ee18 0a10 	vmov	r0, s16
 80066c4:	4631      	mov	r1, r6
 80066c6:	f000 fe7f 	bl	80073c8 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	da67      	bge.n	800679e <_dtoa_r+0x90e>
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	ee18 1a10 	vmov	r1, s16
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	220a      	movs	r2, #10
 80066da:	2300      	movs	r3, #0
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fc53 	bl	8006f88 <__multadd>
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	ee08 0a10 	vmov	s16, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 81b1 	beq.w	8006a50 <_dtoa_r+0xbc0>
 80066ee:	2300      	movs	r3, #0
 80066f0:	4639      	mov	r1, r7
 80066f2:	220a      	movs	r2, #10
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fc47 	bl	8006f88 <__multadd>
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	4607      	mov	r7, r0
 8006700:	f300 808e 	bgt.w	8006820 <_dtoa_r+0x990>
 8006704:	9b06      	ldr	r3, [sp, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	dc51      	bgt.n	80067ae <_dtoa_r+0x91e>
 800670a:	e089      	b.n	8006820 <_dtoa_r+0x990>
 800670c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800670e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006712:	e74b      	b.n	80065ac <_dtoa_r+0x71c>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1e5e      	subs	r6, r3, #1
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	42b3      	cmp	r3, r6
 800671c:	bfbf      	itttt	lt
 800671e:	9b07      	ldrlt	r3, [sp, #28]
 8006720:	9607      	strlt	r6, [sp, #28]
 8006722:	1af2      	sublt	r2, r6, r3
 8006724:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006726:	bfb6      	itet	lt
 8006728:	189b      	addlt	r3, r3, r2
 800672a:	1b9e      	subge	r6, r3, r6
 800672c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	bfb8      	it	lt
 8006732:	2600      	movlt	r6, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfb7      	itett	lt
 8006738:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800673c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006740:	1a9d      	sublt	r5, r3, r2
 8006742:	2300      	movlt	r3, #0
 8006744:	e734      	b.n	80065b0 <_dtoa_r+0x720>
 8006746:	9e07      	ldr	r6, [sp, #28]
 8006748:	9d04      	ldr	r5, [sp, #16]
 800674a:	9f08      	ldr	r7, [sp, #32]
 800674c:	e73b      	b.n	80065c6 <_dtoa_r+0x736>
 800674e:	9a07      	ldr	r2, [sp, #28]
 8006750:	e767      	b.n	8006622 <_dtoa_r+0x792>
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	2b01      	cmp	r3, #1
 8006756:	dc18      	bgt.n	800678a <_dtoa_r+0x8fa>
 8006758:	f1ba 0f00 	cmp.w	sl, #0
 800675c:	d115      	bne.n	800678a <_dtoa_r+0x8fa>
 800675e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006762:	b993      	cbnz	r3, 800678a <_dtoa_r+0x8fa>
 8006764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006768:	0d1b      	lsrs	r3, r3, #20
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	b183      	cbz	r3, 8006790 <_dtoa_r+0x900>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	3301      	adds	r3, #1
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	9b05      	ldr	r3, [sp, #20]
 8006776:	3301      	adds	r3, #1
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	f04f 0801 	mov.w	r8, #1
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f af6a 	bne.w	800665a <_dtoa_r+0x7ca>
 8006786:	2001      	movs	r0, #1
 8006788:	e76f      	b.n	800666a <_dtoa_r+0x7da>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	e7f6      	b.n	800677e <_dtoa_r+0x8ee>
 8006790:	4698      	mov	r8, r3
 8006792:	e7f4      	b.n	800677e <_dtoa_r+0x8ee>
 8006794:	f43f af7d 	beq.w	8006692 <_dtoa_r+0x802>
 8006798:	4618      	mov	r0, r3
 800679a:	301c      	adds	r0, #28
 800679c:	e772      	b.n	8006684 <_dtoa_r+0x7f4>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc37      	bgt.n	8006814 <_dtoa_r+0x984>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dd34      	ble.n	8006814 <_dtoa_r+0x984>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	9302      	str	r3, [sp, #8]
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	b96b      	cbnz	r3, 80067ce <_dtoa_r+0x93e>
 80067b2:	4631      	mov	r1, r6
 80067b4:	2205      	movs	r2, #5
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 fbe6 	bl	8006f88 <__multadd>
 80067bc:	4601      	mov	r1, r0
 80067be:	4606      	mov	r6, r0
 80067c0:	ee18 0a10 	vmov	r0, s16
 80067c4:	f000 fe00 	bl	80073c8 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f73f adbb 	bgt.w	8006344 <_dtoa_r+0x4b4>
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	9d01      	ldr	r5, [sp, #4]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	4631      	mov	r1, r6
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fbb1 	bl	8006f44 <_Bfree>
 80067e2:	2f00      	cmp	r7, #0
 80067e4:	f43f aea4 	beq.w	8006530 <_dtoa_r+0x6a0>
 80067e8:	f1b8 0f00 	cmp.w	r8, #0
 80067ec:	d005      	beq.n	80067fa <_dtoa_r+0x96a>
 80067ee:	45b8      	cmp	r8, r7
 80067f0:	d003      	beq.n	80067fa <_dtoa_r+0x96a>
 80067f2:	4641      	mov	r1, r8
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fba5 	bl	8006f44 <_Bfree>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fba1 	bl	8006f44 <_Bfree>
 8006802:	e695      	b.n	8006530 <_dtoa_r+0x6a0>
 8006804:	2600      	movs	r6, #0
 8006806:	4637      	mov	r7, r6
 8006808:	e7e1      	b.n	80067ce <_dtoa_r+0x93e>
 800680a:	9700      	str	r7, [sp, #0]
 800680c:	4637      	mov	r7, r6
 800680e:	e599      	b.n	8006344 <_dtoa_r+0x4b4>
 8006810:	40240000 	.word	0x40240000
 8006814:	9b08      	ldr	r3, [sp, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80ca 	beq.w	80069b0 <_dtoa_r+0xb20>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	2d00      	cmp	r5, #0
 8006822:	dd05      	ble.n	8006830 <_dtoa_r+0x9a0>
 8006824:	4639      	mov	r1, r7
 8006826:	462a      	mov	r2, r5
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fd5d 	bl	80072e8 <__lshift>
 800682e:	4607      	mov	r7, r0
 8006830:	f1b8 0f00 	cmp.w	r8, #0
 8006834:	d05b      	beq.n	80068ee <_dtoa_r+0xa5e>
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fb43 	bl	8006ec4 <_Balloc>
 800683e:	4605      	mov	r5, r0
 8006840:	b928      	cbnz	r0, 800684e <_dtoa_r+0x9be>
 8006842:	4b87      	ldr	r3, [pc, #540]	; (8006a60 <_dtoa_r+0xbd0>)
 8006844:	4602      	mov	r2, r0
 8006846:	f240 21ea 	movw	r1, #746	; 0x2ea
 800684a:	f7ff bb3b 	b.w	8005ec4 <_dtoa_r+0x34>
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	3202      	adds	r2, #2
 8006852:	0092      	lsls	r2, r2, #2
 8006854:	f107 010c 	add.w	r1, r7, #12
 8006858:	300c      	adds	r0, #12
 800685a:	f7fe fcbf 	bl	80051dc <memcpy>
 800685e:	2201      	movs	r2, #1
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fd40 	bl	80072e8 <__lshift>
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	f103 0901 	add.w	r9, r3, #1
 800686e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006872:	4413      	add	r3, r2
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	f00a 0301 	and.w	r3, sl, #1
 800687a:	46b8      	mov	r8, r7
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	4607      	mov	r7, r0
 8006880:	4631      	mov	r1, r6
 8006882:	ee18 0a10 	vmov	r0, s16
 8006886:	f7ff fa77 	bl	8005d78 <quorem>
 800688a:	4641      	mov	r1, r8
 800688c:	9002      	str	r0, [sp, #8]
 800688e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006892:	ee18 0a10 	vmov	r0, s16
 8006896:	f000 fd97 	bl	80073c8 <__mcmp>
 800689a:	463a      	mov	r2, r7
 800689c:	9003      	str	r0, [sp, #12]
 800689e:	4631      	mov	r1, r6
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fdad 	bl	8007400 <__mdiff>
 80068a6:	68c2      	ldr	r2, [r0, #12]
 80068a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80068ac:	4605      	mov	r5, r0
 80068ae:	bb02      	cbnz	r2, 80068f2 <_dtoa_r+0xa62>
 80068b0:	4601      	mov	r1, r0
 80068b2:	ee18 0a10 	vmov	r0, s16
 80068b6:	f000 fd87 	bl	80073c8 <__mcmp>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4629      	mov	r1, r5
 80068be:	4620      	mov	r0, r4
 80068c0:	9207      	str	r2, [sp, #28]
 80068c2:	f000 fb3f 	bl	8006f44 <_Bfree>
 80068c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068ca:	ea43 0102 	orr.w	r1, r3, r2
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	430b      	orrs	r3, r1
 80068d2:	464d      	mov	r5, r9
 80068d4:	d10f      	bne.n	80068f6 <_dtoa_r+0xa66>
 80068d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068da:	d02a      	beq.n	8006932 <_dtoa_r+0xaa2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dd02      	ble.n	80068e8 <_dtoa_r+0xa58>
 80068e2:	9b02      	ldr	r3, [sp, #8]
 80068e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068e8:	f88b a000 	strb.w	sl, [fp]
 80068ec:	e775      	b.n	80067da <_dtoa_r+0x94a>
 80068ee:	4638      	mov	r0, r7
 80068f0:	e7ba      	b.n	8006868 <_dtoa_r+0x9d8>
 80068f2:	2201      	movs	r2, #1
 80068f4:	e7e2      	b.n	80068bc <_dtoa_r+0xa2c>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db04      	blt.n	8006906 <_dtoa_r+0xa76>
 80068fc:	9906      	ldr	r1, [sp, #24]
 80068fe:	430b      	orrs	r3, r1
 8006900:	9904      	ldr	r1, [sp, #16]
 8006902:	430b      	orrs	r3, r1
 8006904:	d122      	bne.n	800694c <_dtoa_r+0xabc>
 8006906:	2a00      	cmp	r2, #0
 8006908:	ddee      	ble.n	80068e8 <_dtoa_r+0xa58>
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	2201      	movs	r2, #1
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fce9 	bl	80072e8 <__lshift>
 8006916:	4631      	mov	r1, r6
 8006918:	ee08 0a10 	vmov	s16, r0
 800691c:	f000 fd54 	bl	80073c8 <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	dc03      	bgt.n	800692c <_dtoa_r+0xa9c>
 8006924:	d1e0      	bne.n	80068e8 <_dtoa_r+0xa58>
 8006926:	f01a 0f01 	tst.w	sl, #1
 800692a:	d0dd      	beq.n	80068e8 <_dtoa_r+0xa58>
 800692c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006930:	d1d7      	bne.n	80068e2 <_dtoa_r+0xa52>
 8006932:	2339      	movs	r3, #57	; 0x39
 8006934:	f88b 3000 	strb.w	r3, [fp]
 8006938:	462b      	mov	r3, r5
 800693a:	461d      	mov	r5, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006942:	2a39      	cmp	r2, #57	; 0x39
 8006944:	d071      	beq.n	8006a2a <_dtoa_r+0xb9a>
 8006946:	3201      	adds	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e746      	b.n	80067da <_dtoa_r+0x94a>
 800694c:	2a00      	cmp	r2, #0
 800694e:	dd07      	ble.n	8006960 <_dtoa_r+0xad0>
 8006950:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006954:	d0ed      	beq.n	8006932 <_dtoa_r+0xaa2>
 8006956:	f10a 0301 	add.w	r3, sl, #1
 800695a:	f88b 3000 	strb.w	r3, [fp]
 800695e:	e73c      	b.n	80067da <_dtoa_r+0x94a>
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006966:	4599      	cmp	r9, r3
 8006968:	d047      	beq.n	80069fa <_dtoa_r+0xb6a>
 800696a:	ee18 1a10 	vmov	r1, s16
 800696e:	2300      	movs	r3, #0
 8006970:	220a      	movs	r2, #10
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fb08 	bl	8006f88 <__multadd>
 8006978:	45b8      	cmp	r8, r7
 800697a:	ee08 0a10 	vmov	s16, r0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f04f 020a 	mov.w	r2, #10
 8006986:	4641      	mov	r1, r8
 8006988:	4620      	mov	r0, r4
 800698a:	d106      	bne.n	800699a <_dtoa_r+0xb0a>
 800698c:	f000 fafc 	bl	8006f88 <__multadd>
 8006990:	4680      	mov	r8, r0
 8006992:	4607      	mov	r7, r0
 8006994:	f109 0901 	add.w	r9, r9, #1
 8006998:	e772      	b.n	8006880 <_dtoa_r+0x9f0>
 800699a:	f000 faf5 	bl	8006f88 <__multadd>
 800699e:	4639      	mov	r1, r7
 80069a0:	4680      	mov	r8, r0
 80069a2:	2300      	movs	r3, #0
 80069a4:	220a      	movs	r2, #10
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 faee 	bl	8006f88 <__multadd>
 80069ac:	4607      	mov	r7, r0
 80069ae:	e7f1      	b.n	8006994 <_dtoa_r+0xb04>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	9d01      	ldr	r5, [sp, #4]
 80069b6:	ee18 0a10 	vmov	r0, s16
 80069ba:	4631      	mov	r1, r6
 80069bc:	f7ff f9dc 	bl	8005d78 <quorem>
 80069c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	f805 ab01 	strb.w	sl, [r5], #1
 80069ca:	1aea      	subs	r2, r5, r3
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	dd09      	ble.n	80069e6 <_dtoa_r+0xb56>
 80069d2:	ee18 1a10 	vmov	r1, s16
 80069d6:	2300      	movs	r3, #0
 80069d8:	220a      	movs	r2, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fad4 	bl	8006f88 <__multadd>
 80069e0:	ee08 0a10 	vmov	s16, r0
 80069e4:	e7e7      	b.n	80069b6 <_dtoa_r+0xb26>
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfc8      	it	gt
 80069ec:	461d      	movgt	r5, r3
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	bfd8      	it	le
 80069f2:	2501      	movle	r5, #1
 80069f4:	441d      	add	r5, r3
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	ee18 1a10 	vmov	r1, s16
 80069fe:	2201      	movs	r2, #1
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fc71 	bl	80072e8 <__lshift>
 8006a06:	4631      	mov	r1, r6
 8006a08:	ee08 0a10 	vmov	s16, r0
 8006a0c:	f000 fcdc 	bl	80073c8 <__mcmp>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	dc91      	bgt.n	8006938 <_dtoa_r+0xaa8>
 8006a14:	d102      	bne.n	8006a1c <_dtoa_r+0xb8c>
 8006a16:	f01a 0f01 	tst.w	sl, #1
 8006a1a:	d18d      	bne.n	8006938 <_dtoa_r+0xaa8>
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	461d      	mov	r5, r3
 8006a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a24:	2a30      	cmp	r2, #48	; 0x30
 8006a26:	d0fa      	beq.n	8006a1e <_dtoa_r+0xb8e>
 8006a28:	e6d7      	b.n	80067da <_dtoa_r+0x94a>
 8006a2a:	9a01      	ldr	r2, [sp, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d184      	bne.n	800693a <_dtoa_r+0xaaa>
 8006a30:	9b00      	ldr	r3, [sp, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2331      	movs	r3, #49	; 0x31
 8006a38:	7013      	strb	r3, [r2, #0]
 8006a3a:	e6ce      	b.n	80067da <_dtoa_r+0x94a>
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <_dtoa_r+0xbd4>)
 8006a3e:	f7ff ba95 	b.w	8005f6c <_dtoa_r+0xdc>
 8006a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f aa6e 	bne.w	8005f26 <_dtoa_r+0x96>
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <_dtoa_r+0xbd8>)
 8006a4c:	f7ff ba8e 	b.w	8005f6c <_dtoa_r+0xdc>
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dcae      	bgt.n	80069b4 <_dtoa_r+0xb24>
 8006a56:	9b06      	ldr	r3, [sp, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f73f aea8 	bgt.w	80067ae <_dtoa_r+0x91e>
 8006a5e:	e7a9      	b.n	80069b4 <_dtoa_r+0xb24>
 8006a60:	08007ea3 	.word	0x08007ea3
 8006a64:	08007e00 	.word	0x08007e00
 8006a68:	08007e24 	.word	0x08007e24

08006a6c <__sflush_r>:
 8006a6c:	898a      	ldrh	r2, [r1, #12]
 8006a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a72:	4605      	mov	r5, r0
 8006a74:	0710      	lsls	r0, r2, #28
 8006a76:	460c      	mov	r4, r1
 8006a78:	d458      	bmi.n	8006b2c <__sflush_r+0xc0>
 8006a7a:	684b      	ldr	r3, [r1, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc05      	bgt.n	8006a8c <__sflush_r+0x20>
 8006a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dc02      	bgt.n	8006a8c <__sflush_r+0x20>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	d0f9      	beq.n	8006a86 <__sflush_r+0x1a>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a98:	682f      	ldr	r7, [r5, #0]
 8006a9a:	602b      	str	r3, [r5, #0]
 8006a9c:	d032      	beq.n	8006b04 <__sflush_r+0x98>
 8006a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	075a      	lsls	r2, r3, #29
 8006aa4:	d505      	bpl.n	8006ab2 <__sflush_r+0x46>
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	1ac0      	subs	r0, r0, r3
 8006aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aac:	b10b      	cbz	r3, 8006ab2 <__sflush_r+0x46>
 8006aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab0:	1ac0      	subs	r0, r0, r3
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab8:	6a21      	ldr	r1, [r4, #32]
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b0      	blx	r6
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	d106      	bne.n	8006ad2 <__sflush_r+0x66>
 8006ac4:	6829      	ldr	r1, [r5, #0]
 8006ac6:	291d      	cmp	r1, #29
 8006ac8:	d82c      	bhi.n	8006b24 <__sflush_r+0xb8>
 8006aca:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <__sflush_r+0x108>)
 8006acc:	40ca      	lsrs	r2, r1
 8006ace:	07d6      	lsls	r6, r2, #31
 8006ad0:	d528      	bpl.n	8006b24 <__sflush_r+0xb8>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6062      	str	r2, [r4, #4]
 8006ad6:	04d9      	lsls	r1, r3, #19
 8006ad8:	6922      	ldr	r2, [r4, #16]
 8006ada:	6022      	str	r2, [r4, #0]
 8006adc:	d504      	bpl.n	8006ae8 <__sflush_r+0x7c>
 8006ade:	1c42      	adds	r2, r0, #1
 8006ae0:	d101      	bne.n	8006ae6 <__sflush_r+0x7a>
 8006ae2:	682b      	ldr	r3, [r5, #0]
 8006ae4:	b903      	cbnz	r3, 8006ae8 <__sflush_r+0x7c>
 8006ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aea:	602f      	str	r7, [r5, #0]
 8006aec:	2900      	cmp	r1, #0
 8006aee:	d0ca      	beq.n	8006a86 <__sflush_r+0x1a>
 8006af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af4:	4299      	cmp	r1, r3
 8006af6:	d002      	beq.n	8006afe <__sflush_r+0x92>
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 fd7d 	bl	80075f8 <_free_r>
 8006afe:	2000      	movs	r0, #0
 8006b00:	6360      	str	r0, [r4, #52]	; 0x34
 8006b02:	e7c1      	b.n	8006a88 <__sflush_r+0x1c>
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	2301      	movs	r3, #1
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b0      	blx	r6
 8006b0c:	1c41      	adds	r1, r0, #1
 8006b0e:	d1c7      	bne.n	8006aa0 <__sflush_r+0x34>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0c4      	beq.n	8006aa0 <__sflush_r+0x34>
 8006b16:	2b1d      	cmp	r3, #29
 8006b18:	d001      	beq.n	8006b1e <__sflush_r+0xb2>
 8006b1a:	2b16      	cmp	r3, #22
 8006b1c:	d101      	bne.n	8006b22 <__sflush_r+0xb6>
 8006b1e:	602f      	str	r7, [r5, #0]
 8006b20:	e7b1      	b.n	8006a86 <__sflush_r+0x1a>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	e7ad      	b.n	8006a88 <__sflush_r+0x1c>
 8006b2c:	690f      	ldr	r7, [r1, #16]
 8006b2e:	2f00      	cmp	r7, #0
 8006b30:	d0a9      	beq.n	8006a86 <__sflush_r+0x1a>
 8006b32:	0793      	lsls	r3, r2, #30
 8006b34:	680e      	ldr	r6, [r1, #0]
 8006b36:	bf08      	it	eq
 8006b38:	694b      	ldreq	r3, [r1, #20]
 8006b3a:	600f      	str	r7, [r1, #0]
 8006b3c:	bf18      	it	ne
 8006b3e:	2300      	movne	r3, #0
 8006b40:	eba6 0807 	sub.w	r8, r6, r7
 8006b44:	608b      	str	r3, [r1, #8]
 8006b46:	f1b8 0f00 	cmp.w	r8, #0
 8006b4a:	dd9c      	ble.n	8006a86 <__sflush_r+0x1a>
 8006b4c:	6a21      	ldr	r1, [r4, #32]
 8006b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b50:	4643      	mov	r3, r8
 8006b52:	463a      	mov	r2, r7
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b0      	blx	r6
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dc06      	bgt.n	8006b6a <__sflush_r+0xfe>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b68:	e78e      	b.n	8006a88 <__sflush_r+0x1c>
 8006b6a:	4407      	add	r7, r0
 8006b6c:	eba8 0800 	sub.w	r8, r8, r0
 8006b70:	e7e9      	b.n	8006b46 <__sflush_r+0xda>
 8006b72:	bf00      	nop
 8006b74:	20400001 	.word	0x20400001

08006b78 <_fflush_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	690b      	ldr	r3, [r1, #16]
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	b913      	cbnz	r3, 8006b88 <_fflush_r+0x10>
 8006b82:	2500      	movs	r5, #0
 8006b84:	4628      	mov	r0, r5
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	b118      	cbz	r0, 8006b92 <_fflush_r+0x1a>
 8006b8a:	6983      	ldr	r3, [r0, #24]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <_fflush_r+0x1a>
 8006b8e:	f000 f887 	bl	8006ca0 <__sinit>
 8006b92:	4b14      	ldr	r3, [pc, #80]	; (8006be4 <_fflush_r+0x6c>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	d11b      	bne.n	8006bd0 <_fflush_r+0x58>
 8006b98:	686c      	ldr	r4, [r5, #4]
 8006b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0ef      	beq.n	8006b82 <_fflush_r+0xa>
 8006ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ba4:	07d0      	lsls	r0, r2, #31
 8006ba6:	d404      	bmi.n	8006bb2 <_fflush_r+0x3a>
 8006ba8:	0599      	lsls	r1, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_fflush_r+0x3a>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f000 f91a 	bl	8006de6 <__retarget_lock_acquire_recursive>
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f7ff ff59 	bl	8006a6c <__sflush_r>
 8006bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bbc:	07da      	lsls	r2, r3, #31
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	d4e0      	bmi.n	8006b84 <_fflush_r+0xc>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	059b      	lsls	r3, r3, #22
 8006bc6:	d4dd      	bmi.n	8006b84 <_fflush_r+0xc>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bca:	f000 f90d 	bl	8006de8 <__retarget_lock_release_recursive>
 8006bce:	e7d9      	b.n	8006b84 <_fflush_r+0xc>
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <_fflush_r+0x70>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d101      	bne.n	8006bda <_fflush_r+0x62>
 8006bd6:	68ac      	ldr	r4, [r5, #8]
 8006bd8:	e7df      	b.n	8006b9a <_fflush_r+0x22>
 8006bda:	4b04      	ldr	r3, [pc, #16]	; (8006bec <_fflush_r+0x74>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	bf08      	it	eq
 8006be0:	68ec      	ldreq	r4, [r5, #12]
 8006be2:	e7da      	b.n	8006b9a <_fflush_r+0x22>
 8006be4:	08007ed4 	.word	0x08007ed4
 8006be8:	08007ef4 	.word	0x08007ef4
 8006bec:	08007eb4 	.word	0x08007eb4

08006bf0 <std>:
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bfe:	6083      	str	r3, [r0, #8]
 8006c00:	8181      	strh	r1, [r0, #12]
 8006c02:	6643      	str	r3, [r0, #100]	; 0x64
 8006c04:	81c2      	strh	r2, [r0, #14]
 8006c06:	6183      	str	r3, [r0, #24]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	305c      	adds	r0, #92	; 0x5c
 8006c0e:	f7fe faf3 	bl	80051f8 <memset>
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <std+0x38>)
 8006c14:	6263      	str	r3, [r4, #36]	; 0x24
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <std+0x3c>)
 8006c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <std+0x40>)
 8006c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c1e:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <std+0x44>)
 8006c20:	6224      	str	r4, [r4, #32]
 8006c22:	6323      	str	r3, [r4, #48]	; 0x30
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	bf00      	nop
 8006c28:	08007a8d 	.word	0x08007a8d
 8006c2c:	08007aaf 	.word	0x08007aaf
 8006c30:	08007ae7 	.word	0x08007ae7
 8006c34:	08007b0b 	.word	0x08007b0b

08006c38 <_cleanup_r>:
 8006c38:	4901      	ldr	r1, [pc, #4]	; (8006c40 <_cleanup_r+0x8>)
 8006c3a:	f000 b8af 	b.w	8006d9c <_fwalk_reent>
 8006c3e:	bf00      	nop
 8006c40:	08006b79 	.word	0x08006b79

08006c44 <__sfmoreglue>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	2268      	movs	r2, #104	; 0x68
 8006c48:	1e4d      	subs	r5, r1, #1
 8006c4a:	4355      	muls	r5, r2
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c52:	f000 fd3d 	bl	80076d0 <_malloc_r>
 8006c56:	4604      	mov	r4, r0
 8006c58:	b140      	cbz	r0, 8006c6c <__sfmoreglue+0x28>
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c60:	300c      	adds	r0, #12
 8006c62:	60a0      	str	r0, [r4, #8]
 8006c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c68:	f7fe fac6 	bl	80051f8 <memset>
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}

08006c70 <__sfp_lock_acquire>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__sfp_lock_acquire+0x8>)
 8006c72:	f000 b8b8 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 8006c76:	bf00      	nop
 8006c78:	200007c5 	.word	0x200007c5

08006c7c <__sfp_lock_release>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__sfp_lock_release+0x8>)
 8006c7e:	f000 b8b3 	b.w	8006de8 <__retarget_lock_release_recursive>
 8006c82:	bf00      	nop
 8006c84:	200007c5 	.word	0x200007c5

08006c88 <__sinit_lock_acquire>:
 8006c88:	4801      	ldr	r0, [pc, #4]	; (8006c90 <__sinit_lock_acquire+0x8>)
 8006c8a:	f000 b8ac 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 8006c8e:	bf00      	nop
 8006c90:	200007c6 	.word	0x200007c6

08006c94 <__sinit_lock_release>:
 8006c94:	4801      	ldr	r0, [pc, #4]	; (8006c9c <__sinit_lock_release+0x8>)
 8006c96:	f000 b8a7 	b.w	8006de8 <__retarget_lock_release_recursive>
 8006c9a:	bf00      	nop
 8006c9c:	200007c6 	.word	0x200007c6

08006ca0 <__sinit>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	f7ff fff0 	bl	8006c88 <__sinit_lock_acquire>
 8006ca8:	69a3      	ldr	r3, [r4, #24]
 8006caa:	b11b      	cbz	r3, 8006cb4 <__sinit+0x14>
 8006cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb0:	f7ff bff0 	b.w	8006c94 <__sinit_lock_release>
 8006cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8006cba:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <__sinit+0x68>)
 8006cbc:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <__sinit+0x6c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	bf04      	itt	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	61a3      	streq	r3, [r4, #24]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f820 	bl	8006d10 <__sfp>
 8006cd0:	6060      	str	r0, [r4, #4]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f81c 	bl	8006d10 <__sfp>
 8006cd8:	60a0      	str	r0, [r4, #8]
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f818 	bl	8006d10 <__sfp>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	60e0      	str	r0, [r4, #12]
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	6860      	ldr	r0, [r4, #4]
 8006ce8:	f7ff ff82 	bl	8006bf0 <std>
 8006cec:	68a0      	ldr	r0, [r4, #8]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	2109      	movs	r1, #9
 8006cf2:	f7ff ff7d 	bl	8006bf0 <std>
 8006cf6:	68e0      	ldr	r0, [r4, #12]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	2112      	movs	r1, #18
 8006cfc:	f7ff ff78 	bl	8006bf0 <std>
 8006d00:	2301      	movs	r3, #1
 8006d02:	61a3      	str	r3, [r4, #24]
 8006d04:	e7d2      	b.n	8006cac <__sinit+0xc>
 8006d06:	bf00      	nop
 8006d08:	08007dec 	.word	0x08007dec
 8006d0c:	08006c39 	.word	0x08006c39

08006d10 <__sfp>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	4607      	mov	r7, r0
 8006d14:	f7ff ffac 	bl	8006c70 <__sfp_lock_acquire>
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <__sfp+0x84>)
 8006d1a:	681e      	ldr	r6, [r3, #0]
 8006d1c:	69b3      	ldr	r3, [r6, #24]
 8006d1e:	b913      	cbnz	r3, 8006d26 <__sfp+0x16>
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff ffbd 	bl	8006ca0 <__sinit>
 8006d26:	3648      	adds	r6, #72	; 0x48
 8006d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	d503      	bpl.n	8006d38 <__sfp+0x28>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	b30b      	cbz	r3, 8006d78 <__sfp+0x68>
 8006d34:	6836      	ldr	r6, [r6, #0]
 8006d36:	e7f7      	b.n	8006d28 <__sfp+0x18>
 8006d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d3c:	b9d5      	cbnz	r5, 8006d74 <__sfp+0x64>
 8006d3e:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <__sfp+0x88>)
 8006d40:	60e3      	str	r3, [r4, #12]
 8006d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d46:	6665      	str	r5, [r4, #100]	; 0x64
 8006d48:	f000 f84c 	bl	8006de4 <__retarget_lock_init_recursive>
 8006d4c:	f7ff ff96 	bl	8006c7c <__sfp_lock_release>
 8006d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d58:	6025      	str	r5, [r4, #0]
 8006d5a:	61a5      	str	r5, [r4, #24]
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d64:	f7fe fa48 	bl	80051f8 <memset>
 8006d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d70:	4620      	mov	r0, r4
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	3468      	adds	r4, #104	; 0x68
 8006d76:	e7d9      	b.n	8006d2c <__sfp+0x1c>
 8006d78:	2104      	movs	r1, #4
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f7ff ff62 	bl	8006c44 <__sfmoreglue>
 8006d80:	4604      	mov	r4, r0
 8006d82:	6030      	str	r0, [r6, #0]
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1d5      	bne.n	8006d34 <__sfp+0x24>
 8006d88:	f7ff ff78 	bl	8006c7c <__sfp_lock_release>
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	e7ee      	b.n	8006d70 <__sfp+0x60>
 8006d92:	bf00      	nop
 8006d94:	08007dec 	.word	0x08007dec
 8006d98:	ffff0001 	.word	0xffff0001

08006d9c <_fwalk_reent>:
 8006d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da0:	4606      	mov	r6, r0
 8006da2:	4688      	mov	r8, r1
 8006da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006da8:	2700      	movs	r7, #0
 8006daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dae:	f1b9 0901 	subs.w	r9, r9, #1
 8006db2:	d505      	bpl.n	8006dc0 <_fwalk_reent+0x24>
 8006db4:	6824      	ldr	r4, [r4, #0]
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d1f7      	bne.n	8006daa <_fwalk_reent+0xe>
 8006dba:	4638      	mov	r0, r7
 8006dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d907      	bls.n	8006dd6 <_fwalk_reent+0x3a>
 8006dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	d003      	beq.n	8006dd6 <_fwalk_reent+0x3a>
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	47c0      	blx	r8
 8006dd4:	4307      	orrs	r7, r0
 8006dd6:	3568      	adds	r5, #104	; 0x68
 8006dd8:	e7e9      	b.n	8006dae <_fwalk_reent+0x12>
	...

08006ddc <_localeconv_r>:
 8006ddc:	4800      	ldr	r0, [pc, #0]	; (8006de0 <_localeconv_r+0x4>)
 8006dde:	4770      	bx	lr
 8006de0:	20000160 	.word	0x20000160

08006de4 <__retarget_lock_init_recursive>:
 8006de4:	4770      	bx	lr

08006de6 <__retarget_lock_acquire_recursive>:
 8006de6:	4770      	bx	lr

08006de8 <__retarget_lock_release_recursive>:
 8006de8:	4770      	bx	lr

08006dea <__swhatbuf_r>:
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	460e      	mov	r6, r1
 8006dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df2:	2900      	cmp	r1, #0
 8006df4:	b096      	sub	sp, #88	; 0x58
 8006df6:	4614      	mov	r4, r2
 8006df8:	461d      	mov	r5, r3
 8006dfa:	da08      	bge.n	8006e0e <__swhatbuf_r+0x24>
 8006dfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	602a      	str	r2, [r5, #0]
 8006e04:	061a      	lsls	r2, r3, #24
 8006e06:	d410      	bmi.n	8006e2a <__swhatbuf_r+0x40>
 8006e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0c:	e00e      	b.n	8006e2c <__swhatbuf_r+0x42>
 8006e0e:	466a      	mov	r2, sp
 8006e10:	f000 fed2 	bl	8007bb8 <_fstat_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	dbf1      	blt.n	8006dfc <__swhatbuf_r+0x12>
 8006e18:	9a01      	ldr	r2, [sp, #4]
 8006e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e22:	425a      	negs	r2, r3
 8006e24:	415a      	adcs	r2, r3
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	e7ee      	b.n	8006e08 <__swhatbuf_r+0x1e>
 8006e2a:	2340      	movs	r3, #64	; 0x40
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	b016      	add	sp, #88	; 0x58
 8006e32:	bd70      	pop	{r4, r5, r6, pc}

08006e34 <__smakebuf_r>:
 8006e34:	898b      	ldrh	r3, [r1, #12]
 8006e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e38:	079d      	lsls	r5, r3, #30
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	d507      	bpl.n	8006e50 <__smakebuf_r+0x1c>
 8006e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	b002      	add	sp, #8
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	ab01      	add	r3, sp, #4
 8006e52:	466a      	mov	r2, sp
 8006e54:	f7ff ffc9 	bl	8006dea <__swhatbuf_r>
 8006e58:	9900      	ldr	r1, [sp, #0]
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 fc37 	bl	80076d0 <_malloc_r>
 8006e62:	b948      	cbnz	r0, 8006e78 <__smakebuf_r+0x44>
 8006e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e68:	059a      	lsls	r2, r3, #22
 8006e6a:	d4ef      	bmi.n	8006e4c <__smakebuf_r+0x18>
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	f043 0302 	orr.w	r3, r3, #2
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e7e3      	b.n	8006e40 <__smakebuf_r+0xc>
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <__smakebuf_r+0x7c>)
 8006e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	6020      	str	r0, [r4, #0]
 8006e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	6163      	str	r3, [r4, #20]
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	6120      	str	r0, [r4, #16]
 8006e8e:	b15b      	cbz	r3, 8006ea8 <__smakebuf_r+0x74>
 8006e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e94:	4630      	mov	r0, r6
 8006e96:	f000 fea1 	bl	8007bdc <_isatty_r>
 8006e9a:	b128      	cbz	r0, 8006ea8 <__smakebuf_r+0x74>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	89a0      	ldrh	r0, [r4, #12]
 8006eaa:	4305      	orrs	r5, r0
 8006eac:	81a5      	strh	r5, [r4, #12]
 8006eae:	e7cd      	b.n	8006e4c <__smakebuf_r+0x18>
 8006eb0:	08006c39 	.word	0x08006c39

08006eb4 <malloc>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <malloc+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 bc09 	b.w	80076d0 <_malloc_r>
 8006ebe:	bf00      	nop
 8006ec0:	2000000c 	.word	0x2000000c

08006ec4 <_Balloc>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec8:	4604      	mov	r4, r0
 8006eca:	460d      	mov	r5, r1
 8006ecc:	b976      	cbnz	r6, 8006eec <_Balloc+0x28>
 8006ece:	2010      	movs	r0, #16
 8006ed0:	f7ff fff0 	bl	8006eb4 <malloc>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ed8:	b920      	cbnz	r0, 8006ee4 <_Balloc+0x20>
 8006eda:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <_Balloc+0x78>)
 8006edc:	4818      	ldr	r0, [pc, #96]	; (8006f40 <_Balloc+0x7c>)
 8006ede:	2166      	movs	r1, #102	; 0x66
 8006ee0:	f000 fe2a 	bl	8007b38 <__assert_func>
 8006ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee8:	6006      	str	r6, [r0, #0]
 8006eea:	60c6      	str	r6, [r0, #12]
 8006eec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006eee:	68f3      	ldr	r3, [r6, #12]
 8006ef0:	b183      	cbz	r3, 8006f14 <_Balloc+0x50>
 8006ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006efa:	b9b8      	cbnz	r0, 8006f2c <_Balloc+0x68>
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f605 	lsl.w	r6, r1, r5
 8006f02:	1d72      	adds	r2, r6, #5
 8006f04:	0092      	lsls	r2, r2, #2
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 fb60 	bl	80075cc <_calloc_r>
 8006f0c:	b160      	cbz	r0, 8006f28 <_Balloc+0x64>
 8006f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f12:	e00e      	b.n	8006f32 <_Balloc+0x6e>
 8006f14:	2221      	movs	r2, #33	; 0x21
 8006f16:	2104      	movs	r1, #4
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fb57 	bl	80075cc <_calloc_r>
 8006f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f20:	60f0      	str	r0, [r6, #12]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e4      	bne.n	8006ef2 <_Balloc+0x2e>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	6802      	ldr	r2, [r0, #0]
 8006f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f32:	2300      	movs	r3, #0
 8006f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f38:	e7f7      	b.n	8006f2a <_Balloc+0x66>
 8006f3a:	bf00      	nop
 8006f3c:	08007e31 	.word	0x08007e31
 8006f40:	08007f14 	.word	0x08007f14

08006f44 <_Bfree>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	b976      	cbnz	r6, 8006f6c <_Bfree+0x28>
 8006f4e:	2010      	movs	r0, #16
 8006f50:	f7ff ffb0 	bl	8006eb4 <malloc>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6268      	str	r0, [r5, #36]	; 0x24
 8006f58:	b920      	cbnz	r0, 8006f64 <_Bfree+0x20>
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <_Bfree+0x3c>)
 8006f5c:	4809      	ldr	r0, [pc, #36]	; (8006f84 <_Bfree+0x40>)
 8006f5e:	218a      	movs	r1, #138	; 0x8a
 8006f60:	f000 fdea 	bl	8007b38 <__assert_func>
 8006f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f68:	6006      	str	r6, [r0, #0]
 8006f6a:	60c6      	str	r6, [r0, #12]
 8006f6c:	b13c      	cbz	r4, 8006f7e <_Bfree+0x3a>
 8006f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f70:	6862      	ldr	r2, [r4, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f78:	6021      	str	r1, [r4, #0]
 8006f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	08007e31 	.word	0x08007e31
 8006f84:	08007f14 	.word	0x08007f14

08006f88 <__multadd>:
 8006f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	690d      	ldr	r5, [r1, #16]
 8006f8e:	4607      	mov	r7, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	461e      	mov	r6, r3
 8006f94:	f101 0c14 	add.w	ip, r1, #20
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f9e:	b299      	uxth	r1, r3
 8006fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8006fa4:	0c1e      	lsrs	r6, r3, #16
 8006fa6:	0c0b      	lsrs	r3, r1, #16
 8006fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8006fac:	b289      	uxth	r1, r1
 8006fae:	3001      	adds	r0, #1
 8006fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fb4:	4285      	cmp	r5, r0
 8006fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8006fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fbe:	dcec      	bgt.n	8006f9a <__multadd+0x12>
 8006fc0:	b30e      	cbz	r6, 8007006 <__multadd+0x7e>
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dc19      	bgt.n	8006ffc <__multadd+0x74>
 8006fc8:	6861      	ldr	r1, [r4, #4]
 8006fca:	4638      	mov	r0, r7
 8006fcc:	3101      	adds	r1, #1
 8006fce:	f7ff ff79 	bl	8006ec4 <_Balloc>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	b928      	cbnz	r0, 8006fe2 <__multadd+0x5a>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b0c      	ldr	r3, [pc, #48]	; (800700c <__multadd+0x84>)
 8006fda:	480d      	ldr	r0, [pc, #52]	; (8007010 <__multadd+0x88>)
 8006fdc:	21b5      	movs	r1, #181	; 0xb5
 8006fde:	f000 fdab 	bl	8007b38 <__assert_func>
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	3202      	adds	r2, #2
 8006fe6:	f104 010c 	add.w	r1, r4, #12
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	300c      	adds	r0, #12
 8006fee:	f7fe f8f5 	bl	80051dc <memcpy>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ffa5 	bl	8006f44 <_Bfree>
 8006ffa:	4644      	mov	r4, r8
 8006ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007000:	3501      	adds	r5, #1
 8007002:	615e      	str	r6, [r3, #20]
 8007004:	6125      	str	r5, [r4, #16]
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	08007ea3 	.word	0x08007ea3
 8007010:	08007f14 	.word	0x08007f14

08007014 <__hi0bits>:
 8007014:	0c03      	lsrs	r3, r0, #16
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	b9d3      	cbnz	r3, 8007050 <__hi0bits+0x3c>
 800701a:	0400      	lsls	r0, r0, #16
 800701c:	2310      	movs	r3, #16
 800701e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007022:	bf04      	itt	eq
 8007024:	0200      	lsleq	r0, r0, #8
 8007026:	3308      	addeq	r3, #8
 8007028:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800702c:	bf04      	itt	eq
 800702e:	0100      	lsleq	r0, r0, #4
 8007030:	3304      	addeq	r3, #4
 8007032:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007036:	bf04      	itt	eq
 8007038:	0080      	lsleq	r0, r0, #2
 800703a:	3302      	addeq	r3, #2
 800703c:	2800      	cmp	r0, #0
 800703e:	db05      	blt.n	800704c <__hi0bits+0x38>
 8007040:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007044:	f103 0301 	add.w	r3, r3, #1
 8007048:	bf08      	it	eq
 800704a:	2320      	moveq	r3, #32
 800704c:	4618      	mov	r0, r3
 800704e:	4770      	bx	lr
 8007050:	2300      	movs	r3, #0
 8007052:	e7e4      	b.n	800701e <__hi0bits+0xa>

08007054 <__lo0bits>:
 8007054:	6803      	ldr	r3, [r0, #0]
 8007056:	f013 0207 	ands.w	r2, r3, #7
 800705a:	4601      	mov	r1, r0
 800705c:	d00b      	beq.n	8007076 <__lo0bits+0x22>
 800705e:	07da      	lsls	r2, r3, #31
 8007060:	d423      	bmi.n	80070aa <__lo0bits+0x56>
 8007062:	0798      	lsls	r0, r3, #30
 8007064:	bf49      	itett	mi
 8007066:	085b      	lsrmi	r3, r3, #1
 8007068:	089b      	lsrpl	r3, r3, #2
 800706a:	2001      	movmi	r0, #1
 800706c:	600b      	strmi	r3, [r1, #0]
 800706e:	bf5c      	itt	pl
 8007070:	600b      	strpl	r3, [r1, #0]
 8007072:	2002      	movpl	r0, #2
 8007074:	4770      	bx	lr
 8007076:	b298      	uxth	r0, r3
 8007078:	b9a8      	cbnz	r0, 80070a6 <__lo0bits+0x52>
 800707a:	0c1b      	lsrs	r3, r3, #16
 800707c:	2010      	movs	r0, #16
 800707e:	b2da      	uxtb	r2, r3
 8007080:	b90a      	cbnz	r2, 8007086 <__lo0bits+0x32>
 8007082:	3008      	adds	r0, #8
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	071a      	lsls	r2, r3, #28
 8007088:	bf04      	itt	eq
 800708a:	091b      	lsreq	r3, r3, #4
 800708c:	3004      	addeq	r0, #4
 800708e:	079a      	lsls	r2, r3, #30
 8007090:	bf04      	itt	eq
 8007092:	089b      	lsreq	r3, r3, #2
 8007094:	3002      	addeq	r0, #2
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d403      	bmi.n	80070a2 <__lo0bits+0x4e>
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f100 0001 	add.w	r0, r0, #1
 80070a0:	d005      	beq.n	80070ae <__lo0bits+0x5a>
 80070a2:	600b      	str	r3, [r1, #0]
 80070a4:	4770      	bx	lr
 80070a6:	4610      	mov	r0, r2
 80070a8:	e7e9      	b.n	800707e <__lo0bits+0x2a>
 80070aa:	2000      	movs	r0, #0
 80070ac:	4770      	bx	lr
 80070ae:	2020      	movs	r0, #32
 80070b0:	4770      	bx	lr
	...

080070b4 <__i2b>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	460c      	mov	r4, r1
 80070b8:	2101      	movs	r1, #1
 80070ba:	f7ff ff03 	bl	8006ec4 <_Balloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	b928      	cbnz	r0, 80070ce <__i2b+0x1a>
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <__i2b+0x24>)
 80070c4:	4805      	ldr	r0, [pc, #20]	; (80070dc <__i2b+0x28>)
 80070c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070ca:	f000 fd35 	bl	8007b38 <__assert_func>
 80070ce:	2301      	movs	r3, #1
 80070d0:	6144      	str	r4, [r0, #20]
 80070d2:	6103      	str	r3, [r0, #16]
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	bf00      	nop
 80070d8:	08007ea3 	.word	0x08007ea3
 80070dc:	08007f14 	.word	0x08007f14

080070e0 <__multiply>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	4691      	mov	r9, r2
 80070e6:	690a      	ldr	r2, [r1, #16]
 80070e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfb8      	it	lt
 80070f0:	460b      	movlt	r3, r1
 80070f2:	460c      	mov	r4, r1
 80070f4:	bfbc      	itt	lt
 80070f6:	464c      	movlt	r4, r9
 80070f8:	4699      	movlt	r9, r3
 80070fa:	6927      	ldr	r7, [r4, #16]
 80070fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007100:	68a3      	ldr	r3, [r4, #8]
 8007102:	6861      	ldr	r1, [r4, #4]
 8007104:	eb07 060a 	add.w	r6, r7, sl
 8007108:	42b3      	cmp	r3, r6
 800710a:	b085      	sub	sp, #20
 800710c:	bfb8      	it	lt
 800710e:	3101      	addlt	r1, #1
 8007110:	f7ff fed8 	bl	8006ec4 <_Balloc>
 8007114:	b930      	cbnz	r0, 8007124 <__multiply+0x44>
 8007116:	4602      	mov	r2, r0
 8007118:	4b44      	ldr	r3, [pc, #272]	; (800722c <__multiply+0x14c>)
 800711a:	4845      	ldr	r0, [pc, #276]	; (8007230 <__multiply+0x150>)
 800711c:	f240 115d 	movw	r1, #349	; 0x15d
 8007120:	f000 fd0a 	bl	8007b38 <__assert_func>
 8007124:	f100 0514 	add.w	r5, r0, #20
 8007128:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800712c:	462b      	mov	r3, r5
 800712e:	2200      	movs	r2, #0
 8007130:	4543      	cmp	r3, r8
 8007132:	d321      	bcc.n	8007178 <__multiply+0x98>
 8007134:	f104 0314 	add.w	r3, r4, #20
 8007138:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800713c:	f109 0314 	add.w	r3, r9, #20
 8007140:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007144:	9202      	str	r2, [sp, #8]
 8007146:	1b3a      	subs	r2, r7, r4
 8007148:	3a15      	subs	r2, #21
 800714a:	f022 0203 	bic.w	r2, r2, #3
 800714e:	3204      	adds	r2, #4
 8007150:	f104 0115 	add.w	r1, r4, #21
 8007154:	428f      	cmp	r7, r1
 8007156:	bf38      	it	cc
 8007158:	2204      	movcc	r2, #4
 800715a:	9201      	str	r2, [sp, #4]
 800715c:	9a02      	ldr	r2, [sp, #8]
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d80c      	bhi.n	800717e <__multiply+0x9e>
 8007164:	2e00      	cmp	r6, #0
 8007166:	dd03      	ble.n	8007170 <__multiply+0x90>
 8007168:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800716c:	2b00      	cmp	r3, #0
 800716e:	d05a      	beq.n	8007226 <__multiply+0x146>
 8007170:	6106      	str	r6, [r0, #16]
 8007172:	b005      	add	sp, #20
 8007174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007178:	f843 2b04 	str.w	r2, [r3], #4
 800717c:	e7d8      	b.n	8007130 <__multiply+0x50>
 800717e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007182:	f1ba 0f00 	cmp.w	sl, #0
 8007186:	d024      	beq.n	80071d2 <__multiply+0xf2>
 8007188:	f104 0e14 	add.w	lr, r4, #20
 800718c:	46a9      	mov	r9, r5
 800718e:	f04f 0c00 	mov.w	ip, #0
 8007192:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007196:	f8d9 1000 	ldr.w	r1, [r9]
 800719a:	fa1f fb82 	uxth.w	fp, r2
 800719e:	b289      	uxth	r1, r1
 80071a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80071a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071a8:	f8d9 2000 	ldr.w	r2, [r9]
 80071ac:	4461      	add	r1, ip
 80071ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80071b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ba:	b289      	uxth	r1, r1
 80071bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071c0:	4577      	cmp	r7, lr
 80071c2:	f849 1b04 	str.w	r1, [r9], #4
 80071c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071ca:	d8e2      	bhi.n	8007192 <__multiply+0xb2>
 80071cc:	9a01      	ldr	r2, [sp, #4]
 80071ce:	f845 c002 	str.w	ip, [r5, r2]
 80071d2:	9a03      	ldr	r2, [sp, #12]
 80071d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071d8:	3304      	adds	r3, #4
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	d020      	beq.n	8007222 <__multiply+0x142>
 80071e0:	6829      	ldr	r1, [r5, #0]
 80071e2:	f104 0c14 	add.w	ip, r4, #20
 80071e6:	46ae      	mov	lr, r5
 80071e8:	f04f 0a00 	mov.w	sl, #0
 80071ec:	f8bc b000 	ldrh.w	fp, [ip]
 80071f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071f4:	fb09 220b 	mla	r2, r9, fp, r2
 80071f8:	4492      	add	sl, r2
 80071fa:	b289      	uxth	r1, r1
 80071fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007200:	f84e 1b04 	str.w	r1, [lr], #4
 8007204:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007208:	f8be 1000 	ldrh.w	r1, [lr]
 800720c:	0c12      	lsrs	r2, r2, #16
 800720e:	fb09 1102 	mla	r1, r9, r2, r1
 8007212:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007216:	4567      	cmp	r7, ip
 8007218:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800721c:	d8e6      	bhi.n	80071ec <__multiply+0x10c>
 800721e:	9a01      	ldr	r2, [sp, #4]
 8007220:	50a9      	str	r1, [r5, r2]
 8007222:	3504      	adds	r5, #4
 8007224:	e79a      	b.n	800715c <__multiply+0x7c>
 8007226:	3e01      	subs	r6, #1
 8007228:	e79c      	b.n	8007164 <__multiply+0x84>
 800722a:	bf00      	nop
 800722c:	08007ea3 	.word	0x08007ea3
 8007230:	08007f14 	.word	0x08007f14

08007234 <__pow5mult>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4615      	mov	r5, r2
 800723a:	f012 0203 	ands.w	r2, r2, #3
 800723e:	4606      	mov	r6, r0
 8007240:	460f      	mov	r7, r1
 8007242:	d007      	beq.n	8007254 <__pow5mult+0x20>
 8007244:	4c25      	ldr	r4, [pc, #148]	; (80072dc <__pow5mult+0xa8>)
 8007246:	3a01      	subs	r2, #1
 8007248:	2300      	movs	r3, #0
 800724a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800724e:	f7ff fe9b 	bl	8006f88 <__multadd>
 8007252:	4607      	mov	r7, r0
 8007254:	10ad      	asrs	r5, r5, #2
 8007256:	d03d      	beq.n	80072d4 <__pow5mult+0xa0>
 8007258:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800725a:	b97c      	cbnz	r4, 800727c <__pow5mult+0x48>
 800725c:	2010      	movs	r0, #16
 800725e:	f7ff fe29 	bl	8006eb4 <malloc>
 8007262:	4602      	mov	r2, r0
 8007264:	6270      	str	r0, [r6, #36]	; 0x24
 8007266:	b928      	cbnz	r0, 8007274 <__pow5mult+0x40>
 8007268:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <__pow5mult+0xac>)
 800726a:	481e      	ldr	r0, [pc, #120]	; (80072e4 <__pow5mult+0xb0>)
 800726c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007270:	f000 fc62 	bl	8007b38 <__assert_func>
 8007274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007278:	6004      	str	r4, [r0, #0]
 800727a:	60c4      	str	r4, [r0, #12]
 800727c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007284:	b94c      	cbnz	r4, 800729a <__pow5mult+0x66>
 8007286:	f240 2171 	movw	r1, #625	; 0x271
 800728a:	4630      	mov	r0, r6
 800728c:	f7ff ff12 	bl	80070b4 <__i2b>
 8007290:	2300      	movs	r3, #0
 8007292:	f8c8 0008 	str.w	r0, [r8, #8]
 8007296:	4604      	mov	r4, r0
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	f04f 0900 	mov.w	r9, #0
 800729e:	07eb      	lsls	r3, r5, #31
 80072a0:	d50a      	bpl.n	80072b8 <__pow5mult+0x84>
 80072a2:	4639      	mov	r1, r7
 80072a4:	4622      	mov	r2, r4
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff1a 	bl	80070e0 <__multiply>
 80072ac:	4639      	mov	r1, r7
 80072ae:	4680      	mov	r8, r0
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7ff fe47 	bl	8006f44 <_Bfree>
 80072b6:	4647      	mov	r7, r8
 80072b8:	106d      	asrs	r5, r5, #1
 80072ba:	d00b      	beq.n	80072d4 <__pow5mult+0xa0>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	b938      	cbnz	r0, 80072d0 <__pow5mult+0x9c>
 80072c0:	4622      	mov	r2, r4
 80072c2:	4621      	mov	r1, r4
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff ff0b 	bl	80070e0 <__multiply>
 80072ca:	6020      	str	r0, [r4, #0]
 80072cc:	f8c0 9000 	str.w	r9, [r0]
 80072d0:	4604      	mov	r4, r0
 80072d2:	e7e4      	b.n	800729e <__pow5mult+0x6a>
 80072d4:	4638      	mov	r0, r7
 80072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072da:	bf00      	nop
 80072dc:	08008060 	.word	0x08008060
 80072e0:	08007e31 	.word	0x08007e31
 80072e4:	08007f14 	.word	0x08007f14

080072e8 <__lshift>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	460c      	mov	r4, r1
 80072ee:	6849      	ldr	r1, [r1, #4]
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	4607      	mov	r7, r0
 80072fa:	4691      	mov	r9, r2
 80072fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007300:	f108 0601 	add.w	r6, r8, #1
 8007304:	42b3      	cmp	r3, r6
 8007306:	db0b      	blt.n	8007320 <__lshift+0x38>
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff fddb 	bl	8006ec4 <_Balloc>
 800730e:	4605      	mov	r5, r0
 8007310:	b948      	cbnz	r0, 8007326 <__lshift+0x3e>
 8007312:	4602      	mov	r2, r0
 8007314:	4b2a      	ldr	r3, [pc, #168]	; (80073c0 <__lshift+0xd8>)
 8007316:	482b      	ldr	r0, [pc, #172]	; (80073c4 <__lshift+0xdc>)
 8007318:	f240 11d9 	movw	r1, #473	; 0x1d9
 800731c:	f000 fc0c 	bl	8007b38 <__assert_func>
 8007320:	3101      	adds	r1, #1
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	e7ee      	b.n	8007304 <__lshift+0x1c>
 8007326:	2300      	movs	r3, #0
 8007328:	f100 0114 	add.w	r1, r0, #20
 800732c:	f100 0210 	add.w	r2, r0, #16
 8007330:	4618      	mov	r0, r3
 8007332:	4553      	cmp	r3, sl
 8007334:	db37      	blt.n	80073a6 <__lshift+0xbe>
 8007336:	6920      	ldr	r0, [r4, #16]
 8007338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800733c:	f104 0314 	add.w	r3, r4, #20
 8007340:	f019 091f 	ands.w	r9, r9, #31
 8007344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007348:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800734c:	d02f      	beq.n	80073ae <__lshift+0xc6>
 800734e:	f1c9 0e20 	rsb	lr, r9, #32
 8007352:	468a      	mov	sl, r1
 8007354:	f04f 0c00 	mov.w	ip, #0
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	fa02 f209 	lsl.w	r2, r2, r9
 800735e:	ea42 020c 	orr.w	r2, r2, ip
 8007362:	f84a 2b04 	str.w	r2, [sl], #4
 8007366:	f853 2b04 	ldr.w	r2, [r3], #4
 800736a:	4298      	cmp	r0, r3
 800736c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007370:	d8f2      	bhi.n	8007358 <__lshift+0x70>
 8007372:	1b03      	subs	r3, r0, r4
 8007374:	3b15      	subs	r3, #21
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	3304      	adds	r3, #4
 800737c:	f104 0215 	add.w	r2, r4, #21
 8007380:	4290      	cmp	r0, r2
 8007382:	bf38      	it	cc
 8007384:	2304      	movcc	r3, #4
 8007386:	f841 c003 	str.w	ip, [r1, r3]
 800738a:	f1bc 0f00 	cmp.w	ip, #0
 800738e:	d001      	beq.n	8007394 <__lshift+0xac>
 8007390:	f108 0602 	add.w	r6, r8, #2
 8007394:	3e01      	subs	r6, #1
 8007396:	4638      	mov	r0, r7
 8007398:	612e      	str	r6, [r5, #16]
 800739a:	4621      	mov	r1, r4
 800739c:	f7ff fdd2 	bl	8006f44 <_Bfree>
 80073a0:	4628      	mov	r0, r5
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073aa:	3301      	adds	r3, #1
 80073ac:	e7c1      	b.n	8007332 <__lshift+0x4a>
 80073ae:	3904      	subs	r1, #4
 80073b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073b8:	4298      	cmp	r0, r3
 80073ba:	d8f9      	bhi.n	80073b0 <__lshift+0xc8>
 80073bc:	e7ea      	b.n	8007394 <__lshift+0xac>
 80073be:	bf00      	nop
 80073c0:	08007ea3 	.word	0x08007ea3
 80073c4:	08007f14 	.word	0x08007f14

080073c8 <__mcmp>:
 80073c8:	b530      	push	{r4, r5, lr}
 80073ca:	6902      	ldr	r2, [r0, #16]
 80073cc:	690c      	ldr	r4, [r1, #16]
 80073ce:	1b12      	subs	r2, r2, r4
 80073d0:	d10e      	bne.n	80073f0 <__mcmp+0x28>
 80073d2:	f100 0314 	add.w	r3, r0, #20
 80073d6:	3114      	adds	r1, #20
 80073d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	d003      	beq.n	80073f4 <__mcmp+0x2c>
 80073ec:	d305      	bcc.n	80073fa <__mcmp+0x32>
 80073ee:	2201      	movs	r2, #1
 80073f0:	4610      	mov	r0, r2
 80073f2:	bd30      	pop	{r4, r5, pc}
 80073f4:	4283      	cmp	r3, r0
 80073f6:	d3f3      	bcc.n	80073e0 <__mcmp+0x18>
 80073f8:	e7fa      	b.n	80073f0 <__mcmp+0x28>
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073fe:	e7f7      	b.n	80073f0 <__mcmp+0x28>

08007400 <__mdiff>:
 8007400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	4606      	mov	r6, r0
 8007408:	4611      	mov	r1, r2
 800740a:	4620      	mov	r0, r4
 800740c:	4690      	mov	r8, r2
 800740e:	f7ff ffdb 	bl	80073c8 <__mcmp>
 8007412:	1e05      	subs	r5, r0, #0
 8007414:	d110      	bne.n	8007438 <__mdiff+0x38>
 8007416:	4629      	mov	r1, r5
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff fd53 	bl	8006ec4 <_Balloc>
 800741e:	b930      	cbnz	r0, 800742e <__mdiff+0x2e>
 8007420:	4b3a      	ldr	r3, [pc, #232]	; (800750c <__mdiff+0x10c>)
 8007422:	4602      	mov	r2, r0
 8007424:	f240 2132 	movw	r1, #562	; 0x232
 8007428:	4839      	ldr	r0, [pc, #228]	; (8007510 <__mdiff+0x110>)
 800742a:	f000 fb85 	bl	8007b38 <__assert_func>
 800742e:	2301      	movs	r3, #1
 8007430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007438:	bfa4      	itt	ge
 800743a:	4643      	movge	r3, r8
 800743c:	46a0      	movge	r8, r4
 800743e:	4630      	mov	r0, r6
 8007440:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007444:	bfa6      	itte	ge
 8007446:	461c      	movge	r4, r3
 8007448:	2500      	movge	r5, #0
 800744a:	2501      	movlt	r5, #1
 800744c:	f7ff fd3a 	bl	8006ec4 <_Balloc>
 8007450:	b920      	cbnz	r0, 800745c <__mdiff+0x5c>
 8007452:	4b2e      	ldr	r3, [pc, #184]	; (800750c <__mdiff+0x10c>)
 8007454:	4602      	mov	r2, r0
 8007456:	f44f 7110 	mov.w	r1, #576	; 0x240
 800745a:	e7e5      	b.n	8007428 <__mdiff+0x28>
 800745c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007460:	6926      	ldr	r6, [r4, #16]
 8007462:	60c5      	str	r5, [r0, #12]
 8007464:	f104 0914 	add.w	r9, r4, #20
 8007468:	f108 0514 	add.w	r5, r8, #20
 800746c:	f100 0e14 	add.w	lr, r0, #20
 8007470:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007478:	f108 0210 	add.w	r2, r8, #16
 800747c:	46f2      	mov	sl, lr
 800747e:	2100      	movs	r1, #0
 8007480:	f859 3b04 	ldr.w	r3, [r9], #4
 8007484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007488:	fa1f f883 	uxth.w	r8, r3
 800748c:	fa11 f18b 	uxtah	r1, r1, fp
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	eba1 0808 	sub.w	r8, r1, r8
 8007496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800749a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800749e:	fa1f f888 	uxth.w	r8, r8
 80074a2:	1419      	asrs	r1, r3, #16
 80074a4:	454e      	cmp	r6, r9
 80074a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074aa:	f84a 3b04 	str.w	r3, [sl], #4
 80074ae:	d8e7      	bhi.n	8007480 <__mdiff+0x80>
 80074b0:	1b33      	subs	r3, r6, r4
 80074b2:	3b15      	subs	r3, #21
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	3304      	adds	r3, #4
 80074ba:	3415      	adds	r4, #21
 80074bc:	42a6      	cmp	r6, r4
 80074be:	bf38      	it	cc
 80074c0:	2304      	movcc	r3, #4
 80074c2:	441d      	add	r5, r3
 80074c4:	4473      	add	r3, lr
 80074c6:	469e      	mov	lr, r3
 80074c8:	462e      	mov	r6, r5
 80074ca:	4566      	cmp	r6, ip
 80074cc:	d30e      	bcc.n	80074ec <__mdiff+0xec>
 80074ce:	f10c 0203 	add.w	r2, ip, #3
 80074d2:	1b52      	subs	r2, r2, r5
 80074d4:	f022 0203 	bic.w	r2, r2, #3
 80074d8:	3d03      	subs	r5, #3
 80074da:	45ac      	cmp	ip, r5
 80074dc:	bf38      	it	cc
 80074de:	2200      	movcc	r2, #0
 80074e0:	441a      	add	r2, r3
 80074e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074e6:	b17b      	cbz	r3, 8007508 <__mdiff+0x108>
 80074e8:	6107      	str	r7, [r0, #16]
 80074ea:	e7a3      	b.n	8007434 <__mdiff+0x34>
 80074ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80074f0:	fa11 f288 	uxtah	r2, r1, r8
 80074f4:	1414      	asrs	r4, r2, #16
 80074f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074fa:	b292      	uxth	r2, r2
 80074fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007500:	f84e 2b04 	str.w	r2, [lr], #4
 8007504:	1421      	asrs	r1, r4, #16
 8007506:	e7e0      	b.n	80074ca <__mdiff+0xca>
 8007508:	3f01      	subs	r7, #1
 800750a:	e7ea      	b.n	80074e2 <__mdiff+0xe2>
 800750c:	08007ea3 	.word	0x08007ea3
 8007510:	08007f14 	.word	0x08007f14

08007514 <__d2b>:
 8007514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007518:	4689      	mov	r9, r1
 800751a:	2101      	movs	r1, #1
 800751c:	ec57 6b10 	vmov	r6, r7, d0
 8007520:	4690      	mov	r8, r2
 8007522:	f7ff fccf 	bl	8006ec4 <_Balloc>
 8007526:	4604      	mov	r4, r0
 8007528:	b930      	cbnz	r0, 8007538 <__d2b+0x24>
 800752a:	4602      	mov	r2, r0
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <__d2b+0xb0>)
 800752e:	4826      	ldr	r0, [pc, #152]	; (80075c8 <__d2b+0xb4>)
 8007530:	f240 310a 	movw	r1, #778	; 0x30a
 8007534:	f000 fb00 	bl	8007b38 <__assert_func>
 8007538:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800753c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007540:	bb35      	cbnz	r5, 8007590 <__d2b+0x7c>
 8007542:	2e00      	cmp	r6, #0
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	d028      	beq.n	800759a <__d2b+0x86>
 8007548:	4668      	mov	r0, sp
 800754a:	9600      	str	r6, [sp, #0]
 800754c:	f7ff fd82 	bl	8007054 <__lo0bits>
 8007550:	9900      	ldr	r1, [sp, #0]
 8007552:	b300      	cbz	r0, 8007596 <__d2b+0x82>
 8007554:	9a01      	ldr	r2, [sp, #4]
 8007556:	f1c0 0320 	rsb	r3, r0, #32
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	430b      	orrs	r3, r1
 8007560:	40c2      	lsrs	r2, r0
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	61a3      	str	r3, [r4, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2202      	movne	r2, #2
 8007570:	2201      	moveq	r2, #1
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	b1d5      	cbz	r5, 80075ac <__d2b+0x98>
 8007576:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800757a:	4405      	add	r5, r0
 800757c:	f8c9 5000 	str.w	r5, [r9]
 8007580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007584:	f8c8 0000 	str.w	r0, [r8]
 8007588:	4620      	mov	r0, r4
 800758a:	b003      	add	sp, #12
 800758c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007594:	e7d5      	b.n	8007542 <__d2b+0x2e>
 8007596:	6161      	str	r1, [r4, #20]
 8007598:	e7e5      	b.n	8007566 <__d2b+0x52>
 800759a:	a801      	add	r0, sp, #4
 800759c:	f7ff fd5a 	bl	8007054 <__lo0bits>
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	6163      	str	r3, [r4, #20]
 80075a4:	2201      	movs	r2, #1
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	3020      	adds	r0, #32
 80075aa:	e7e3      	b.n	8007574 <__d2b+0x60>
 80075ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075b4:	f8c9 0000 	str.w	r0, [r9]
 80075b8:	6918      	ldr	r0, [r3, #16]
 80075ba:	f7ff fd2b 	bl	8007014 <__hi0bits>
 80075be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075c2:	e7df      	b.n	8007584 <__d2b+0x70>
 80075c4:	08007ea3 	.word	0x08007ea3
 80075c8:	08007f14 	.word	0x08007f14

080075cc <_calloc_r>:
 80075cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ce:	fba1 2402 	umull	r2, r4, r1, r2
 80075d2:	b94c      	cbnz	r4, 80075e8 <_calloc_r+0x1c>
 80075d4:	4611      	mov	r1, r2
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	f000 f87a 	bl	80076d0 <_malloc_r>
 80075dc:	9a01      	ldr	r2, [sp, #4]
 80075de:	4605      	mov	r5, r0
 80075e0:	b930      	cbnz	r0, 80075f0 <_calloc_r+0x24>
 80075e2:	4628      	mov	r0, r5
 80075e4:	b003      	add	sp, #12
 80075e6:	bd30      	pop	{r4, r5, pc}
 80075e8:	220c      	movs	r2, #12
 80075ea:	6002      	str	r2, [r0, #0]
 80075ec:	2500      	movs	r5, #0
 80075ee:	e7f8      	b.n	80075e2 <_calloc_r+0x16>
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7fd fe01 	bl	80051f8 <memset>
 80075f6:	e7f4      	b.n	80075e2 <_calloc_r+0x16>

080075f8 <_free_r>:
 80075f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d044      	beq.n	8007688 <_free_r+0x90>
 80075fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007602:	9001      	str	r0, [sp, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f1a1 0404 	sub.w	r4, r1, #4
 800760a:	bfb8      	it	lt
 800760c:	18e4      	addlt	r4, r4, r3
 800760e:	f000 fb19 	bl	8007c44 <__malloc_lock>
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <_free_r+0x94>)
 8007614:	9801      	ldr	r0, [sp, #4]
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	b933      	cbnz	r3, 8007628 <_free_r+0x30>
 800761a:	6063      	str	r3, [r4, #4]
 800761c:	6014      	str	r4, [r2, #0]
 800761e:	b003      	add	sp, #12
 8007620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007624:	f000 bb14 	b.w	8007c50 <__malloc_unlock>
 8007628:	42a3      	cmp	r3, r4
 800762a:	d908      	bls.n	800763e <_free_r+0x46>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf01      	itttt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	1949      	addeq	r1, r1, r5
 800763a:	6021      	streq	r1, [r4, #0]
 800763c:	e7ed      	b.n	800761a <_free_r+0x22>
 800763e:	461a      	mov	r2, r3
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	b10b      	cbz	r3, 8007648 <_free_r+0x50>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d9fa      	bls.n	800763e <_free_r+0x46>
 8007648:	6811      	ldr	r1, [r2, #0]
 800764a:	1855      	adds	r5, r2, r1
 800764c:	42a5      	cmp	r5, r4
 800764e:	d10b      	bne.n	8007668 <_free_r+0x70>
 8007650:	6824      	ldr	r4, [r4, #0]
 8007652:	4421      	add	r1, r4
 8007654:	1854      	adds	r4, r2, r1
 8007656:	42a3      	cmp	r3, r4
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	d1e0      	bne.n	800761e <_free_r+0x26>
 800765c:	681c      	ldr	r4, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	6053      	str	r3, [r2, #4]
 8007662:	4421      	add	r1, r4
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	e7da      	b.n	800761e <_free_r+0x26>
 8007668:	d902      	bls.n	8007670 <_free_r+0x78>
 800766a:	230c      	movs	r3, #12
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	e7d6      	b.n	800761e <_free_r+0x26>
 8007670:	6825      	ldr	r5, [r4, #0]
 8007672:	1961      	adds	r1, r4, r5
 8007674:	428b      	cmp	r3, r1
 8007676:	bf04      	itt	eq
 8007678:	6819      	ldreq	r1, [r3, #0]
 800767a:	685b      	ldreq	r3, [r3, #4]
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	bf04      	itt	eq
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	6054      	str	r4, [r2, #4]
 8007686:	e7ca      	b.n	800761e <_free_r+0x26>
 8007688:	b003      	add	sp, #12
 800768a:	bd30      	pop	{r4, r5, pc}
 800768c:	200007c8 	.word	0x200007c8

08007690 <sbrk_aligned>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4e0e      	ldr	r6, [pc, #56]	; (80076cc <sbrk_aligned+0x3c>)
 8007694:	460c      	mov	r4, r1
 8007696:	6831      	ldr	r1, [r6, #0]
 8007698:	4605      	mov	r5, r0
 800769a:	b911      	cbnz	r1, 80076a2 <sbrk_aligned+0x12>
 800769c:	f000 f9e6 	bl	8007a6c <_sbrk_r>
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 f9e1 	bl	8007a6c <_sbrk_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d00a      	beq.n	80076c4 <sbrk_aligned+0x34>
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d007      	beq.n	80076c8 <sbrk_aligned+0x38>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 f9d6 	bl	8007a6c <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d101      	bne.n	80076c8 <sbrk_aligned+0x38>
 80076c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076c8:	4620      	mov	r0, r4
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	200007cc 	.word	0x200007cc

080076d0 <_malloc_r>:
 80076d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4607      	mov	r7, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d905      	bls.n	80076f8 <_malloc_r+0x28>
 80076ec:	230c      	movs	r3, #12
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	2600      	movs	r6, #0
 80076f2:	4630      	mov	r0, r6
 80076f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f8:	4e2e      	ldr	r6, [pc, #184]	; (80077b4 <_malloc_r+0xe4>)
 80076fa:	f000 faa3 	bl	8007c44 <__malloc_lock>
 80076fe:	6833      	ldr	r3, [r6, #0]
 8007700:	461c      	mov	r4, r3
 8007702:	bb34      	cbnz	r4, 8007752 <_malloc_r+0x82>
 8007704:	4629      	mov	r1, r5
 8007706:	4638      	mov	r0, r7
 8007708:	f7ff ffc2 	bl	8007690 <sbrk_aligned>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	4604      	mov	r4, r0
 8007710:	d14d      	bne.n	80077ae <_malloc_r+0xde>
 8007712:	6834      	ldr	r4, [r6, #0]
 8007714:	4626      	mov	r6, r4
 8007716:	2e00      	cmp	r6, #0
 8007718:	d140      	bne.n	800779c <_malloc_r+0xcc>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4631      	mov	r1, r6
 800771e:	4638      	mov	r0, r7
 8007720:	eb04 0803 	add.w	r8, r4, r3
 8007724:	f000 f9a2 	bl	8007a6c <_sbrk_r>
 8007728:	4580      	cmp	r8, r0
 800772a:	d13a      	bne.n	80077a2 <_malloc_r+0xd2>
 800772c:	6821      	ldr	r1, [r4, #0]
 800772e:	3503      	adds	r5, #3
 8007730:	1a6d      	subs	r5, r5, r1
 8007732:	f025 0503 	bic.w	r5, r5, #3
 8007736:	3508      	adds	r5, #8
 8007738:	2d0c      	cmp	r5, #12
 800773a:	bf38      	it	cc
 800773c:	250c      	movcc	r5, #12
 800773e:	4629      	mov	r1, r5
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff ffa5 	bl	8007690 <sbrk_aligned>
 8007746:	3001      	adds	r0, #1
 8007748:	d02b      	beq.n	80077a2 <_malloc_r+0xd2>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	442b      	add	r3, r5
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	e00e      	b.n	8007770 <_malloc_r+0xa0>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	1b52      	subs	r2, r2, r5
 8007756:	d41e      	bmi.n	8007796 <_malloc_r+0xc6>
 8007758:	2a0b      	cmp	r2, #11
 800775a:	d916      	bls.n	800778a <_malloc_r+0xba>
 800775c:	1961      	adds	r1, r4, r5
 800775e:	42a3      	cmp	r3, r4
 8007760:	6025      	str	r5, [r4, #0]
 8007762:	bf18      	it	ne
 8007764:	6059      	strne	r1, [r3, #4]
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	bf08      	it	eq
 800776a:	6031      	streq	r1, [r6, #0]
 800776c:	5162      	str	r2, [r4, r5]
 800776e:	604b      	str	r3, [r1, #4]
 8007770:	4638      	mov	r0, r7
 8007772:	f104 060b 	add.w	r6, r4, #11
 8007776:	f000 fa6b 	bl	8007c50 <__malloc_unlock>
 800777a:	f026 0607 	bic.w	r6, r6, #7
 800777e:	1d23      	adds	r3, r4, #4
 8007780:	1af2      	subs	r2, r6, r3
 8007782:	d0b6      	beq.n	80076f2 <_malloc_r+0x22>
 8007784:	1b9b      	subs	r3, r3, r6
 8007786:	50a3      	str	r3, [r4, r2]
 8007788:	e7b3      	b.n	80076f2 <_malloc_r+0x22>
 800778a:	6862      	ldr	r2, [r4, #4]
 800778c:	42a3      	cmp	r3, r4
 800778e:	bf0c      	ite	eq
 8007790:	6032      	streq	r2, [r6, #0]
 8007792:	605a      	strne	r2, [r3, #4]
 8007794:	e7ec      	b.n	8007770 <_malloc_r+0xa0>
 8007796:	4623      	mov	r3, r4
 8007798:	6864      	ldr	r4, [r4, #4]
 800779a:	e7b2      	b.n	8007702 <_malloc_r+0x32>
 800779c:	4634      	mov	r4, r6
 800779e:	6876      	ldr	r6, [r6, #4]
 80077a0:	e7b9      	b.n	8007716 <_malloc_r+0x46>
 80077a2:	230c      	movs	r3, #12
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4638      	mov	r0, r7
 80077a8:	f000 fa52 	bl	8007c50 <__malloc_unlock>
 80077ac:	e7a1      	b.n	80076f2 <_malloc_r+0x22>
 80077ae:	6025      	str	r5, [r4, #0]
 80077b0:	e7de      	b.n	8007770 <_malloc_r+0xa0>
 80077b2:	bf00      	nop
 80077b4:	200007c8 	.word	0x200007c8

080077b8 <__sfputc_r>:
 80077b8:	6893      	ldr	r3, [r2, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	b410      	push	{r4}
 80077c0:	6093      	str	r3, [r2, #8]
 80077c2:	da08      	bge.n	80077d6 <__sfputc_r+0x1e>
 80077c4:	6994      	ldr	r4, [r2, #24]
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	db01      	blt.n	80077ce <__sfputc_r+0x16>
 80077ca:	290a      	cmp	r1, #10
 80077cc:	d103      	bne.n	80077d6 <__sfputc_r+0x1e>
 80077ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d2:	f7fe ba11 	b.w	8005bf8 <__swbuf_r>
 80077d6:	6813      	ldr	r3, [r2, #0]
 80077d8:	1c58      	adds	r0, r3, #1
 80077da:	6010      	str	r0, [r2, #0]
 80077dc:	7019      	strb	r1, [r3, #0]
 80077de:	4608      	mov	r0, r1
 80077e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <__sfputs_r>:
 80077e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e8:	4606      	mov	r6, r0
 80077ea:	460f      	mov	r7, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	18d5      	adds	r5, r2, r3
 80077f0:	42ac      	cmp	r4, r5
 80077f2:	d101      	bne.n	80077f8 <__sfputs_r+0x12>
 80077f4:	2000      	movs	r0, #0
 80077f6:	e007      	b.n	8007808 <__sfputs_r+0x22>
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	463a      	mov	r2, r7
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ffda 	bl	80077b8 <__sfputc_r>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d1f3      	bne.n	80077f0 <__sfputs_r+0xa>
 8007808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800780c <_vfiprintf_r>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	460d      	mov	r5, r1
 8007812:	b09d      	sub	sp, #116	; 0x74
 8007814:	4614      	mov	r4, r2
 8007816:	4698      	mov	r8, r3
 8007818:	4606      	mov	r6, r0
 800781a:	b118      	cbz	r0, 8007824 <_vfiprintf_r+0x18>
 800781c:	6983      	ldr	r3, [r0, #24]
 800781e:	b90b      	cbnz	r3, 8007824 <_vfiprintf_r+0x18>
 8007820:	f7ff fa3e 	bl	8006ca0 <__sinit>
 8007824:	4b89      	ldr	r3, [pc, #548]	; (8007a4c <_vfiprintf_r+0x240>)
 8007826:	429d      	cmp	r5, r3
 8007828:	d11b      	bne.n	8007862 <_vfiprintf_r+0x56>
 800782a:	6875      	ldr	r5, [r6, #4]
 800782c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800782e:	07d9      	lsls	r1, r3, #31
 8007830:	d405      	bmi.n	800783e <_vfiprintf_r+0x32>
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	059a      	lsls	r2, r3, #22
 8007836:	d402      	bmi.n	800783e <_vfiprintf_r+0x32>
 8007838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800783a:	f7ff fad4 	bl	8006de6 <__retarget_lock_acquire_recursive>
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	071b      	lsls	r3, r3, #28
 8007842:	d501      	bpl.n	8007848 <_vfiprintf_r+0x3c>
 8007844:	692b      	ldr	r3, [r5, #16]
 8007846:	b9eb      	cbnz	r3, 8007884 <_vfiprintf_r+0x78>
 8007848:	4629      	mov	r1, r5
 800784a:	4630      	mov	r0, r6
 800784c:	f7fe fa26 	bl	8005c9c <__swsetup_r>
 8007850:	b1c0      	cbz	r0, 8007884 <_vfiprintf_r+0x78>
 8007852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007854:	07dc      	lsls	r4, r3, #31
 8007856:	d50e      	bpl.n	8007876 <_vfiprintf_r+0x6a>
 8007858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800785c:	b01d      	add	sp, #116	; 0x74
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <_vfiprintf_r+0x244>)
 8007864:	429d      	cmp	r5, r3
 8007866:	d101      	bne.n	800786c <_vfiprintf_r+0x60>
 8007868:	68b5      	ldr	r5, [r6, #8]
 800786a:	e7df      	b.n	800782c <_vfiprintf_r+0x20>
 800786c:	4b79      	ldr	r3, [pc, #484]	; (8007a54 <_vfiprintf_r+0x248>)
 800786e:	429d      	cmp	r5, r3
 8007870:	bf08      	it	eq
 8007872:	68f5      	ldreq	r5, [r6, #12]
 8007874:	e7da      	b.n	800782c <_vfiprintf_r+0x20>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d4ed      	bmi.n	8007858 <_vfiprintf_r+0x4c>
 800787c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787e:	f7ff fab3 	bl	8006de8 <__retarget_lock_release_recursive>
 8007882:	e7e9      	b.n	8007858 <_vfiprintf_r+0x4c>
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	2320      	movs	r3, #32
 800788a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007892:	2330      	movs	r3, #48	; 0x30
 8007894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a58 <_vfiprintf_r+0x24c>
 8007898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789c:	f04f 0901 	mov.w	r9, #1
 80078a0:	4623      	mov	r3, r4
 80078a2:	469a      	mov	sl, r3
 80078a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a8:	b10a      	cbz	r2, 80078ae <_vfiprintf_r+0xa2>
 80078aa:	2a25      	cmp	r2, #37	; 0x25
 80078ac:	d1f9      	bne.n	80078a2 <_vfiprintf_r+0x96>
 80078ae:	ebba 0b04 	subs.w	fp, sl, r4
 80078b2:	d00b      	beq.n	80078cc <_vfiprintf_r+0xc0>
 80078b4:	465b      	mov	r3, fp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ff93 	bl	80077e6 <__sfputs_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f000 80aa 	beq.w	8007a1a <_vfiprintf_r+0x20e>
 80078c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c8:	445a      	add	r2, fp
 80078ca:	9209      	str	r2, [sp, #36]	; 0x24
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80a2 	beq.w	8007a1a <_vfiprintf_r+0x20e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e0:	f10a 0a01 	add.w	sl, sl, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ec:	931a      	str	r3, [sp, #104]	; 0x68
 80078ee:	4654      	mov	r4, sl
 80078f0:	2205      	movs	r2, #5
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	4858      	ldr	r0, [pc, #352]	; (8007a58 <_vfiprintf_r+0x24c>)
 80078f8:	f7f8 fc92 	bl	8000220 <memchr>
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	b9d8      	cbnz	r0, 8007938 <_vfiprintf_r+0x12c>
 8007900:	06d1      	lsls	r1, r2, #27
 8007902:	bf44      	itt	mi
 8007904:	2320      	movmi	r3, #32
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800790a:	0713      	lsls	r3, r2, #28
 800790c:	bf44      	itt	mi
 800790e:	232b      	movmi	r3, #43	; 0x2b
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b2a      	cmp	r3, #42	; 0x2a
 800791a:	d015      	beq.n	8007948 <_vfiprintf_r+0x13c>
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	4654      	mov	r4, sl
 8007920:	2000      	movs	r0, #0
 8007922:	f04f 0c0a 	mov.w	ip, #10
 8007926:	4621      	mov	r1, r4
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	; 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94e      	bls.n	80079d0 <_vfiprintf_r+0x1c4>
 8007932:	b1b0      	cbz	r0, 8007962 <_vfiprintf_r+0x156>
 8007934:	9207      	str	r2, [sp, #28]
 8007936:	e014      	b.n	8007962 <_vfiprintf_r+0x156>
 8007938:	eba0 0308 	sub.w	r3, r0, r8
 800793c:	fa09 f303 	lsl.w	r3, r9, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	46a2      	mov	sl, r4
 8007946:	e7d2      	b.n	80078ee <_vfiprintf_r+0xe2>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfbb      	ittet	lt
 8007954:	425b      	neglt	r3, r3
 8007956:	f042 0202 	orrlt.w	r2, r2, #2
 800795a:	9307      	strge	r3, [sp, #28]
 800795c:	9307      	strlt	r3, [sp, #28]
 800795e:	bfb8      	it	lt
 8007960:	9204      	strlt	r2, [sp, #16]
 8007962:	7823      	ldrb	r3, [r4, #0]
 8007964:	2b2e      	cmp	r3, #46	; 0x2e
 8007966:	d10c      	bne.n	8007982 <_vfiprintf_r+0x176>
 8007968:	7863      	ldrb	r3, [r4, #1]
 800796a:	2b2a      	cmp	r3, #42	; 0x2a
 800796c:	d135      	bne.n	80079da <_vfiprintf_r+0x1ce>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	1d1a      	adds	r2, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	9203      	str	r2, [sp, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800797e:	3402      	adds	r4, #2
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a68 <_vfiprintf_r+0x25c>
 8007986:	7821      	ldrb	r1, [r4, #0]
 8007988:	2203      	movs	r2, #3
 800798a:	4650      	mov	r0, sl
 800798c:	f7f8 fc48 	bl	8000220 <memchr>
 8007990:	b140      	cbz	r0, 80079a4 <_vfiprintf_r+0x198>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	eba0 000a 	sub.w	r0, r0, sl
 8007998:	fa03 f000 	lsl.w	r0, r3, r0
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4303      	orrs	r3, r0
 80079a0:	3401      	adds	r4, #1
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a8:	482c      	ldr	r0, [pc, #176]	; (8007a5c <_vfiprintf_r+0x250>)
 80079aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ae:	2206      	movs	r2, #6
 80079b0:	f7f8 fc36 	bl	8000220 <memchr>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d03f      	beq.n	8007a38 <_vfiprintf_r+0x22c>
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <_vfiprintf_r+0x254>)
 80079ba:	bb1b      	cbnz	r3, 8007a04 <_vfiprintf_r+0x1f8>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	3307      	adds	r3, #7
 80079c0:	f023 0307 	bic.w	r3, r3, #7
 80079c4:	3308      	adds	r3, #8
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	443b      	add	r3, r7
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	e767      	b.n	80078a0 <_vfiprintf_r+0x94>
 80079d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d4:	460c      	mov	r4, r1
 80079d6:	2001      	movs	r0, #1
 80079d8:	e7a5      	b.n	8007926 <_vfiprintf_r+0x11a>
 80079da:	2300      	movs	r3, #0
 80079dc:	3401      	adds	r4, #1
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	4619      	mov	r1, r3
 80079e2:	f04f 0c0a 	mov.w	ip, #10
 80079e6:	4620      	mov	r0, r4
 80079e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ec:	3a30      	subs	r2, #48	; 0x30
 80079ee:	2a09      	cmp	r2, #9
 80079f0:	d903      	bls.n	80079fa <_vfiprintf_r+0x1ee>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0c5      	beq.n	8007982 <_vfiprintf_r+0x176>
 80079f6:	9105      	str	r1, [sp, #20]
 80079f8:	e7c3      	b.n	8007982 <_vfiprintf_r+0x176>
 80079fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fe:	4604      	mov	r4, r0
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7f0      	b.n	80079e6 <_vfiprintf_r+0x1da>
 8007a04:	ab03      	add	r3, sp, #12
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <_vfiprintf_r+0x258>)
 8007a0c:	a904      	add	r1, sp, #16
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7fd fc9a 	bl	8005348 <_printf_float>
 8007a14:	4607      	mov	r7, r0
 8007a16:	1c78      	adds	r0, r7, #1
 8007a18:	d1d6      	bne.n	80079c8 <_vfiprintf_r+0x1bc>
 8007a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a1c:	07d9      	lsls	r1, r3, #31
 8007a1e:	d405      	bmi.n	8007a2c <_vfiprintf_r+0x220>
 8007a20:	89ab      	ldrh	r3, [r5, #12]
 8007a22:	059a      	lsls	r2, r3, #22
 8007a24:	d402      	bmi.n	8007a2c <_vfiprintf_r+0x220>
 8007a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a28:	f7ff f9de 	bl	8006de8 <__retarget_lock_release_recursive>
 8007a2c:	89ab      	ldrh	r3, [r5, #12]
 8007a2e:	065b      	lsls	r3, r3, #25
 8007a30:	f53f af12 	bmi.w	8007858 <_vfiprintf_r+0x4c>
 8007a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a36:	e711      	b.n	800785c <_vfiprintf_r+0x50>
 8007a38:	ab03      	add	r3, sp, #12
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <_vfiprintf_r+0x258>)
 8007a40:	a904      	add	r1, sp, #16
 8007a42:	4630      	mov	r0, r6
 8007a44:	f7fd ff24 	bl	8005890 <_printf_i>
 8007a48:	e7e4      	b.n	8007a14 <_vfiprintf_r+0x208>
 8007a4a:	bf00      	nop
 8007a4c:	08007ed4 	.word	0x08007ed4
 8007a50:	08007ef4 	.word	0x08007ef4
 8007a54:	08007eb4 	.word	0x08007eb4
 8007a58:	0800806c 	.word	0x0800806c
 8007a5c:	08008076 	.word	0x08008076
 8007a60:	08005349 	.word	0x08005349
 8007a64:	080077e7 	.word	0x080077e7
 8007a68:	08008072 	.word	0x08008072

08007a6c <_sbrk_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d06      	ldr	r5, [pc, #24]	; (8007a88 <_sbrk_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7f9 ff12 	bl	80018a0 <_sbrk>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_sbrk_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_sbrk_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	200007d0 	.word	0x200007d0

08007a8c <__sread>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	f000 f8e2 	bl	8007c5c <_read_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa0:	181b      	addge	r3, r3, r0
 8007aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aa6:	bfac      	ite	ge
 8007aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aaa:	81a3      	strhlt	r3, [r4, #12]
 8007aac:	bd10      	pop	{r4, pc}

08007aae <__swrite>:
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	898b      	ldrh	r3, [r1, #12]
 8007ab6:	05db      	lsls	r3, r3, #23
 8007ab8:	4605      	mov	r5, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4616      	mov	r6, r2
 8007abe:	d505      	bpl.n	8007acc <__swrite+0x1e>
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f000 f898 	bl	8007bfc <_lseek_r>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	4628      	mov	r0, r5
 8007ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	f000 b817 	b.w	8007b14 <_write_r>

08007ae6 <__sseek>:
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 f885 	bl	8007bfc <_lseek_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	bf15      	itete	ne
 8007af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b02:	81a3      	strheq	r3, [r4, #12]
 8007b04:	bf18      	it	ne
 8007b06:	81a3      	strhne	r3, [r4, #12]
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <__sclose>:
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	f000 b831 	b.w	8007b74 <_close_r>
	...

08007b14 <_write_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d07      	ldr	r5, [pc, #28]	; (8007b34 <_write_r+0x20>)
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7f9 fe6b 	bl	80017fe <_write>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_write_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_write_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	200007d0 	.word	0x200007d0

08007b38 <__assert_func>:
 8007b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <__assert_func+0x2c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4605      	mov	r5, r0
 8007b44:	68d8      	ldr	r0, [r3, #12]
 8007b46:	b14c      	cbz	r4, 8007b5c <__assert_func+0x24>
 8007b48:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <__assert_func+0x30>)
 8007b4a:	9100      	str	r1, [sp, #0]
 8007b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b50:	4906      	ldr	r1, [pc, #24]	; (8007b6c <__assert_func+0x34>)
 8007b52:	462b      	mov	r3, r5
 8007b54:	f000 f81e 	bl	8007b94 <fiprintf>
 8007b58:	f000 f89f 	bl	8007c9a <abort>
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <__assert_func+0x38>)
 8007b5e:	461c      	mov	r4, r3
 8007b60:	e7f3      	b.n	8007b4a <__assert_func+0x12>
 8007b62:	bf00      	nop
 8007b64:	2000000c 	.word	0x2000000c
 8007b68:	0800807d 	.word	0x0800807d
 8007b6c:	0800808a 	.word	0x0800808a
 8007b70:	080080b8 	.word	0x080080b8

08007b74 <_close_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d06      	ldr	r5, [pc, #24]	; (8007b90 <_close_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7f9 fe59 	bl	8001836 <_close>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_close_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_close_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	200007d0 	.word	0x200007d0

08007b94 <fiprintf>:
 8007b94:	b40e      	push	{r1, r2, r3}
 8007b96:	b503      	push	{r0, r1, lr}
 8007b98:	4601      	mov	r1, r0
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	4805      	ldr	r0, [pc, #20]	; (8007bb4 <fiprintf+0x20>)
 8007b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba2:	6800      	ldr	r0, [r0, #0]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f7ff fe31 	bl	800780c <_vfiprintf_r>
 8007baa:	b002      	add	sp, #8
 8007bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb0:	b003      	add	sp, #12
 8007bb2:	4770      	bx	lr
 8007bb4:	2000000c 	.word	0x2000000c

08007bb8 <_fstat_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	; (8007bd8 <_fstat_r+0x20>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	f7f9 fe42 	bl	800184e <_fstat>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d102      	bne.n	8007bd4 <_fstat_r+0x1c>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b103      	cbz	r3, 8007bd4 <_fstat_r+0x1c>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200007d0 	.word	0x200007d0

08007bdc <_isatty_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_isatty_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7f9 fe41 	bl	800186e <_isatty>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_isatty_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_isatty_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	200007d0 	.word	0x200007d0

08007bfc <_lseek_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	; (8007c1c <_lseek_r+0x20>)
 8007c00:	4604      	mov	r4, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7f9 fe3a 	bl	8001884 <_lseek>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_lseek_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_lseek_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	200007d0 	.word	0x200007d0

08007c20 <__ascii_mbtowc>:
 8007c20:	b082      	sub	sp, #8
 8007c22:	b901      	cbnz	r1, 8007c26 <__ascii_mbtowc+0x6>
 8007c24:	a901      	add	r1, sp, #4
 8007c26:	b142      	cbz	r2, 8007c3a <__ascii_mbtowc+0x1a>
 8007c28:	b14b      	cbz	r3, 8007c3e <__ascii_mbtowc+0x1e>
 8007c2a:	7813      	ldrb	r3, [r2, #0]
 8007c2c:	600b      	str	r3, [r1, #0]
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	1e10      	subs	r0, r2, #0
 8007c32:	bf18      	it	ne
 8007c34:	2001      	movne	r0, #1
 8007c36:	b002      	add	sp, #8
 8007c38:	4770      	bx	lr
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	e7fb      	b.n	8007c36 <__ascii_mbtowc+0x16>
 8007c3e:	f06f 0001 	mvn.w	r0, #1
 8007c42:	e7f8      	b.n	8007c36 <__ascii_mbtowc+0x16>

08007c44 <__malloc_lock>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__malloc_lock+0x8>)
 8007c46:	f7ff b8ce 	b.w	8006de6 <__retarget_lock_acquire_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	200007c4 	.word	0x200007c4

08007c50 <__malloc_unlock>:
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <__malloc_unlock+0x8>)
 8007c52:	f7ff b8c9 	b.w	8006de8 <__retarget_lock_release_recursive>
 8007c56:	bf00      	nop
 8007c58:	200007c4 	.word	0x200007c4

08007c5c <_read_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_read_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f9 fdaa 	bl	80017c4 <_read>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_read_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_read_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200007d0 	.word	0x200007d0

08007c80 <__ascii_wctomb>:
 8007c80:	b149      	cbz	r1, 8007c96 <__ascii_wctomb+0x16>
 8007c82:	2aff      	cmp	r2, #255	; 0xff
 8007c84:	bf85      	ittet	hi
 8007c86:	238a      	movhi	r3, #138	; 0x8a
 8007c88:	6003      	strhi	r3, [r0, #0]
 8007c8a:	700a      	strbls	r2, [r1, #0]
 8007c8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c90:	bf98      	it	ls
 8007c92:	2001      	movls	r0, #1
 8007c94:	4770      	bx	lr
 8007c96:	4608      	mov	r0, r1
 8007c98:	4770      	bx	lr

08007c9a <abort>:
 8007c9a:	b508      	push	{r3, lr}
 8007c9c:	2006      	movs	r0, #6
 8007c9e:	f000 f82b 	bl	8007cf8 <raise>
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f7f9 fd84 	bl	80017b0 <_exit>

08007ca8 <_raise_r>:
 8007ca8:	291f      	cmp	r1, #31
 8007caa:	b538      	push	{r3, r4, r5, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	d904      	bls.n	8007cbc <_raise_r+0x14>
 8007cb2:	2316      	movs	r3, #22
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007cbe:	b112      	cbz	r2, 8007cc6 <_raise_r+0x1e>
 8007cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cc4:	b94b      	cbnz	r3, 8007cda <_raise_r+0x32>
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f830 	bl	8007d2c <_getpid_r>
 8007ccc:	462a      	mov	r2, r5
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd6:	f000 b817 	b.w	8007d08 <_kill_r>
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d00a      	beq.n	8007cf4 <_raise_r+0x4c>
 8007cde:	1c59      	adds	r1, r3, #1
 8007ce0:	d103      	bne.n	8007cea <_raise_r+0x42>
 8007ce2:	2316      	movs	r3, #22
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	e7e7      	b.n	8007cba <_raise_r+0x12>
 8007cea:	2400      	movs	r4, #0
 8007cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	4798      	blx	r3
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e7e0      	b.n	8007cba <_raise_r+0x12>

08007cf8 <raise>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <raise+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f7ff bfd3 	b.w	8007ca8 <_raise_r>
 8007d02:	bf00      	nop
 8007d04:	2000000c 	.word	0x2000000c

08007d08 <_kill_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	; (8007d28 <_kill_r+0x20>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	f7f9 fd3b 	bl	8001790 <_kill>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d102      	bne.n	8007d24 <_kill_r+0x1c>
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	b103      	cbz	r3, 8007d24 <_kill_r+0x1c>
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	bf00      	nop
 8007d28:	200007d0 	.word	0x200007d0

08007d2c <_getpid_r>:
 8007d2c:	f7f9 bd28 	b.w	8001780 <_getpid>

08007d30 <_init>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr

08007d3c <_fini>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr
